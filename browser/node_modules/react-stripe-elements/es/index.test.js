'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _index = require('./index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('index', function () {
  var elementMock = void 0;
  var elementsMock = void 0;
  var stripeMock = void 0;
  beforeEach(function () {
    elementMock = {
      mount: jest.fn(),
      destroy: jest.fn(),
      on: jest.fn(),
      update: jest.fn()
    };
    elementsMock = {
      create: jest.fn().mockReturnValue(elementMock)
    };
    stripeMock = {
      elements: jest.fn().mockReturnValue(elementsMock),
      createToken: jest.fn(),
      createSource: jest.fn()
    };

    window.Stripe = jest.fn().mockReturnValue(stripeMock);
  });

  var WrappedCheckout = function WrappedCheckout(type, additionalOptions) {
    var MyCheckout = function MyCheckout(props) {
      return _react2.default.createElement(
        'form',
        {
          onSubmit: function onSubmit(ev) {
            ev.preventDefault();
            if (type === 'token') {
              props.stripe.createToken(additionalOptions);
            } else {
              props.stripe.createSource(additionalOptions);
            }
          }
        },
        props.children,
        _react2.default.createElement(
          'button',
          null,
          'Pay'
        )
      );
    };
    return (0, _index.injectStripe)(MyCheckout);
  };

  it('smoke test', function () {
    var Checkout = WrappedCheckout('token');
    var app = (0, _enzyme.mount)(_react2.default.createElement(
      _index.StripeProvider,
      { apiKey: 'pk_test_xxx' },
      _react2.default.createElement(
        _index.Elements,
        null,
        _react2.default.createElement(
          Checkout,
          null,
          'Hello world',
          _react2.default.createElement(_index.CardElement, null)
        )
      )
    ));
    expect(app.text()).toMatch(/Hello world/);
  });

  describe('createToken', function () {
    it('should be called when set up properly', function () {
      var Checkout = WrappedCheckout('token');
      var app = (0, _enzyme.mount)(_react2.default.createElement(
        _index.StripeProvider,
        { apiKey: 'pk_test_xxx' },
        _react2.default.createElement(
          _index.Elements,
          null,
          _react2.default.createElement(
            Checkout,
            null,
            'Hello world',
            _react2.default.createElement(_index.CardElement, null)
          )
        )
      ));
      app.find('form').simulate('submit');
      expect(stripeMock.createToken).toHaveBeenCalledTimes(1);
      expect(stripeMock.createToken).toHaveBeenCalledWith(elementMock, {});
    });

    it('should be called when set up properly (split)', function () {
      var Checkout = WrappedCheckout('token');
      var app = (0, _enzyme.mount)(_react2.default.createElement(
        _index.StripeProvider,
        { apiKey: 'pk_test_xxx' },
        _react2.default.createElement(
          _index.Elements,
          null,
          _react2.default.createElement(
            Checkout,
            null,
            'Hello world',
            _react2.default.createElement(_index.CardNumberElement, null),
            _react2.default.createElement(_index.CardExpiryElement, null),
            _react2.default.createElement(_index.CardCVCElement, null),
            _react2.default.createElement(_index.PostalCodeElement, null)
          )
        )
      ));
      app.find('form').simulate('submit');
      expect(stripeMock.createToken).toHaveBeenCalledTimes(1);
      expect(stripeMock.createToken).toHaveBeenCalledWith(elementMock, {});
    });

    it('should be callable for other token types', function () {
      var Checkout = (0, _index.injectStripe)(function (props) {
        return _react2.default.createElement(
          'form',
          {
            onSubmit: function onSubmit(ev) {
              ev.preventDefault();
              props.stripe.createToken('bank_account', { some: 'data' });
            }
          },
          props.children,
          _react2.default.createElement(
            'button',
            null,
            'Pay'
          )
        );
      });
      var app = (0, _enzyme.mount)(_react2.default.createElement(
        _index.StripeProvider,
        { apiKey: 'pk_test_xxx' },
        _react2.default.createElement(
          _index.Elements,
          null,
          _react2.default.createElement(
            Checkout,
            null,
            'Hello world'
          )
        )
      ));
      app.find('form').simulate('submit');
      expect(stripeMock.createToken).toHaveBeenCalledTimes(1);
      expect(stripeMock.createToken).toHaveBeenCalledWith('bank_account', {
        some: 'data'
      });
    });
  });

  describe('createSource', function () {
    it('should be called when set up properly', function () {
      var Checkout = WrappedCheckout('source');
      var app = (0, _enzyme.mount)(_react2.default.createElement(
        _index.StripeProvider,
        { apiKey: 'pk_test_xxx' },
        _react2.default.createElement(
          _index.Elements,
          null,
          _react2.default.createElement(
            Checkout,
            null,
            'Hello world',
            _react2.default.createElement(_index.CardElement, null)
          )
        )
      ));
      app.find('form').simulate('submit');
      expect(stripeMock.createSource).toHaveBeenCalledTimes(1);
      expect(stripeMock.createSource).toHaveBeenCalledWith(elementMock, {});
    });

    it('should take additional parameters', function () {
      var Checkout = WrappedCheckout('source', { owner: { name: 'Michelle' } });
      var app = (0, _enzyme.mount)(_react2.default.createElement(
        _index.StripeProvider,
        { apiKey: 'pk_test_xxx' },
        _react2.default.createElement(
          _index.Elements,
          null,
          _react2.default.createElement(
            Checkout,
            null,
            'Hello world',
            _react2.default.createElement(_index.CardElement, null)
          )
        )
      ));
      app.find('form').simulate('submit');
      expect(stripeMock.createSource).toHaveBeenCalledTimes(1);
      expect(stripeMock.createSource).toHaveBeenCalledWith(elementMock, {
        owner: { name: 'Michelle' }
      });
    });

    it('should be callable for other source types', function () {
      var Checkout = (0, _index.injectStripe)(function (props) {
        return _react2.default.createElement(
          'form',
          {
            onSubmit: function onSubmit(ev) {
              ev.preventDefault();
              props.stripe.createSource({
                type: 'three_d_secure',
                three_d_secure: { foo: 'bar' }
              });
            }
          },
          props.children,
          _react2.default.createElement(
            'button',
            null,
            'Pay'
          )
        );
      });
      var app = (0, _enzyme.mount)(_react2.default.createElement(
        _index.StripeProvider,
        { apiKey: 'pk_test_xxx' },
        _react2.default.createElement(
          _index.Elements,
          null,
          _react2.default.createElement(
            Checkout,
            null,
            'Hello world'
          )
        )
      ));
      app.find('form').simulate('submit');
      expect(stripeMock.createSource).toHaveBeenCalledTimes(1);
      expect(stripeMock.createSource).toHaveBeenCalledWith({
        type: 'three_d_secure',
        three_d_secure: { foo: 'bar' }
      });
    });
  });

  describe('updating props', function () {
    it('should warn when attempting to update API key', function () {
      var stripe = (0, _enzyme.mount)(_react2.default.createElement(
        _index.StripeProvider,
        { apiKey: 'pk_test_xxx' },
        _react2.default.createElement('form', null)
      ));
      console.error = jest.fn();
      stripe.setProps({ apiKey: 'pk_test_yyy' });
      expect(console.error).toHaveBeenCalledTimes(1);
    });
  });

  describe('errors', function () {
    it('Provider should throw if Stripe is not loaded', function () {
      window.Stripe = undefined;
      expect(function () {
        return (0, _enzyme.mount)(_react2.default.createElement(_index.StripeProvider, { apiKey: 'pk_test_xxx' }));
      }).toThrowError(/js.stripe.com\/v3/);
    });

    describe('createSource', function () {
      it('should throw when no Element found', function () {
        var Checkout = WrappedCheckout('source');
        var app = (0, _enzyme.mount)(_react2.default.createElement(
          _index.StripeProvider,
          { apiKey: 'pk_test_xxx' },
          _react2.default.createElement(
            _index.Elements,
            null,
            _react2.default.createElement(
              Checkout,
              null,
              'Hello world'
            )
          )
        ));
        expect(function () {
          return app.find('form').simulate('submit');
        }).toThrowError(/did not specify/);
      });
    });

    describe('createToken', function () {
      it('should throw when not in Elements', function () {
        var Checkout = WrappedCheckout('token');
        expect(function () {
          return (0, _enzyme.mount)(_react2.default.createElement(
            _index.StripeProvider,
            { apiKey: 'pk_test_xxx' },
            _react2.default.createElement(
              Checkout,
              null,
              _react2.default.createElement(
                _index.Elements,
                null,
                _react2.default.createElement(_index.CardElement, null)
              )
            )
          ));
        }).toThrowError('Elements context');
      });

      it('should throw when no Element found', function () {
        var Checkout = WrappedCheckout('token');
        var app = (0, _enzyme.mount)(_react2.default.createElement(
          _index.StripeProvider,
          { apiKey: 'pk_test_xxx' },
          _react2.default.createElement(
            _index.Elements,
            null,
            _react2.default.createElement(
              Checkout,
              null,
              'Hello world'
            )
          )
        ));
        expect(function () {
          return app.find('form').simulate('submit');
        }).toThrowError(/did not specify/);
      });
    });
  });
}); // @noflow