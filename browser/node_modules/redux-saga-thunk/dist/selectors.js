'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isComplete = exports.isDone = exports.hasFailed = exports.isPending = exports.getCompleteState = exports.getDoneState = exports.getFailureState = exports.getPendingState = exports.getThunkState = exports.initialState = exports.COMPLETE = exports.DONE = exports.FAILURE = exports.PENDING = undefined;

var _initialState;

var _find = require('lodash/find');

var _find2 = _interopRequireDefault(_find);

var _pick = require('lodash/pick');

var _pick2 = _interopRequireDefault(_pick);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PENDING = exports.PENDING = 'pending';
var FAILURE = exports.FAILURE = 'failure';
var DONE = exports.DONE = 'done';
var COMPLETE = exports.COMPLETE = 'complete';

var initialState = exports.initialState = (_initialState = {}, _defineProperty(_initialState, PENDING, {}), _defineProperty(_initialState, FAILURE, {}), _defineProperty(_initialState, DONE, {}), _defineProperty(_initialState, COMPLETE, {}), _initialState);

var getIn = function getIn(state, name) {
  if (typeof name === 'undefined') {
    return !!(0, _find2.default)(state, function (value) {
      return !!value;
    });
  } else if (Array.isArray(name)) {
    return !!(0, _find2.default)((0, _pick2.default)(state, name), function (value) {
      return !!value;
    });
  } else if (Object.prototype.hasOwnProperty.call(state, name)) {
    return !!state[name];
  }
  return false;
};

var getThunkState = exports.getThunkState = function getThunkState() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (!Object.prototype.hasOwnProperty.call(state, 'thunk')) {
    throw new Error('[redux-saga-thunk] There is no thunk state on reducer');
  }
  return state.thunk || {};
};

var getPendingState = exports.getPendingState = function getPendingState(state) {
  return getThunkState(state)[PENDING] || initialState[PENDING];
};

var getFailureState = exports.getFailureState = function getFailureState(state) {
  return getThunkState(state)[FAILURE] || initialState[FAILURE];
};

var getDoneState = exports.getDoneState = function getDoneState(state) {
  return getThunkState(state)[DONE] || initialState[DONE];
};

var getCompleteState = exports.getCompleteState = function getCompleteState(state) {
  return getThunkState(state)[COMPLETE] || initialState[COMPLETE];
};

/**
 * Tells if an action is pending
 * @example
 * const mapStateToProps = state => ({
 *   fooIsPending: isPending(state, 'FOO'),
 *   fooOrBarIsPending: isPending(state, ['FOO', 'BAR']),
 *   anythingIsPending: isPending(state)
 * })
 */
var isPending = exports.isPending = function isPending(state, name) {
  return getIn(getPendingState(state), name);
};

/**
 * Tells if an action has failed
 * @example
 * const mapStateToProps = state => ({
 *   fooHasFailed: hasFailed(state, 'FOO'),
 *   fooOrBarHasFailed: hasFailed(state, ['FOO', 'BAR']),
 *   anythingHasFailed: hasFailed(state)
 * })
 */
var hasFailed = exports.hasFailed = function hasFailed(state, name) {
  return getIn(getFailureState(state), name);
};

/**
* Tells if an action is done
* @example
* const mapStateToProps = state => ({
*   fooIsDone: isDone(state, 'FOO'),
*   fooOrBarIsDone: isDone(state, ['FOO', 'BAR']),
*   anythingIsDone: isDone(state)
* })
*/
var isDone = exports.isDone = function isDone(state, name) {
  return getIn(getDoneState(state), name);
};

/**
* Tells if an action is complete
* @example
* const mapStateToProps = state => ({
*   fooIsComplete: isComplete(state, 'FOO'),
*   fooOrBarIsComplete: isComplete(state, ['FOO', 'BAR']),
*   anythingIsComplete: isComplete(state)
* })
*/
var isComplete = exports.isComplete = function isComplete(state, name) {
  return getIn(getCompleteState(state), name);
};