'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var isThunkAction = exports.isThunkAction = function isThunkAction(action) {
  return !!(action && action.meta && action.meta.thunk);
};

var isThunkRequestAction = exports.isThunkRequestAction = function isThunkRequestAction(action) {
  return !!(isThunkAction(action) && /\d{16}_REQUEST$/.test(action.meta.thunk));
};

var getThunkMeta = exports.getThunkMeta = function getThunkMeta(action) {
  if (isThunkAction(action)) {
    return action.meta.thunk;
  }
  return null;
};

var createThunkAction = exports.createThunkAction = function createThunkAction(action, thunk) {
  return _extends({}, action, {
    meta: _extends({}, action.meta, {
      thunk: thunk
    })
  });
};

var getThunkName = exports.getThunkName = function getThunkName(action) {
  var meta = getThunkMeta(action);
  if (meta && meta.replace) {
    return meta.replace(/_\d{16}_\w+$/, '');
  }
  return action.type;
};

var hasKey = exports.hasKey = function hasKey(action) {
  return (/_\d{16}_\w+$/.test(getThunkMeta(action))
  );
};

var generateThunkKey = exports.generateThunkKey = function generateThunkKey(action) {
  var meta = getThunkMeta(action);
  var name = getThunkName(action);
  return hasKey(action) ? meta.replace(/_REQUEST$/, '_RESPONSE') : name + '_' + Math.random().toFixed(16).substring(2) + '_REQUEST';
};