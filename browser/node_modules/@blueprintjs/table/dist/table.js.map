{"version":3,"sources":["../src/table.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,0CAAuF;AACvF,0CAAmE;AACnE,uCAAyC;AACzC,6BAA+B;AAG/B,mCAAgD;AAEhD,0CAA4C;AAC5C,gDAA+C;AAC/C,wCAA0C;AAC1C,sCAAkE;AAClE,qEAAuE;AACvE,2DAA6D;AAC7D,sCAAqC;AACrC,kDAAiD;AACjD,wCAAuC;AACvC,uDAAqE;AACrE,+DAAsF;AACtF,iDAAyG;AAGzG,4DAA2D;AAE3D,0CAA6C;AAC7C,4CAA8D;AAC9D,qCAAoC;AACpC,2DAAyD;AACzD,qEAAoE;AACpE,qCAQmB;AACnB,yCAAwC;AAkTxC,IAAa,KAAK;IAAS,iCAA2C;IA6DlE,eAAmB,KAAkB,EAAE,OAAa;QAApD,YACI,kBAAM,KAAK,EAAE,OAAO,CAAC,SAsCxB;QArDO,iBAAW,GAAG;YAClB,YAAY,EAAE,UAAC,GAAgB,IAAK,OAAA,KAAI,CAAC,mBAAmB,GAAG,GAAG,EAA9B,CAA8B;YAClE,YAAY,EAAE,UAAC,GAAgB,IAAK,OAAA,KAAI,CAAC,mBAAmB,GAAG,GAAG,EAA9B,CAA8B;YAClE,aAAa,EAAE,UAAC,GAAuB,IAAK,OAAA,KAAI,CAAC,qBAAqB,GAAG,GAAG,EAAhC,CAAgC;YAC5E,SAAS,EAAE,UAAC,GAAgB,IAAK,OAAA,KAAI,CAAC,gBAAgB,GAAG,GAAG,EAA3B,CAA2B;YAC5D,eAAe,EAAE,UAAC,GAAgB,IAAK,OAAA,KAAI,CAAC,sBAAsB,GAAG,GAAG,EAAjC,CAAiC;SAC3E,CAAC;QAgYM,gBAAU,GAAG,UAAC,CAAgB;YAC1B,IAAA,iBAAI,CAAU;YAChB,IAAA,gBAA4C,EAA1C,8CAAoB,EAAE,kBAAM,CAAe;YAC3C,IAAA,6CAAe,CAAe;YAEtC,EAAE,CAAC,CAAC,oBAAoB,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC;YACX,CAAC;YAED,wCAAwC;YACxC,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,CAAC,CAAC,eAAe,EAAE,CAAC;YAEpB,IAAM,KAAK,GAAG,iBAAO,CAAC,oBAAoB,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACxF,IAAM,MAAM,GAAG,iBAAO,CAAC,cAAc,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;YACnE,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;gBACjB,IAAM,OAAO,GAAG,qBAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBAC5C,YAAc,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YAC/C,CAAC;QACL,CAAC,CAAA;QA8BO,gBAAU,GAAG,UAAC,UAAsC;YACxD,IAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,UAAU;gBACzC,GAAC,OAAO,CAAC,uBAAuB,IAAG,KAAI,CAAC,sBAAsB,CAAC,2BAAiB,CAAC,UAAU,CAAC;oBAC9F,CAAC;YACH,MAAM,CAAC,CACH,6BACI,SAAS,EAAE,OAAO,EAClB,GAAG,EAAE,UAAU,EACf,WAAW,EAAE,KAAI,CAAC,mBAAmB,IAEpC,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,eAAe,CAAC,CAC5C,CACT,CAAC;;QACN,CAAC,CAAA;QAEO,yBAAmB,GAAG,UAAC,CAAgC;YAC3D,wEAAwE;YACxE,gEAAgE;YAChE,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAChC,CAAC,CAAA;QAqBO,eAAS,GAAG,UAAC,uBAAgC;YACjD,IAAM,gBAAgB,GAAG,KAAI,CAAC,0BAA0B,CAAC,2BAAiB,CAAC,UAAU,CAAC,CAAC;YACvF,6DAA6D;YAC7D,iFAAiF;YACjF,gBAAgB,CAAC,CAAC,iBAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAEpC,EAAE,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBAC1B,IAAM,yBAAyB,GAAG,iBAAO,CAAC,iCAAiC,CAAC,iBAAO,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC7F,KAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,CAAC,CAAC;YACpF,CAAC;QACL,CAAC,CAAA;QAEO,2BAAqB,GAAG,UAAC,CAAgB;YAC7C,mDAAmD;YACnD,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,CAAC,CAAC,eAAe,EAAE,CAAC;YAEpB,mEAAmE;YACnE,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC,CAAA;QAOO,8BAAwB,GAAG,UAAC,WAAmB;YACnD,IAAM,KAAK,GAAG,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAG3C,IAAA,aAAE,EACF,qCAAc,EACd,6BAAU,EACV,6CAAkB,EAClB,qGAAkB,CACZ;YAEV,IAAM,aAAa,GAAG,KAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,6BAAmB,CAAC,MAAM,CAAC,CAAC;YAExF,EAAE,CAAC,CAAC,kBAAkB,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC7B,IAAM,YAAY,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;gBACrD,IAAM,mBAAmB,GAAI,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC;gBAExD,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,YAAY,EAAE;oBACpC,OAAO,EAAE,mBAAmB,IAAI,IAAI,GAAG,mBAAmB,GAAG,aAAa;iBACnD,CAAC,CAAC;YACjC,CAAC;YAED,IAAM,SAAS,sBACX,KAAK,EAAE,WAAW,EAClB,OAAO,EAAE,aAAa,IACnB,eAAe,CACrB,CAAC;YAEF,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,oBAAC,mCAAgB,uBAAK,SAAS,EAAI,CAAC;YAC/C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,oBAAC,mCAAgB,uBAAK,SAAS,IAAE,IAAI,EAAE,aAAK,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC;YACvF,CAAC;QACL,CAAC,CAAA;QAEO,wBAAkB,GAAG,UACzB,UAAsC,EACtC,aAAiD,EACjD,iBAA+E,EAC/E,qBAAsC;YAAtC,sCAAA,EAAA,6BAAsC;YAEhC,IAAA,UAAwB,EAAtB,cAAI,EAAE,oBAAO,CAAU;YACzB,IAAA,gBAA2D,EAAzD,4BAAW,EAAE,oCAAe,EAAE,8BAAY,CAAgB;YAC5D,IAAA,gBASQ,EARV,kDAAsB,EACtB,kDAAsB,EACtB,4CAAmB,EACnB,wCAAiB,EACjB,kCAAc,EACd,kCAAc,EACd,kCAAc,EACd,oDAAuB,CACZ;YAEf,IAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,oBAAoB;gBACnD,GAAC,OAAO,CAAC,uBAAuB,IAAG,KAAI,CAAC,sBAAsB,CAAC,2BAAiB,CAAC,YAAY,CAAC;oBAChG,CAAC;YAEH,IAAM,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;YACxF,IAAM,gBAAgB,GAAG,qBAAqB,GAAG,CAAC,GAAG,aAAa,CAAC,gBAAgB,CAAC;YACpF,IAAM,cAAc,GAAG,qBAAqB,GAAG,KAAI,CAAC,uBAAuB,EAAE,GAAG,aAAa,CAAC,cAAc,CAAC;YAE7G,MAAM,CAAC,CACH,6BACI,SAAS,EAAE,OAAO,EAClB,GAAG,EAAE,UAAU;gBAEf,oBAAC,2BAAY,IACT,sBAAsB,EAAE,sBAAsB,EAC9C,YAAY,EAAE,KAAI,CAAC,wBAAwB,EAC3C,WAAW,EAAE,WAAW,EACxB,IAAI,EAAE,IAAI,EACV,aAAa,EAAE,mBAAmB,EAClC,WAAW,EAAE,iBAAiB,EAC9B,OAAO,EAAE,KAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,4BAAkB,CAAC,cAAc,CAAC,EACjF,OAAO,EAAE,OAAO,EAChB,cAAc,EAAE,cAAc,EAC9B,cAAc,EAAE,cAAc,EAC9B,oBAAoB,EAAE,KAAI,CAAC,wBAAwB,EACnD,OAAO,EAAE,KAAI,CAAC,WAAW,EACzB,YAAY,EAAE,KAAI,CAAC,gBAAgB,EACnC,WAAW,EAAE,KAAI,CAAC,sBAAsB,EACxC,YAAY,EAAE,iBAAiB,EAC/B,aAAa,EAAE,aAAa,EAC5B,WAAW,EAAE,KAAI,CAAC,0BAA0B,CAAC,2BAAiB,CAAC,YAAY,CAAC,EAC5E,eAAe,EAAE,eAAe,EAChC,uBAAuB,EAAE,uBAAuB,EAChD,gBAAgB,EAAE,gBAAgB,EAClC,cAAc,EAAE,cAAc,IAE7B,KAAI,CAAC,KAAK,CAAC,QAAQ,CACT;gBAEd,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,uBAAuB,CAAC,CACpD,CACT,CAAC;;QACN,CAAC,CAAA;QAEO,qBAAe,GAAG,UACtB,UAAsC,EACtC,aAAiD,EACjD,iBAA+E,EAC/E,kBAAmC;YAAnC,mCAAA,EAAA,0BAAmC;YAE7B,IAAA,UAAwB,EAAtB,cAAI,EAAE,oBAAO,CAAU;YACzB,IAAA,gBAA2D,EAAzD,4BAAW,EAAE,oCAAe,EAAE,8BAAY,CAAgB;YAC5D,IAAA,gBAUQ,EATV,kDAAsB,EACtB,kDAAsB,EACtB,sCAAgB,EAChB,kCAAc,EACd,kCAAc,EACd,8BAAY,EACZ,8BAAY,EACZ,oCAAe,EACf,oDAAuB,CACZ;YAEf,IAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,iBAAiB;gBAChD,GAAC,OAAO,CAAC,uBAAuB,IAAG,KAAI,CAAC,sBAAsB,CAAC,2BAAiB,CAAC,SAAS,CAAC;oBAC7F,CAAC;YAEH,IAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;YAClF,IAAM,aAAa,GAAG,kBAAkB,GAAG,CAAC,GAAG,UAAU,CAAC,aAAa,CAAC;YACxE,IAAM,WAAW,GAAG,kBAAkB,GAAG,KAAI,CAAC,oBAAoB,EAAE,GAAG,UAAU,CAAC,WAAW,CAAC;YAE9F,MAAM,CAAC,CACH,6BACI,SAAS,EAAE,OAAO,EAClB,GAAG,EAAE,UAAU;gBAEf,oBAAC,qBAAS,IACN,sBAAsB,EAAE,sBAAsB,EAC9C,WAAW,EAAE,WAAW,EACxB,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,OAAO,EAChB,aAAa,EAAE,gBAAgB,EAC/B,WAAW,EAAE,cAAc,EAC3B,OAAO,EAAE,KAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,4BAAkB,CAAC,WAAW,CAAC,EAC9E,YAAY,EAAE,YAAY,EAC1B,YAAY,EAAE,YAAY,EAC1B,OAAO,EAAE,KAAI,CAAC,WAAW,EACzB,YAAY,EAAE,KAAI,CAAC,gBAAgB,EACnC,aAAa,EAAE,aAAa,EAC5B,WAAW,EAAE,KAAI,CAAC,mBAAmB,EACrC,YAAY,EAAE,iBAAiB,EAC/B,kBAAkB,EAAE,KAAI,CAAC,sBAAsB,EAC/C,WAAW,EAAE,KAAI,CAAC,0BAA0B,CAAC,2BAAiB,CAAC,SAAS,CAAC,EACzE,eAAe,EAAE,eAAe,EAChC,eAAe,EAAE,eAAe,EAChC,uBAAuB,EAAE,uBAAuB,EAChD,aAAa,EAAE,aAAa,EAC5B,WAAW,EAAE,WAAW,GAC1B;gBAED,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,oBAAoB,CAAC,CACjD,CACT,CAAC;;QACN,CAAC,CAAA;QAEO,sBAAgB,GAAG,UAAC,QAAgB,EAAE,WAAmB;YAC7D,IAAM,WAAW,GAAG,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACrD,IAAM,IAAI,GAAG,WAAW,CAAC,UAAU,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAC3D,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;YAEvC,IAAM,OAAO,GAAG,WAAW,IAAI,IAAI;kBAC7B,WAAW;kBACX,KAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,cAAc,EAAE,6BAAmB,CAAC,KAAK,CAAC,CAAC;YAEnF,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,qBAAK,WAAW,IAAE,OAAO,SAAA,GAAgB,CAAC,CAAC;QAC/E,CAAC,CAAA;QAEO,gBAAU,GAAG,UACjB,YAA0B,EAC1B,kBAAmC,EACnC,qBAAsC;YADtC,mCAAA,EAAA,0BAAmC;YACnC,sCAAA,EAAA,6BAAsC;YAEhC,IAAA,UAAwB,EAAtB,cAAI,EAAE,oBAAO,CAAU;YACzB,IAAA,gBAA2D,EAAzD,4BAAW,EAAE,oCAAe,EAAE,8BAAY,CAAgB;YAC5D,IAAA,gBAOQ,EANV,kDAAsB,EACtB,kDAAsB,EACtB,kCAAc,EACd,gDAAqB,EACrB,0BAAU,EACV,oDAAuB,CACZ;YAEf,IAAM,gBAAgB,GAAG,KAAI,CAAC,0BAA0B,EAAE,CAAC;YAC3D,IAAM,aAAa,GAAG,KAAI,CAAC,uBAAuB,EAAE,CAAC;YAErD,IAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;YAClF,IAAM,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;YAExF,IAAM,gBAAgB,GAAG,qBAAqB,GAAG,CAAC,GAAG,aAAa,CAAC,gBAAgB,CAAC;YACpF,IAAM,cAAc,GAAG,qBAAqB,GAAG,gBAAgB,GAAG,aAAa,CAAC,cAAc,CAAC;YAC/F,IAAM,aAAa,GAAG,kBAAkB,GAAG,CAAC,GAAG,UAAU,CAAC,aAAa,CAAC;YACxE,IAAM,WAAW,GAAG,kBAAkB,GAAG,aAAa,GAAG,UAAU,CAAC,WAAW,CAAC;YAEhF,qFAAqF;YACrF,IAAM,gBAAgB,GAAG,YAAY,KAAK,4BAAY,CAAC,IAAI;kBACrD,KAAI,CAAC,oBAAoB;kBACzB,SAAS,CAAC;YAEhB,MAAM,CAAC,CACH;gBACI,oBAAC,qBAAS,IACN,sBAAsB,EAAE,sBAAsB,EAC9C,YAAY,EAAE,KAAI,CAAC,gBAAgB,EACnC,WAAW,EAAE,WAAW,EACxB,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,KAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,4BAAkB,CAAC,KAAK,CAAC,EACxE,OAAO,EAAE,OAAO,EAChB,gBAAgB,EAAE,gBAAgB,EAClC,OAAO,EAAE,KAAI,CAAC,WAAW,EACzB,WAAW,EAAE,KAAI,CAAC,0BAA0B,CAAC,2BAAiB,CAAC,KAAK,CAAC,EACrE,qBAAqB,EAAE,qBAAqB,EAC5C,UAAU,EAAE,UAAU,EACtB,eAAe,EAAE,eAAe,EAChC,uBAAuB,EAAE,uBAAuB,EAChD,YAAY,EAAE,YAAY,EAE1B,gBAAgB,EAAE,gBAAgB,EAClC,cAAc,EAAE,cAAc,EAE9B,aAAa,EAAE,aAAa,EAC5B,WAAW,EAAE,WAAW,EAExB,gBAAgB,EAAE,qBAAqB,GAAG,gBAAgB,GAAG,SAAS,EACtE,aAAa,EAAE,kBAAkB,GAAG,aAAa,GAAG,SAAS,GAC/D;gBACD,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,eAAe,EAAE,YAAY,CAAC,CAC1D,CACT,CAAC;QACN,CAAC,CAAA;QA0FO,0BAAoB,GAAG;YAC3B,qEAAqE;YACrE,wEAAwE;YACxE,wEAAwE;YACxE,8DAA8D;YAC9D,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC;gBAClC,YAAc,CAAC,UAAU,CAAC,KAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAC3D,CAAC;QACL,CAAC,CAAA;QAEO,yBAAmB,GAAG,UAAC,CAAgB,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,CAAC,EAAE,MAAM,CAAC,EAA/B,CAA+B,CAAC;QAC5E,iCAA2B,GAAG,UAAC,CAAgB,IAAK,OAAA,KAAI,CAAC,uBAAuB,CAAC,CAAC,EAAE,MAAM,CAAC,EAAvC,CAAuC,CAAC;QAC5F,0BAAoB,GAAG,UAAC,CAAgB,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,CAAC,EAAE,OAAO,CAAC,EAAhC,CAAgC,CAAC;QAC9E,kCAA4B,GAAG,UAAC,CAAgB,IAAK,OAAA,KAAI,CAAC,uBAAuB,CAAC,CAAC,EAAE,OAAO,CAAC,EAAxC,CAAwC,CAAC;QAC9F,uBAAiB,GAAG,UAAC,CAAgB,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,CAAC,EAAE,IAAI,CAAC,EAA7B,CAA6B,CAAC;QACxE,+BAAyB,GAAG,UAAC,CAAgB,IAAK,OAAA,KAAI,CAAC,uBAAuB,CAAC,CAAC,EAAE,IAAI,CAAC,EAArC,CAAqC,CAAC;QACxF,yBAAmB,GAAG,UAAC,CAAgB,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,CAAC,EAAE,MAAM,CAAC,EAA/B,CAA+B,CAAC;QAC5E,iCAA2B,GAAG,UAAC,CAAgB,IAAK,OAAA,KAAI,CAAC,uBAAuB,CAAC,CAAC,EAAE,MAAM,CAAC,EAAvC,CAAuC,CAAC;QAoF5F,qBAAe,GAAG,UAAC,MAAe,EAAE,YAA0B;YAC1D,IAAA,+CAAgB,CAAgB;YAExC,IAAM,WAAW,GAAG,iBAAO,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YACzD,IAAM,KAAK,GAAG,KAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAE/C,8EAA8E;YAC9E,IAAM,kBAAkB,GACpB,CAAC,YAAY,KAAK,4BAAY,CAAC,QAAQ,IAAI,YAAY,KAAK,4BAAY,CAAC,IAAI,CAAC;mBAC3E,gBAAgB,IAAI,IAAI,IAAI,gBAAgB,GAAG,CAAC,CAAC;YAExD,IAAM,WAAW,GAAG,KAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAC1C,IAAM,UAAU,GAAG,KAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YAExC,+EAA+E;YAC/E,IAAM,mBAAmB,GAAG,CAAC,CAAC;YAC9B,IAAM,yBAAyB,GAAG,MAAI,mBAAmB,OAAI,CAAC;YAE9D,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAClB,KAAK,2BAAiB,CAAC,KAAK;oBACxB,MAAM,CAAC,KAAK,CAAC;gBACjB,KAAK,2BAAiB,CAAC,YAAY;oBAC/B,KAAK,CAAC,GAAG,GAAG,yBAAyB,CAAC;oBACtC,KAAK,CAAC,MAAM,GAAG,WAAW,GAAG,mBAAmB,CAAC;oBACjD,MAAM,CAAC,KAAK,CAAC;gBACjB,KAAK,2BAAiB,CAAC,SAAS;oBAC5B,KAAK,CAAC,IAAI,GAAG,yBAAyB,CAAC;oBACvC,KAAK,CAAC,KAAK,GAAG,UAAU,GAAG,mBAAmB,CAAC;oBAC/C,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBACrB,KAAK,CAAC,KAAK,GAAG,yBAAyB,CAAC;oBAC5C,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC;gBACjB,KAAK,2BAAiB,CAAC,UAAU;oBAC7B,KAAK,CAAC,IAAI,GAAG,yBAAyB,CAAC;oBACvC,KAAK,CAAC,GAAG,GAAG,yBAAyB,CAAC;oBACtC,KAAK,CAAC,KAAK,GAAG,UAAU,GAAG,mBAAmB,CAAC;oBAC/C,KAAK,CAAC,MAAM,GAAG,WAAW,GAAG,mBAAmB,CAAC;oBACjD,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBACrB,KAAK,CAAC,KAAK,GAAG,yBAAyB,CAAC;oBAC5C,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC;gBACjB;oBACI,MAAM,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;YACnC,CAAC;QACL,CAAC,CAAA;QAEO,qBAAe,GAAG,UAAC,MAAe;YAC9B,IAAA,iBAAI,CAAU;YACd,IAAA,uCAAY,CAAgB;YACpC,EAAE,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YACD,IAAM,WAAW,GAAG,iBAAO,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YACzD,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAE1C,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAClB,KAAK,2BAAiB,CAAC,UAAU;oBAC7B,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;oBACpB,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;oBACrB,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;oBAClB,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;oBACnB,KAAK,CAAC,YAAY,GAAG,MAAM,CAAC;oBAC5B,KAAK,CAAC,WAAW,GAAG,MAAM,CAAC;oBAC3B,MAAM,CAAC,KAAK,CAAC;gBAEjB;oBACI,MAAM,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;YACnC,CAAC;QACL,CAAC,CAAA;QAEO,6BAAuB,GAAG,UAAC,MAAe;YACtC,IAAA,iBAAI,CAAU;YACd,IAAA,uCAAY,CAAgB;YACpC,EAAE,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YACD,IAAM,WAAW,GAAG,iBAAO,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YACzD,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAE1C,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAClB,KAAK,2BAAiB,CAAC,UAAU;oBAC7B,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;oBACpB,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC;oBAC1B,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;oBACtB,MAAM,CAAC,KAAK,CAAC;gBACjB,KAAK,2BAAiB,CAAC,YAAY;oBAC/B,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;oBACtB,MAAM,CAAC,KAAK,CAAC;gBAEjB;oBACI,MAAM,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;YACnC,CAAC;QACL,CAAC,CAAA;QAEO,0BAAoB,GAAG,UAAC,MAAe;YACnC,IAAA,iBAAI,CAAU;YACd,IAAA,uCAAY,CAAgB;YACpC,EAAE,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YACD,IAAM,WAAW,GAAG,iBAAO,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YACzD,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC1C,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAClB,KAAK,2BAAiB,CAAC,UAAU;oBAC7B,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC;oBACnB,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;oBACzB,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;oBACrB,MAAM,CAAC,KAAK,CAAC;gBACjB,KAAK,2BAAiB,CAAC,SAAS;oBAC5B,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;oBACrB,MAAM,CAAC,KAAK,CAAC;gBAEjB;oBACI,MAAM,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;YACnC,CAAC;QACL,CAAC,CAAA;QAEO,8BAAwB,GAAG,UAAC,WAAmB,EAAE,KAAa;YAClE,IAAM,eAAe,GAAG,KAAI,CAAC,KAAK,CAAC,eAAe,CAAC;YACnD,IAAM,YAAY,GAAG,KAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;YAErD,EAAE,CAAC,CAAC,iBAAO,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBACxC,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,YAAY,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;oBACjD,YAAY,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBAC9B,CAAC;YACL,CAAC;YACD,EAAE,CAAC,CAAC,iBAAO,CAAC,aAAa,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;gBACtD,iBAAO,CAAC,oBAAoB,CAAC,eAAe,EAAE,UAAC,GAAW;oBACtD,YAAY,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBAC9B,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,YAAY,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC;YACtC,CAAC;YAED,KAAI,CAAC,cAAc,EAAE,CAAC;YACtB,KAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,cAAA,EAAE,CAAC,CAAC;YAExB,IAAA,uDAAoB,CAAgB;YAC5C,EAAE,CAAC,CAAC,oBAAoB,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC/B,oBAAoB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YAC7C,CAAC;QACL,CAAC,CAAA;QAEO,4BAAsB,GAAG,UAAC,QAAgB,EAAE,MAAc;YAC9D,IAAM,eAAe,GAAG,KAAI,CAAC,KAAK,CAAC,eAAe,CAAC;YACnD,IAAM,UAAU,GAAG,KAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YAEjD,EAAE,CAAC,CAAC,iBAAO,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBACxC,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;oBAC/C,UAAU,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;gBAC7B,CAAC;YACL,CAAC;YACD,EAAE,CAAC,CAAC,iBAAO,CAAC,UAAU,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAChD,iBAAO,CAAC,iBAAiB,CAAC,eAAe,EAAE,UAAC,GAAW;oBACnD,UAAU,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;gBAC7B,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,UAAU,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;YAClC,CAAC;YAED,KAAI,CAAC,cAAc,EAAE,CAAC;YACtB,KAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,YAAA,EAAE,CAAC,CAAC;YAEtB,IAAA,mDAAkB,CAAgB;YAC1C,EAAE,CAAC,CAAC,kBAAkB,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC7B,kBAAkB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACzC,CAAC;QACL,CAAC,CAAA;QAEO,sBAAgB,GAAG,UAAC,MAAkC;YAC1D,qEAAqE;YACrE,oEAAoE;YACpE,oEAAoE;YACpE,sBAAsB;YACtB,EAAE,CAAC,CAAC,KAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC;gBAChC,KAAI,CAAC,gBAAgB,CAAC,UAAU,GAAG,CAAC,CAAC;gBACrC,KAAI,CAAC,gBAAgB,CAAC,SAAS,GAAG,CAAC,CAAC;YACxC,CAAC;QACL,CAAC,CAAA;QAEO,sBAAgB,GAAG,UAAC,KAAwC;YAChE,oEAAoE;YACpE,iBAAiB;YACjB,KAAK,CAAC,eAAe,EAAE,CAAC;YAExB,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,IAAI,IAAI,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;gBACrD,IAAM,YAAY,GAAG,KAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;gBACpD,KAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YAC1C,CAAC;QACL,CAAC,CAAA;QAEO,oBAAc,GAAG,UAAC,gBAA2B;YACjD,KAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAA;QAED,2DAA2D;QAC3D,0BAA0B;QAClB,qBAAe,GAAG,UAAC,CAAgB,EAAE,SAA2C;YACpF,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,CAAC,CAAC,eAAe,EAAE,CAAC;YAEZ,IAAA,qCAAW,CAAgB;YACnC,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtB,uFAAuF;gBACvF,oBAAoB;gBACpB,MAAM,CAAC;YACX,CAAC;YAED,IAAM,cAAc,GAAG,EAAE,GAAG,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,WAAW,CAAC,GAAG,EAAE,mBAAmB,EAAE,CAAC,EAAE,CAAC;YACtF,IAAA,iBAAI,CAAU;YAEtB,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBAChB,KAAK,IAAI;oBACL,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;oBACxB,KAAK,CAAC;gBACV,KAAK,MAAM;oBACP,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;oBACxB,KAAK,CAAC;gBACV,KAAK,MAAM;oBACP,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;oBACxB,KAAK,CAAC;gBACV,KAAK,OAAO;oBACR,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;oBACxB,KAAK,CAAC;gBACV;oBACI,KAAK,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,cAAc,CAAC,GAAG,GAAG,CAAC,IAAI,cAAc,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO;gBAC5D,cAAc,CAAC,GAAG,GAAG,CAAC,IAAI,cAAc,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC/D,MAAM,CAAC;YACX,CAAC;YAED,oDAAoD;YACpD,IAAM,mBAAmB,GAAG,CAAC,iBAAO,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;YACnF,KAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;YAC1C,KAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;YAEjC,gCAAgC;YAChC,KAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;QACjD,CAAC,CAAA;QAED,2DAA2D;QAC3D,0BAA0B;QAClB,6BAAuB,GAAG,UAAC,CAAgB,EAAE,SAA2C;YAC5F,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,CAAC,CAAC,eAAe,EAAE,CAAC;YAEd,IAAA,gBAA6C,EAA3C,4BAAW,EAAE,oCAAe,CAAgB;YAC5C,IAAA,iBAAI,CAAU;YAEtB,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtB,uFAAuF;gBACvF,oBAAoB;gBACpB,MAAM,CAAC;YACX,CAAC;YAED,IAAI,cAAc,GAAG;gBACjB,GAAG,EAAE,WAAW,CAAC,GAAG;gBACpB,mBAAmB,EAAE,WAAW,CAAC,mBAAmB;gBACpD,GAAG,EAAE,WAAW,CAAC,GAAG;aACvB,CAAC;YAEF,0GAA0G;YAC1G,EAAE,CAAC,CAAC,WAAW,CAAC,mBAAmB,IAAI,IAAI,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxE,IAAM,eAAe,GAAG,iBAAO,CAAC,uBAAuB,CACnD,eAAe,CAAC,CAAC,CAAC,EAClB,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,CACf,CAAC;gBAEF,cAAc,GAAG;oBACb,GAAG,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC5B,mBAAmB,EAAE,CAAC;oBACtB,GAAG,EAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;iBAChC,CAAC;YACN,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC/B,KAAI,CAAC,eAAe,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;oBACnC,MAAM,CAAC;gBACX,CAAC;gBAED,IAAM,eAAe,GAAG,iBAAO,CAAC,uBAAuB,CACnD,eAAe,CAAC,WAAW,CAAC,mBAAmB,CAAC,EAChD,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,CACf,CAAC;gBAEF,EAAE,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;uBAChD,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;uBACnD,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBAElC,KAAI,CAAC,eAAe,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;oBACnC,MAAM,CAAC;gBACX,CAAC;gBAED,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBAChB,KAAK,IAAI;wBACL,cAAc,GAAG,KAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;wBACzF,KAAK,CAAC;oBACV,KAAK,MAAM;wBACP,cAAc,GAAG,KAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;wBACzF,KAAK,CAAC;oBACV,KAAK,MAAM;wBACP,cAAc,GAAG,KAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;wBAC1F,KAAK,CAAC;oBACV,KAAK,OAAO;wBACR,cAAc,GAAG,KAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;wBAC1F,KAAK,CAAC;oBACV;wBACI,KAAK,CAAC;gBACd,CAAC;YACL,CAAC;YAED,EAAE,CAAC,CAAC,cAAc,CAAC,GAAG,GAAG,CAAC,IAAI,cAAc,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO;gBAC5D,cAAc,CAAC,GAAG,GAAG,CAAC,IAAI,cAAc,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC/D,MAAM,CAAC;YACX,CAAC;YAED,KAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;YAEjC,gCAAgC;YAChC,KAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;QACjD,CAAC,CAAA;QAEO,6BAAuB,GAAG,UAAC,WAAoC;YAC3D,IAAA,qBAAG,EAAE,qBAAG,CAAiB;YACzB,IAAA,uCAAY,CAAgB;YAEpC,iFAAiF;YACjF,0CAA0C;YAC1C,IAAM,cAAc,GAAG;gBACnB,GAAG,EAAE,YAAY,CAAC,GAAG;gBACrB,KAAK,EAAE,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC,KAAK;gBAC7C,MAAM,EAAE,YAAY,CAAC,GAAG,GAAG,YAAY,CAAC,MAAM;gBAC9C,IAAI,EAAE,YAAY,CAAC,IAAI;aAC1B,CAAC;YACF,IAAM,iBAAiB,GAAG;gBACtB,GAAG,EAAE,KAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC;gBAC7C,KAAK,EAAE,KAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC;gBAC1C,MAAM,EAAE,KAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC;gBAC5C,IAAI,EAAE,KAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC;aAChD,CAAC;YACF,yCAAyC;YAEzC,IAAM,gBAAgB,GAAG,iBAAiB,CAAC,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC;YAC1E,IAAM,iBAAiB,GAAG,iBAAiB,CAAC,MAAM,GAAG,iBAAiB,CAAC,GAAG,CAAC;YAE3E,IAAM,8BAA8B,GAAG,gBAAgB,GAAG,YAAY,CAAC,KAAK,CAAC;YAC7E,IAAM,+BAA+B,GAAG,iBAAiB,GAAG,YAAY,CAAC,MAAM,CAAC;YAEhF,IAAI,aAAa,GAAG,YAAY,CAAC,GAAG,CAAC;YACrC,IAAI,cAAc,GAAG,YAAY,CAAC,IAAI,CAAC;YAEvC,qFAAqF;YACrF,0FAA0F;YAC1F,EAAE,CAAC,CAAC,iBAAiB,CAAC,GAAG,GAAG,cAAc,CAAC,GAAG,IAAI,+BAA+B,CAAC,CAAC,CAAC;gBAChF,wEAAwE;gBACxE,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;YAC3D,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC1D,cAAc;gBACd,IAAM,WAAW,GAAG,iBAAiB,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;gBACrE,aAAa,GAAG,cAAc,CAAC,GAAG,GAAG,WAAW,CAAC;YACrD,CAAC;YAED,mFAAmF;YACnF,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,IAAI,8BAA8B,CAAC,CAAC,CAAC;gBACjF,iDAAiD;gBACjD,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;YAC7D,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;gBACxD,eAAe;gBACf,IAAM,WAAW,GAAG,iBAAiB,CAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC;gBACnE,cAAc,GAAG,cAAc,CAAC,IAAI,GAAG,WAAW,CAAC;YACvD,CAAC;YAED,KAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;QAC7D,CAAC,CAAA;QA+BO,iBAAW,GAAG,UAAC,WAAoC;YACvD,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC1B,gDAAgD;gBAChD,MAAM,CAAC;YACX,CAAC;YAED,wDAAwD;YACxD,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;gBACjC,KAAI,CAAC,QAAQ,CAAC,EAAE,WAAW,aAAA,EAAiB,CAAC,CAAC;YAClD,CAAC;YAED,YAAc,CAAC,UAAU,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAC/D,CAAC,CAAA;QAEO,qBAAe,GAAG,UAAC,eAA0B;YACjD,2DAA2D;YAC3D,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,eAAe,IAAI,IAAI,CAAC,CAAC,CAAC;gBACrC,KAAI,CAAC,QAAQ,CAAC,EAAE,eAAe,iBAAA,EAAiB,CAAC,CAAC;YACtD,CAAC;YAEO,IAAA,qCAAW,CAAgB;YACnC,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtB,WAAW,CAAC,eAAe,CAAC,CAAC;YACjC,CAAC;QACL,CAAC,CAAA;QAEO,6BAAuB,GAAG,UAAC,cAAwB;YACvD,KAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,gBAAA,EAAiB,CAAC,CAAC;QACzE,CAAC,CAAA;QAEO,4BAAsB,GAAG,UAAC,QAAgB,EAAE,QAAgB,EAAE,MAAc;YAChF,KAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,cAAc,EAAE,SAAS,EAAiB,CAAC,CAAC;YACjF,YAAc,CAAC,UAAU,CAAC,KAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QACzF,CAAC,CAAA;QAEO,0BAAoB,GAAG,UAAC,gBAA0B;YACtD,KAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,gBAAgB,kBAAA,EAAiB,CAAC,CAAC;QAC3E,CAAC,CAAA;QAEO,yBAAmB,GAAG,UAAC,QAAgB,EAAE,QAAgB,EAAE,MAAc;YAC7E,KAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,gBAAgB,EAAE,SAAS,EAAiB,CAAC,CAAC;YACnF,YAAc,CAAC,UAAU,CAAC,KAAI,CAAC,KAAK,CAAC,eAAe,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QACtF,CAAC,CAAA;QAEO,sBAAgB,GAAG,UAAC,cAAsB;YAAtB,+BAAA,EAAA,sBAAsB;YAC9C,KAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,gBAAA,EAAE,CAAC,CAAC;QACtC,CAAC,CAAA;QAEO,sBAAgB,GAAG,UAAC,cAAwB,EAAE,aAAqB;YACvE,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC,CAAC;gBACzB,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC;YACD,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACtD,CAAC,CAAA;QAeO,wBAAkB,GAAG,UAAC,gBAAsB;YAChD,KAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,gBAAgB,EAAE,CAAC,CAAC;YAE1C,IAAA,uCAAY,CAAgB;YAEpC,IAAM,iBAAiB,GACnB,CAAC,YAAY,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;mBAC7D,CAAC,YAAY,IAAI,IAAI,IAAI,gBAAgB,IAAI,IAAI,CAAC,CAAC;YAE1D,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBACpB,KAAI,CAAC,kCAAkC,CAAC,gBAAgB,CAAC,CAAC;YAC9D,CAAC;QACL,CAAC,CAAA;QAQO,6BAAuB,GAAG;YAC9B,IAAM,gBAAgB,GAAG,KAAI,CAAC,0BAA0B,EAAE,CAAC;YAC3D,MAAM,CAAC,CAAC,gBAAgB,IAAI,IAAI,CAAC,GAAG,gBAAgB,GAAG,CAAC,GAAG,SAAS,CAAC;QACzE,CAAC,CAAA;QAEO,0BAAoB,GAAG;YAC3B,IAAM,aAAa,GAAG,KAAI,CAAC,uBAAuB,EAAE,CAAC;YACrD,MAAM,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC,GAAG,aAAa,GAAG,CAAC,GAAG,SAAS,CAAC;QACnE,CAAC,CAAA;QAaO,6BAAuB,GAAG,UAAC,cAAwB;YACvD,KAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,gBAAA,EAAiB,CAAC,CAAC;QACrD,CAAC,CAAA;QAEO,0BAAoB,GAAG,UAAC,gBAA0B;YACtD,KAAI,CAAC,QAAQ,CAAC,EAAE,gBAAgB,kBAAA,EAAiB,CAAC,CAAC;QACvD,CAAC,CAAA;QAEO,gBAAU,GAAG,UAAC,GAAgB,IAAK,OAAA,KAAI,CAAC,WAAW,GAAG,GAAG,EAAtB,CAAsB,CAAC;QAC1D,qBAAe,GAAG,UAAC,GAAgB,IAAK,OAAA,KAAI,CAAC,gBAAgB,GAAG,GAAG,EAA3B,CAA2B,CAAC;QA95ClE,IAAA,gBAOQ,EANV,sBAAQ,EACR,8BAAY,EACZ,sCAAgB,EAChB,0CAAkB,EAClB,oBAAO,EACP,0BAAU,CACC;QAEf,KAAI,CAAC,aAAa,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAA4C,CAAC;QACjG,KAAI,CAAC,eAAe,GAAG,OAAK,CAAC,mBAAmB,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC;QAErE,8DAA8D;QAC9D,kEAAkE;QAClE,4BAA4B;QAC5B,IAAI,eAAe,GAAG,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,cAAM,OAAA,kBAAkB,EAAlB,CAAkB,CAAC,CAAC;QACvE,eAAe,GAAG,aAAK,CAAC,kBAAkB,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;QAC1E,IAAI,aAAa,GAAG,aAAK,CAAC,KAAK,CAAC,OAAO,EAAE,cAAM,OAAA,gBAAgB,EAAhB,CAAgB,CAAC,CAAC;QACjE,aAAa,GAAG,aAAK,CAAC,kBAAkB,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;QAEpE,IAAM,eAAe,GAAG,CAAC,KAAK,CAAC,eAAe,IAAI,IAAI,CAAC,GAAG,EAAe,GAAG,KAAK,CAAC,eAAe,CAAC;QAClG,IAAM,WAAW,GAAG,gBAAgB,CAAC,qBAAqB,CACtD,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,WAAW,EACjB,SAAS,EACT,eAAe,CAClB,CAAC;QAEF,KAAI,CAAC,KAAK,GAAG;YACT,YAAY,EAAE,eAAe;YAC7B,WAAW,aAAA;YACX,cAAc,EAAE,KAAK;YACrB,YAAY,EAAE,KAAK;YACnB,UAAU,EAAE,aAAa;YACzB,eAAe,iBAAA;SAClB,CAAC;;IACN,CAAC;IA1Ec,yBAAmB,GAAlC,UAAmC,QAAwC;QACvE,IAAM,eAAe,GAA4B,EAAE,CAAC;QACpD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,IAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;YACjC,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;gBACd,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;YACrC,CAAC;QACL,CAAC;QACD,MAAM,CAAC,eAAe,CAAC;IAC3B,CAAC;IAmED,mBAAmB;IACnB,mBAAmB;IAEnB;;;OAGG;IACI,uCAAuB,GAA9B,UAA+B,aAAiC;QAAhE,iBAgBC;QAfG,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC,CAAC;YACxB,6CAA6C;YAC7C,IAAM,qBAAqB,GAAG,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YACxF,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,qBAAqB,CAAC,gBAAgB,EAAE,GAAG,IAAI,qBAAqB,CAAC,cAAc,EAAE,GAAG,EAAE,EAAE,CAAC;gBACxG,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC,CAAC;YACjF,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAM,kBAAkB,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,aAAa,GAAG,CAAC,aAAa,CAAC,CAAC;YAC1F,IAAM,gBAAgB,GAAG,kBAAkB,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,6BAA6B,CAAC,GAAG,CAAC,EAA/C,CAA+C,CAAC,CAAC;YAC1G,OAAO,GAAG,IAAI,CAAC,GAAG,OAAR,IAAI,EAAQ,gBAAgB,CAAC,CAAC;QAC5C,CAAC;QACD,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrE,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,YAAA,EAAE,CAAC,CAAC;IAClC,CAAC;IAED;;;;;;;;;;;;;;;;OAgBG;IACI,8BAAc,GAArB,UAAsB,MAAe;QAC3B,IAAA,4BAAsE,EAApE,wBAAoB,EAAE,sBAAkB,CAA6B;QAE7E,IAAM,aAAa,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACrD,IAAM,gBAAgB,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAErD,IAAA,4LAQL,EARO,0BAAU,EAAE,wBAAS,CAQ3B;QAEF,IAAM,mBAAmB,GAAG,IAAI,CAAC,6BAA6B,EAAE,GAAG,CAAC,GAAG,UAAU,CAAC;QAClF,IAAM,kBAAkB,GAAG,IAAI,CAAC,2BAA2B,EAAE,GAAG,CAAC,GAAG,SAAS,CAAC;QAE9E,qEAAqE;QACrE,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;IACzF,CAAC;IAED,kBAAkB;IAClB,kBAAkB;IAEX,qCAAqB,GAA5B,UAA6B,SAAsB,EAAE,SAAsB;QACvE,IAAM,iBAAiB,GAAG,EAAE,OAAO,EAAE,OAAK,CAAC,mCAAmC,EAAE,CAAC;QACjF,IAAM,kBAAkB,GAAG,EAAE,OAAO,EAAE,OAAK,CAAC,oCAAoC,EAAE,CAAC;QAEnF,MAAM,CAAC,CAAC,aAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,iBAAiB,CAAC;eACnE,CAAC,aAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,kBAAkB,CAAC;eACpE,CAAC,aAAK,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,OAAK,CAAC,mCAAmC,CAAC;eACxF,CAAC,aAAK,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,OAAK,CAAC,oCAAoC,CAAC,CAAC;IACrG,CAAC;IAEM,yCAAyB,GAAhC,UAAiC,SAAsB;QAAvD,iBAgEC;QA9DO,IAAA,6BAAQ,EACR,qCAAY,EACZ,iDAAkB,EAClB,6CAAgB,EAChB,mCAAW,EACX,mCAAW,EACX,2BAAO,EACP,iCAAU,EACV,2CAAe,EACf,yCAAc,CACJ;QAEd,IAAM,aAAa,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAA4C,CAAC;QAClG,IAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC;QAErC,mEAAmE;QACnE,gEAAgE;QAChE,oCAAoC;QACpC,IAAM,oBAAoB,GAAG,aAAa,CAAC,GAAG,CAAC,UAAC,KAAuC,EAAE,KAAa;YAClG,IAAM,WAAW,GAAG,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACzD,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,YAAY,CAAC,WAAW,IAAI,IAAI,GAAG,WAAW,GAAG,KAAK,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,sEAAsE;QACtE,iEAAiE;QACjE,mCAAmC;QACnC,IAAI,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC;QAC9C,eAAe,GAAG,aAAK,CAAC,aAAa,CAAC,eAAe,EAAE,OAAO,EAAE,kBAAkB,CAAC,CAAC;QACpF,eAAe,GAAG,aAAK,CAAC,kBAAkB,CAAC,eAAe,EAAE,oBAAoB,CAAC,CAAC;QAClF,eAAe,GAAG,aAAK,CAAC,kBAAkB,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;QAE1E,IAAI,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;QAC1C,aAAa,GAAG,aAAK,CAAC,aAAa,CAAC,aAAa,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC;QAC9E,aAAa,GAAG,aAAK,CAAC,kBAAkB,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;QAEpE,IAAI,kBAAkB,GAAG,eAAe,CAAC;QACzC,EAAE,CAAC,CAAC,eAAe,IAAI,IAAI,CAAC,CAAC,CAAC;YAC1B,4EAA4E;YAC5E,0CAA0C;YAC1C,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,UAAC,MAAM;gBAC1D,IAAM,iBAAiB,GAAG,iBAAO,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;gBAC/D,IAAM,sBAAsB,GAAG,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAC9E,MAAM,CAAC,sBAAsB,IAAI,iBAAO,CAAC,qBAAqB,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YAC7F,CAAC,CAAC,CAAC;QACP,CAAC;QAED,IAAM,cAAc,GAAG,gBAAgB,CAAC,qBAAqB,CACzD,WAAW,EACX,WAAW,EACX,IAAI,CAAC,KAAK,CAAC,WAAW,EACtB,kBAAkB,CACrB,CAAC;QAEF,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,eAAe,GAAG,OAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACrE,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,QAAQ,CAAC;YACV,YAAY,EAAE,eAAe;YAC7B,WAAW,EAAE,cAAc;YAC3B,UAAU,EAAE,aAAa;YACzB,eAAe,EAAE,kBAAkB;SACtC,CAAC,CAAC;IACP,CAAC;IAEM,sBAAM,GAAb;QACU,IAAA,eAA4C,EAA1C,wBAAS,EAAE,sCAAgB,CAAgB;QAC7C,IAAA,eAAiD,EAA/C,sCAAgB,EAAE,kCAAc,CAAgB;QACxD,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,IAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,eAAe;YAC9C,GAAC,OAAO,CAAC,gBAAgB,IAAG,IAAI,CAAC,KAAK,CAAC,YAAY;YACnD,GAAC,OAAO,CAAC,wBAAwB,IAAG,IAAI,CAAC,2BAA2B,EAAE;YACtE,GAAC,OAAO,CAAC,0BAA0B,IAAG,IAAI,CAAC,6BAA6B,EAAE;YAC1E,GAAC,OAAO,CAAC,uBAAuB,IAAG,IAAI,CAAC,sBAAsB,CAAC,2BAAiB,CAAC,KAAK,CAAC;iBACxF,SAAS,CAAC,CAAC;QAEd,MAAM,CAAC,CACH,6BACI,SAAS,EAAE,OAAO,EAClB,GAAG,EAAE,IAAI,CAAC,eAAe,EACzB,QAAQ,EAAE,IAAI,CAAC,gBAAgB;YAE/B,oBAAC,uCAAkB,IACf,OAAO,EAAE,IAAI,CAAC,UAAU,EACxB,eAAe,EAAE,IAAI,CAAC,WAAW,CAAC,YAAY,EAC9C,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,uBAAuB,EAAE,IAAI,CAAC,uBAAuB,EACrD,uBAAuB,EAAE,IAAI,CAAC,uBAAuB,EACrD,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,EAC/C,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,EAC/C,0BAA0B,EAAE,IAAI,CAAC,6BAA6B,EAAE,EAChE,gBAAgB,EAAE,gBAAgB,EAClC,wBAAwB,EAAE,IAAI,CAAC,2BAA2B,EAAE,EAC5D,gBAAgB,EAAE,IAAI,CAAC,0BAA0B,EAAE,EACnD,aAAa,EAAE,IAAI,CAAC,uBAAuB,EAAE,EAC7C,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAC/B,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,YAAY,EAC1C,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,EACnC,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,EAC3C,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,eAAe,EAAE,IAAI,CAAC,eAAe,EACrC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,EACxC,kBAAkB,EAAE,IAAI,CAAC,WAAW,CAAC,eAAe,GACtD;YACF,6BAAK,SAAS,EAAE,UAAU,CAAC,OAAO,CAAC,mBAAmB,EAAE,oCAAoC,CAAC,GAAI;YACjG,oBAAC,mBAAU,IACP,SAAS,EAAE,OAAO,CAAC,mBAAmB,EACtC,cAAc,EAAE,cAAc,EAC9B,gBAAgB,EAAE,gBAAgB,GACpC,CACA,CACT,CAAC;;IACN,CAAC;IAEM,6BAAa,GAApB;QACI,IAAM,OAAO,GACT,CAAC,IAAI,CAAC,qBAAqB,EAAE,EAAE,IAAI,CAAC,0BAA0B,EAAE,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC;QACtG,MAAM,CAAC,CACH,oBAAC,cAAO,QACH,OAAO,CAAC,MAAM,CAAC,UAAC,OAAO,IAAK,OAAA,OAAO,KAAK,SAAS,EAArB,CAAqB,CAAC,CAC7C,CACb,CAAC;IACN,CAAC;IAED;;;;OAIG;IACI,iCAAiB,GAAxB;QAAA,iBAYC;QAXG,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,IAAI,CAAC,OAAO,GAAG,IAAI,iBAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAClF,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,kBAAkB,GAAG,2BAAY,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACjE,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;gBAC7B,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC;YAC5D,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,oCAAoB,GAA3B;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAC,kBAAkB,CAAC;QACnC,CAAC;IACL,CAAC;IAEM,kCAAkB,GAAzB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC;QAED,IAAI,CAAC,wBAAwB,EAAE,CAAC;IACpC,CAAC;IAES,6BAAa,GAAvB,UAAwB,KAAkD;QAC9D,IAAA,yBAAQ,EAAE,yCAAgB,EAAE,mCAAa,EAAE,uBAAO,CAAW;QACrE,IAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAElD,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,UAAC,KAA8B;YAC5D,wDAAwD;YACxD,IAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC;YAE7B,EAAE,CAAC,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAChC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC;YAC3D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAM,QAAQ,GAAG,SAAS,CAAC,SAAS,KAAK,eAAM,CAAC,SAAS,IAAI,eAAM,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;gBACvG,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACZ,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC;gBAC3D,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,gBAAgB,IAAI,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,gBAAgB,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YACtF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,sCAAsC,CAAC,CAAC;QAChE,CAAC;QACD,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/F,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;QAC7D,CAAC;IACL,CAAC;IAED,gBAAgB;IAChB,gBAAgB;IAER,6BAAa,GAArB,UACI,WAA0B,EAC1B,aAA4B,EAC5B,UAAmB,EACnB,cAAuC,EACvC,eAAwB;QAGhB,IAAA,gBAAI,CAAU;QACd,IAAA,4CAAe,CAAgB;QAEvC,IAAM,iBAAiB,GAAG,WAAW,KAAK,KAAK,GAAG,MAAM,GAAG,MAAM,CAAC;QAClE,IAAM,mBAAmB,GAAG,aAAa,KAAK,KAAK,GAAG,MAAM,GAAG,MAAM,CAAC;QAEtE,IAAM,iBAAiB,GAAG,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/C,IAAM,mBAAmB,GAAG,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;QAE/C,8DAA8D;QAC9D,cAAc,CAAC,WAAW,CAAC,IAAI,iBAAiB,CAAC;QAEjD,IAAM,yBAAyB,GAAG,UAAU;cACtC,cAAc,CAAC,WAAW,CAAC,GAAG,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;cACnE,cAAc,CAAC,WAAW,CAAC,GAAG,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;QAE1E,EAAE,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC;YAC5B,sDAAsD;YACtD,mFAAmF;YACnF,cAAc,CAAC,WAAW,CAAC,GAAG,eAAe,CAAC,iBAAiB,CAAC,CAAC,mBAAmB,CAAC,CAAC;YACtF,cAAc,CAAC,aAAa,CAAC,IAAI,iBAAiB,CAAC;YAEnD,IAAM,2BAA2B,GAAG,UAAU;kBACxC,cAAc,CAAC,aAAa,CAAC,GAAG,eAAe,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;kBACvE,cAAc,CAAC,aAAa,CAAC,GAAG,eAAe,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;YAE9E,EAAE,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC;gBAC9B,sDAAsD;gBACtD,4DAA4D;gBAC5D,gGAAgG;gBAChG,IAAI,0BAA0B,GAAG,cAAc,CAAC,mBAAmB,GAAG,iBAAiB,CAAC;gBAExF,yFAAyF;gBACzF,EAAE,CAAC,CAAC,UAAU;sBACR,0BAA0B,GAAG,CAAC;sBAC9B,0BAA0B,IAAI,eAAe,CAAC,MACpD,CAAC,CAAC,CAAC;oBACC,0BAA0B,GAAG,UAAU;0BACjC,eAAe,CAAC,MAAM,GAAG,CAAC;0BAC1B,CAAC,CAAC;gBACZ,CAAC;gBAED,IAAM,kBAAkB,GAAG,iBAAO,CAAC,uBAAuB,CACtD,eAAe,CAAC,0BAA0B,CAAC,EAC3C,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,CACf,CAAC;gBAEF,cAAc,GAAG;oBACb,GAAG,EAAE,kBAAkB,CAAC,IAAI,CAAC,mBAAmB,CAAC;oBACjD,mBAAmB,EAAE,0BAA0B;oBAC/C,GAAG,EAAE,kBAAkB,CAAC,IAAI,CAAC,mBAAmB,CAAC;iBACpD,CAAC;YACN,CAAC;QACL,CAAC;QACD,MAAM,CAAC,cAAc,CAAC;IAC1B,CAAC;IAuBO,2CAA2B,GAAnC;QACY,IAAA,0DAAsB,CAAgB;QACtC,IAAA,sCAAY,CAAgB;QAEpC,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;QAEvF,IAAM,8BAA8B,GAAG,YAAY,IAAI,IAAI,IAAI,YAAY,CAAC,GAAG,KAAK,CAAC,CAAC;QACtF,IAAM,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,4BAAkB,CAAC,WAAW,CAAC,CAAC;QAC9G,IAAM,mBAAmB,GAAG,sBAAsB,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAExG,MAAM,CAAC,mBAAmB,IAAI,CAAC,8BAA8B,IAAI,oBAAoB,CAAC,CAAC;IAC3F,CAAC;IAEO,6CAA6B,GAArC;QACY,IAAA,0DAAsB,CAAgB;QACtC,IAAA,sCAAY,CAAgB;QAEpC,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;QAE7F,IAAM,gCAAgC,GAAG,YAAY,IAAI,IAAI,IAAI,YAAY,CAAC,IAAI,KAAK,CAAC,CAAC;QACzF,IAAM,sBAAsB,GACxB,sBAAsB,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,aAAa,CAAC,cAAc,CAAC,CAAC;QACtF,IAAM,uBAAuB,GACzB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,4BAAkB,CAAC,cAAc,CAAC,CAAC;QAExF,MAAM,CAAC,sBAAsB,IAAI,CAAC,gCAAgC,IAAI,uBAAuB,CAAC,CAAC;IACnG,CAAC;IAuBO,wCAAwB,GAAhC;QACY,IAAA,sCAAY,CAAgB;QAEpC,IAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;QAC3E,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;QAEzE,IAAM,aAAa,GAAG,CAAC,WAAW,GAAG,YAAY,CAAC,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC;cAEtE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC;cAC9C,YAAY,CAAC,GAAG,CAAC;QAEvB,IAAM,cAAc,GAAG,CAAC,UAAU,GAAG,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC,KAAK,CAAC;cAEtE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC;cAC5C,YAAY,CAAC,IAAI,CAAC;QAExB,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;IAC7D,CAAC;IAuBO,8BAAc,GAAtB,UAAuB,WAAmB;QACtC,IAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAqC,CAAC;QACnF,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;IACxB,CAAC;IA8OO,+BAAe,GAAvB;QACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,IAAI,IAAI,CAAC;IACpF,CAAC;IAEO,sCAAsB,GAA9B,UAA+B,aAAgC;QAC3D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACjE,CAAC;IAEO,0CAA0B,GAAlC,UAAmC,aAAgC;QAC/D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC9C,8DAA8D;YAC9D,6DAA6D;YAC7D,8DAA8D;YAC9D,iEAAiE;YACjE,8CAA8C;YAC9C,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QAChC,CAAC;IACL,CAAC;IAEO,8BAAc,GAAtB;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAEO,4BAAY,GAApB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACd,IAAA,eAAqD,EAAnD,sCAAgB,EAAE,0CAAkB,CAAgB;YACtD,IAAA,eAAyC,EAAvC,0BAAU,EAAE,8BAAY,CAAgB;YAChD,IAAI,CAAC,IAAI,GAAG,IAAI,WAAI,CAChB,UAAU,EACV,YAAY,EACZ,WAAI,CAAC,aAAa,EAClB,gBAAgB,EAChB,kBAAkB,CACrB,CAAC;YACF,IAAI,CAAC,kCAAkC,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QACrE,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACK,kCAAkB,GAA1B,UAA2B,cAA6B,EAAE,YAA2B;QACjF,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;YACrD,oFAAoF;YACpF,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAED,IAAM,YAAY,GAAG,iBAAO,CAAC,sBAAsB,CAC/C,IAAI,CAAC,KAAK,CAAC,eAAe,EAC1B,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAC7B,IAAI,CAAC,KAAK,CAAC,WAAW,CACzB,CAAC;QAEF,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAC,WAAW,EAAE,KAAK;YACvC,IAAM,YAAY,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,EAApC,CAAoC,CAAC,CAAC;YAC/F,MAAM,CAAC,CACH,oBAAC,qBAAW,IACR,SAAS,EAAE,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,EAC5C,GAAG,EAAE,KAAK,EACV,OAAO,EAAE,WAAW,CAAC,OAAO,EAC5B,YAAY,EAAE,YAAY,GAC5B,CACL,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,qCAAqB,GAA7B;QACY,IAAA,sDAAoB,CAAgB;QAC5C,EAAE,CAAC,CAAC,oBAAoB,IAAI,IAAI,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,CACH,oBAAC,aAAM,IACH,GAAG,EAAC,aAAa,EACjB,KAAK,EAAC,2BAA2B,EACjC,KAAK,EAAC,OAAO,EACb,KAAK,EAAC,OAAO,EACb,SAAS,EAAE,IAAI,CAAC,UAAU,GAC5B,CACL,CAAC;QACN,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;IACL,CAAC;IAqBO,uCAAuB,GAA/B;QACY,IAAA,oCAAW,CAAgB;QACnC,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC;gBACH,oBAAC,aAAM,IACH,GAAG,EAAC,WAAW,EACf,KAAK,EAAC,sBAAsB,EAC5B,KAAK,EAAC,OAAO,EACb,KAAK,EAAC,MAAM,EACZ,SAAS,EAAE,IAAI,CAAC,mBAAmB,GACrC;gBACF,oBAAC,aAAM,IACH,GAAG,EAAC,YAAY,EAChB,KAAK,EAAC,uBAAuB,EAC7B,KAAK,EAAC,OAAO,EACb,KAAK,EAAC,OAAO,EACb,SAAS,EAAE,IAAI,CAAC,oBAAoB,GACtC;gBACF,oBAAC,aAAM,IACH,GAAG,EAAC,SAAS,EACb,KAAK,EAAC,oBAAoB,EAC1B,KAAK,EAAC,OAAO,EACb,KAAK,EAAC,IAAI,EACV,SAAS,EAAE,IAAI,CAAC,iBAAiB,GACnC;gBACF,oBAAC,aAAM,IACH,GAAG,EAAC,WAAW,EACf,KAAK,EAAC,sBAAsB,EAC5B,KAAK,EAAC,OAAO,EACb,KAAK,EAAC,MAAM,EACZ,SAAS,EAAE,IAAI,CAAC,mBAAmB,GACrC;gBACF,oBAAC,aAAM,IACH,GAAG,EAAC,UAAU,EACd,KAAK,EAAC,qBAAqB,EAC3B,KAAK,EAAC,OAAO,EACb,KAAK,EAAC,KAAK,EACX,SAAS,EAAE,IAAI,CAAC,4BAA4B,GAC9C;gBACF,oBAAC,aAAM,IACH,GAAG,EAAC,gBAAgB,EACpB,KAAK,EAAC,2BAA2B,EACjC,KAAK,EAAC,OAAO,EACb,KAAK,EAAC,WAAW,EACjB,SAAS,EAAE,IAAI,CAAC,2BAA2B,GAC7C;gBACF,oBAAC,aAAM,IACH,GAAG,EAAC,YAAY,EAChB,KAAK,EAAC,uBAAuB,EAC7B,KAAK,EAAC,OAAO,EACb,KAAK,EAAC,OAAO,EACb,SAAS,EAAE,IAAI,CAAC,2BAA2B,GAC7C;gBACF,oBAAC,aAAM,IACH,GAAG,EAAC,kBAAkB,EACtB,KAAK,EAAC,6BAA6B,EACnC,KAAK,EAAC,OAAO,EACb,KAAK,EAAC,aAAa,EACnB,SAAS,EAAE,IAAI,CAAC,yBAAyB,GAC3C;aACL,CAAC;QACN,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;IACL,CAAC;IAEO,0CAA0B,GAAlC;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,2BAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,CACH,oBAAC,aAAM,IACH,GAAG,EAAC,mBAAmB,EACvB,KAAK,EAAC,YAAY,EAClB,KAAK,EAAC,OAAO,EACb,KAAK,EAAC,OAAO,EACb,SAAS,EAAE,IAAI,CAAC,qBAAqB,GACvC,CACL,CAAC;QACN,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;IACL,CAAC;IA4XO,oCAAoB,GAA5B,UAA6B,cAAsB,EAAE,aAAqB;QAC9D,IAAA,sCAAY,CAAgB;QAEpC,IAAM,kBAAkB,GAAG,aAAa,KAAK,YAAY,CAAC,GAAG,CAAC;QAC9D,IAAM,mBAAmB,GAAG,cAAc,KAAK,YAAY,CAAC,IAAI,CAAC;QAEjE,EAAE,CAAC,CAAC,kBAAkB,IAAI,mBAAmB,CAAC,CAAC,CAAC;YAC5C,qFAAqF;YACrF,uFAAuF;YACvF,oEAAoE;YACpE,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACrB,IAAM,aAAa,GAAG,IAAI,CAAC,2BAA2B,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC;gBACrG,IAAI,CAAC,sBAAsB,CAAC,SAAS,GAAG,aAAa,GAAG,aAAa,CAAC;YAC1E,CAAC;YACD,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBACtB,IAAM,cAAc,GAAG,IAAI,CAAC,6BAA6B,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC;gBACpG,IAAI,CAAC,sBAAsB,CAAC,UAAU,GAAG,cAAc,GAAG,cAAc,CAAC;YAC7E,CAAC;YAED,IAAM,gBAAgB,GAAG,IAAI,WAAI,CAC7B,cAAc,EACd,aAAa,EACb,YAAY,CAAC,KAAK,EAClB,YAAY,CAAC,MAAM,CACtB,CAAC;YACF,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;QAC9C,CAAC;IACL,CAAC;IAyDO,6BAAa,GAArB;QACI,IAAM,cAAc,GAChB,IAAI,CAAC,gBAAgB,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC;QAC5F,IAAM,kBAAkB,GACpB,IAAI,CAAC,mBAAmB,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,qBAAqB,EAAE,CAAC,MAAM,CAAC;QAEnG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;aAC1B,gBAAgB,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC;aAChD,mBAAmB,CAAC,IAAI,CAAC,0BAA0B,EAAE,CAAC;aACtD,iBAAiB,CAAC,cAAc,CAAC;aACjC,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;IACnD,CAAC;IAgBO,kDAAkC,GAA1C,UAA2C,YAAkB;QACzD,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;QACrE,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAC/D,YAAc,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;IAC1F,CAAC;IAYO,0CAA0B,GAAlC,UAAmC,KAA+B;QAA/B,sBAAA,EAAA,QAAqB,IAAI,CAAC,KAAK;QACtD,IAAA,yCAAgB,CAAW;QACnC,IAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACxD,MAAM,CAAC,aAAK,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IACxD,CAAC;IAEO,uCAAuB,GAA/B,UAAgC,KAA+B;QAA/B,sBAAA,EAAA,QAAqB,IAAI,CAAC,KAAK;QACnD,IAAA,mCAAa,EAAE,uBAAO,CAAW;QACzC,MAAM,CAAC,aAAK,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAYL,YAAC;AAAD,CA/9CA,AA+9CC,CA/9C0B,wBAAiB,GA+9C3C;AA99CiB,kBAAY,GAAgB;IACtC,sBAAsB,EAAE,IAAI;IAC5B,kBAAkB,EAAE,GAAG;IACvB,gBAAgB,EAAE,EAAE;IACpB,WAAW,EAAE,KAAK;IAClB,sBAAsB,EAAE,KAAK;IAC7B,gBAAgB,EAAE,IAAI;IACtB,cAAc,EAAE,EAAE;IAClB,cAAc,EAAE,EAAE;IAClB,YAAY,EAAE,EAAE;IAChB,OAAO,EAAE,CAAC;IACV,UAAU,EAAE,uBAAU,CAAC,KAAK;IAC5B,eAAe,EAAE,kCAAsB;IACvC,cAAc,EAAE,wBAAc,CAAC,GAAG;CACrC,CAAC;AAEa,yCAAmC,GAAG;IACjD,iBAAiB;CACQ,CAAC;AAEf,0CAAoC,GAAG;IAClD,iBAAiB;IACjB,cAAc;CACW,CAAC;AAxBrB,KAAK;IADjB,oBAAa;GACD,KAAK,CA+9CjB;AA/9CY,sBAAK","file":"table.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { AbstractComponent, IProps, Utils as BlueprintUtils } from \"@blueprintjs/core\";\nimport { Hotkey, Hotkeys, HotkeysTarget } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { ICellProps } from \"./cell/cell\";\nimport { Column, IColumnProps } from \"./column\";\nimport { IFocusedCellCoordinates } from \"./common/cell\";\nimport * as Classes from \"./common/classes\";\nimport { Clipboard } from \"./common/clipboard\";\nimport * as Errors from \"./common/errors\";\nimport { Grid, IColumnIndices, IRowIndices } from \"./common/grid\";\nimport * as FocusedCellUtils from \"./common/internal/focusedCellUtils\";\nimport * as ScrollUtils from \"./common/internal/scrollUtils\";\nimport { Rect } from \"./common/rect\";\nimport { RenderMode } from \"./common/renderMode\";\nimport { Utils } from \"./common/utils\";\nimport { ColumnHeader, IColumnWidths } from \"./headers/columnHeader\";\nimport { ColumnHeaderCell, IColumnHeaderCellProps } from \"./headers/columnHeaderCell\";\nimport { IRowHeaderRenderer, IRowHeights, renderDefaultRowHeader, RowHeader } from \"./headers/rowHeader\";\nimport { IContextMenuRenderer } from \"./interactions/menus\";\nimport { IIndexedResizeCallback } from \"./interactions/resizable\";\nimport { ResizeSensor } from \"./interactions/resizeSensor\";\nimport { ISelectedRegionTransform } from \"./interactions/selectable\";\nimport { GuideLayer } from \"./layers/guides\";\nimport { IRegionStyler, RegionLayer } from \"./layers/regions\";\nimport { Locator } from \"./locator\";\nimport { QuadrantType } from \"./quadrants/tableQuadrant\";\nimport { TableQuadrantStack } from \"./quadrants/tableQuadrantStack\";\nimport {\n    ColumnLoadingOption,\n    IRegion,\n    IStyledRegionGroup,\n    RegionCardinality,\n    Regions,\n    SelectionModes,\n    TableLoadingOption,\n} from \"./regions\";\nimport { TableBody } from \"./tableBody\";\n\nexport interface ITableProps extends IProps, IRowHeights, IColumnWidths {\n    /**\n     * If `false`, only a single region of a single column/row/cell may be\n     * selected at one time. Using `ctrl` or `meta` key will have no effect,\n     * and a mouse drag will select the current column/row/cell only.\n     * @default true\n     */\n    allowMultipleSelection?: boolean;\n\n    /**\n     * The children of a `Table` component, which must be React elements\n     * that use `IColumnProps`.\n     */\n    children?: React.ReactElement<IColumnProps> | Array<React.ReactElement<IColumnProps>>;\n\n    /**\n     * A sparse number array with a length equal to the number of columns. Any\n     * non-null value will be used to set the width of the column at the same\n     * index. Note that if you want to update these values when the user\n     * drag-resizes a column, you may define a callback for `onColumnWidthChanged`.\n     */\n    columnWidths?: Array<number | null | undefined>;\n\n    /**\n     * If `true`, there will be a single \"focused\" cell at all times,\n     * which can be used to interact with the table as though it is a\n     * spreadsheet. When false, no such cell will exist.\n     * @default false\n     */\n    enableFocus?: boolean;\n\n    /**\n     * If `true`, empty space in the table container will be filled with empty\n     * cells instead of a blank background.\n     * @default false\n     */\n    fillBodyWithGhostCells?: boolean;\n\n    /**\n     * If defined, will set the focused cell state. This changes\n     * the focused cell to controlled mode, meaning you are in charge of\n     * setting the focus in response to events in the `onFocus` callback.\n     */\n    focusedCell?: IFocusedCellCoordinates;\n\n    /**\n     * If defined, this callback will be invoked for each cell when the user\n     * attempts to copy a selection via `mod+c`. The returned data will be copied\n     * to the clipboard and need not match the display value of the `<Cell>`.\n     * The data will be invisibly added as `textContent` into the DOM before\n     * copying. If not defined, keyboard copying via `mod+c` will be disabled.\n     */\n    getCellClipboardData?: (row: number, col: number) => any;\n\n    /**\n     * If `false`, disables reordering of columns.\n     * @default false\n     */\n    isColumnReorderable?: boolean;\n\n    /**\n     * If `false`, disables resizing of columns.\n     * @default true\n     */\n    isColumnResizable?: boolean;\n\n    /**\n     * If `false`, hides the row headers and settings menu.\n     * @default true\n     */\n    isRowHeaderShown?: boolean;\n\n    /**\n     * If `false`, disables reordering of rows.\n     * @default false\n     */\n    isRowReorderable?: boolean;\n\n    /**\n     * If `false`, disables resizing of rows.\n     * @default false\n     */\n    isRowResizable?: boolean;\n\n    /**\n     * A list of `TableLoadingOption`. Set this prop to specify whether to\n     * render the loading state for the column header, row header, and body\n     * sections of the table.\n     */\n    loadingOptions?: TableLoadingOption[];\n\n    /**\n     * The number of columns to freeze to the left side of the table, counting from the leftmost column.\n     */\n    numFrozenColumns?: number;\n\n    /**\n     * The number of rows to freeze to the top of the table, counting from the topmost row.\n     */\n    numFrozenRows?: number;\n\n    /**\n     * The number of rows in the table.\n     */\n    numRows?: number;\n\n    /**\n     * If reordering is enabled, this callback will be invoked when the user finishes\n     * drag-reordering one or more columns.\n     */\n    onColumnsReordered?: (oldIndex: number, newIndex: number, length: number) => void;\n\n    /**\n     * If resizing is enabled, this callback will be invoked when the user\n     * finishes drag-resizing a column.\n     */\n    onColumnWidthChanged?: IIndexedResizeCallback;\n\n    /**\n     * An optional callback invoked when all cells in view have completely rendered.\n     * Will be invoked on initial mount and whenever cells update (e.g., on scroll).\n     */\n    onCompleteRender?: () => void;\n\n    /**\n     * If you want to do something after the copy or if you want to notify the\n     * user if a copy fails, you may provide this optional callback.\n     *\n     * Due to browser limitations, the copy can fail. This usually occurs if\n     * the selection is too large, like 20,000+ cells. The copy will also fail\n     * if the browser does not support the copy method (see\n     * `Clipboard.isCopySupported`).\n     */\n    onCopy?: (success: boolean) => void;\n\n    /**\n     * A callback called when the focus is changed in the table.\n     */\n    onFocus?: (focusedCell: IFocusedCellCoordinates) => void;\n\n    /**\n     * If resizing is enabled, this callback will be invoked when the user\n     * finishes drag-resizing a row.\n     */\n    onRowHeightChanged?: IIndexedResizeCallback;\n\n    /**\n     * If reordering is enabled, this callback will be invoked when the user finishes\n     * drag-reordering one or more rows.\n     */\n    onRowsReordered?: (oldIndex: number, newIndex: number, length: number) => void;\n\n    /**\n     * A callback called when the selection is changed in the table.\n     */\n    onSelection?: (selectedRegions: IRegion[]) => void;\n\n    /**\n     * A callback called when the visible cell indices change in the table.\n     */\n    onVisibleCellsChange?: (rowIndices: IRowIndices, columnIndices: IColumnIndices) => void;\n\n    /**\n     * An optional callback for displaying a context menu when right-clicking\n     * on the table body. The callback is supplied with an array of\n     * `IRegion`s. If the mouse click was on a selection, the array will\n     * contain all selected regions. Otherwise it will have one `IRegion` that\n     * represents the clicked cell.\n     */\n    renderBodyContextMenu?: IContextMenuRenderer;\n\n    /**\n     * Dictates how cells should be rendered. Supported modes are:\n     * - `RenderMode.BATCH`: renders cells in batches to improve performance\n     * - `RenderMode.NONE`: renders cells synchronously all at once\n     * @default RenderMode.BATCH\n     */\n    renderMode?: RenderMode;\n\n    /**\n     * Render each row's header cell.\n     */\n    renderRowHeader?: IRowHeaderRenderer;\n\n    /**\n     * A sparse number array with a length equal to the number of rows. Any\n     * non-null value will be used to set the height of the row at the same\n     * index. Note that if you want to update these values when the user\n     * drag-resizes a row, you may define a callback for `onRowHeightChanged`.\n     */\n    rowHeights?: Array<number | null | undefined>;\n\n    /**\n     * If defined, will set the selected regions in the cells. If defined, this\n     * changes table selection to controlled mode, meaning you in charge of\n     * setting the selections in response to events in the `onSelection`\n     * callback.\n     *\n     * Note that the `selectionModes` prop controls which types of events are\n     * triggered to the `onSelection` callback, but does not restrict what\n     * selection you can pass to the `selectedRegions` prop. Therefore you can,\n     * for example, convert cell clicks into row selections.\n     */\n    selectedRegions?: IRegion[];\n\n    /**\n     * An optional transform function that will be applied to the located\n     * `Region`.\n     *\n     * This allows you to, for example, convert cell `Region`s into row\n     * `Region`s while maintaining the existing multi-select and meta-click\n     * functionality.\n     */\n    selectedRegionTransform?: ISelectedRegionTransform;\n\n    /**\n     * A `SelectionModes` enum value indicating the selection mode. You may\n     * equivalently provide an array of `RegionCardinality` enum values for\n     * precise configuration.\n     *\n     * The `SelectionModes` enum values are:\n     * - `ALL`\n     * - `NONE`\n     * - `COLUMNS_AND_CELLS`\n     * - `COLUMNS_ONLY`\n     * - `ROWS_AND_CELLS`\n     * - `ROWS_ONLY`\n     *\n     * The `RegionCardinality` enum values are:\n     * - `FULL_COLUMNS`\n     * - `FULL_ROWS`\n     * - `FULL_TABLE`\n     * - `CELLS`\n     *\n     * @default SelectionModes.ALL\n     */\n    selectionModes?: RegionCardinality[];\n\n    /**\n     * Styled region groups are rendered as overlays above the table and are\n     * marked with their own `className` for custom styling.\n     */\n    styledRegionGroups?: IStyledRegionGroup[];\n}\n\nexport interface ITableState {\n    /**\n     * An array of column widths. These are initialized from the column props\n     * and updated when the user drags column header resize handles.\n     */\n    columnWidths?: number[];\n\n    /**\n     * The coordinates of the currently focused table cell\n     */\n    focusedCell?: IFocusedCellCoordinates;\n\n    /**\n     * An array of pixel offsets for resize guides, which are drawn over the\n     * table body when a row is being resized.\n     */\n    horizontalGuides?: number[];\n\n    /**\n     * If `true`, will disable updates that will cause re-renders of children\n     * components. This is used, for example, to disable layout updates while\n     * the user is dragging a resize handle.\n     */\n    isLayoutLocked?: boolean;\n\n    /**\n     * Whether the user is currently dragging to reorder one or more elements.\n     * Can be referenced to toggle the reordering-cursor overlay, which\n     * displays a `grabbing` CSS cursor wherever the mouse moves in the table\n     * for the duration of the dragging interaction.\n     */\n    isReordering?: boolean;\n\n    /**\n     * An array of row heights. These are initialized updated when the user\n     * drags row header resize handles.\n     */\n    rowHeights?: number[];\n\n    /**\n     * An array of Regions representing the selections of the table.\n     */\n    selectedRegions?: IRegion[];\n\n    /**\n     * An array of pixel offsets for resize guides, which are drawn over the\n     * table body when a column is being resized.\n     */\n    verticalGuides?: number[];\n\n    /**\n     * The `Rect` bounds of the viewport used to perform virtual viewport\n     * performance enhancements.\n     */\n    viewportRect?: Rect;\n\n}\n\n@HotkeysTarget\nexport class Table extends AbstractComponent<ITableProps, ITableState> {\n    public static defaultProps: ITableProps = {\n        allowMultipleSelection: true,\n        defaultColumnWidth: 150,\n        defaultRowHeight: 20,\n        enableFocus: false,\n        fillBodyWithGhostCells: false,\n        isRowHeaderShown: true,\n        loadingOptions: [],\n        minColumnWidth: 50,\n        minRowHeight: 20,\n        numRows: 0,\n        renderMode: RenderMode.BATCH,\n        renderRowHeader: renderDefaultRowHeader,\n        selectionModes: SelectionModes.ALL,\n    };\n\n    private static SHALLOW_COMPARE_PROP_KEYS_BLACKLIST = [\n        \"selectedRegions\", // (intentionally omitted; can be deeply compared to save on re-renders in controlled mode)\n    ] as Array<keyof ITableProps>;\n\n    private static SHALLOW_COMPARE_STATE_KEYS_BLACKLIST = [\n        \"selectedRegions\", // (intentionally omitted; can be deeply compared to save on re-renders in uncontrolled mode)\n        \"viewportRect\",\n    ] as Array<keyof ITableState>;\n\n    private static createColumnIdIndex(children: Array<React.ReactElement<any>>) {\n        const columnIdToIndex: {[key: string]: number} = {};\n        for (let i = 0; i < children.length; i++) {\n            const key = children[i].props.id;\n            if (key != null) {\n                columnIdToIndex[String(key)] = i;\n            }\n        }\n        return columnIdToIndex;\n    }\n\n    public grid: Grid;\n    public locator: Locator;\n\n    private bodyElement: HTMLElement;\n    private childrenArray: Array<React.ReactElement<IColumnProps>>;\n    private columnIdToIndex: {[key: string]: number};\n\n    private resizeSensorDetach: () => void;\n    private rootTableElement: HTMLElement;\n\n    private refHandlers = {\n        columnHeader: (ref: HTMLElement) => this.columnHeaderElement = ref,\n        mainQuadrant: (ref: HTMLElement) => this.mainQuadrantElement = ref,\n        quadrantStack: (ref: TableQuadrantStack) => this.quadrantStackInstance = ref,\n        rowHeader: (ref: HTMLElement) => this.rowHeaderElement = ref,\n        scrollContainer: (ref: HTMLElement) => this.scrollContainerElement = ref,\n    };\n\n    private quadrantStackInstance: TableQuadrantStack;\n    private columnHeaderElement: HTMLElement;\n    private mainQuadrantElement: HTMLElement;\n    private rowHeaderElement: HTMLElement;\n    private scrollContainerElement: HTMLElement;\n\n    public constructor(props: ITableProps, context?: any) {\n        super(props, context);\n\n        const {\n            children,\n            columnWidths,\n            defaultRowHeight,\n            defaultColumnWidth,\n            numRows,\n            rowHeights,\n        } = this.props;\n\n        this.childrenArray = React.Children.toArray(children) as Array<React.ReactElement<IColumnProps>>;\n        this.columnIdToIndex = Table.createColumnIdIndex(this.childrenArray);\n\n        // Create height/width arrays using the lengths from props and\n        // children, the default values from props, and finally any sparse\n        // arrays passed into props.\n        let newColumnWidths = this.childrenArray.map(() => defaultColumnWidth);\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, columnWidths);\n        let newRowHeights = Utils.times(numRows, () => defaultRowHeight);\n        newRowHeights = Utils.assignSparseValues(newRowHeights, rowHeights);\n\n        const selectedRegions = (props.selectedRegions == null) ? [] as IRegion[] : props.selectedRegions;\n        const focusedCell = FocusedCellUtils.getInitialFocusedCell(\n            props.enableFocus,\n            props.focusedCell,\n            undefined,\n            selectedRegions,\n        );\n\n        this.state = {\n            columnWidths: newColumnWidths,\n            focusedCell,\n            isLayoutLocked: false,\n            isReordering: false,\n            rowHeights: newRowHeights,\n            selectedRegions,\n        };\n    }\n\n    // Instance methods\n    // ================\n\n    /**\n     * Resize all rows in the table to the height of the tallest visible cell in the specified columns.\n     * If no indices are provided, default to using the tallest visible cell from all columns in view.\n     */\n    public resizeRowsByTallestCell(columnIndices?: number | number[]) {\n        let tallest = 0;\n        if (columnIndices == null) {\n            // Consider all columns currently in viewport\n            const viewportColumnIndices = this.grid.getColumnIndicesInRect(this.state.viewportRect);\n            for (let col = viewportColumnIndices.columnIndexStart; col <= viewportColumnIndices.columnIndexEnd; col++) {\n                tallest = Math.max(tallest, this.locator.getTallestVisibleCellInColumn(col));\n            }\n        } else {\n            const columnIndicesArray = Array.isArray(columnIndices) ? columnIndices : [columnIndices];\n            const tallestByColumns = columnIndicesArray.map((col) => this.locator.getTallestVisibleCellInColumn(col));\n            tallest = Math.max(...tallestByColumns);\n        }\n        const rowHeights = Array(this.state.rowHeights.length).fill(tallest);\n        this.invalidateGrid();\n        this.setState({ rowHeights });\n    }\n\n    /**\n     * Scrolls the table to the target region in a fashion appropriate to the target region's\n     * cardinality:\n     *\n     * - CELLS: Scroll the top-left cell in the target region to the top-left corner of the viewport.\n     * - FULL_ROWS: Scroll the top-most row in the target region to the top of the viewport.\n     * - FULL_COLUMNS: Scroll the left-most column in the target region to the left side of the viewport.\n     * - FULL_TABLE: Scroll the top-left cell in the table to the top-left corner of the viewport.\n     *\n     * If there are active frozen rows and/or columns, the target region will be positioned in the\n     * top-left corner of the non-frozen area (unless the target region itself is in the frozen\n     * area).\n     *\n     * If the target region is close to the bottom-right corner of the table, this function will\n     * simply scroll the target region as close to the top-left as possible until the bottom-right\n     * corner is reached.\n     */\n    public scrollToRegion(region: IRegion) {\n        const { left: currScrollLeft, top: currScrollTop } = this.state.viewportRect;\n\n        const numFrozenRows = this.getNumFrozenRowsClamped();\n        const numFrozenColumns = this.getNumFrozenColumnsClamped();\n\n        const { scrollLeft, scrollTop } = ScrollUtils.getScrollPositionForRegion(\n            region,\n            currScrollLeft,\n            currScrollTop,\n            this.grid.getCumulativeWidthBefore,\n            this.grid.getCumulativeHeightBefore,\n            numFrozenRows,\n            numFrozenColumns,\n        );\n\n        const correctedScrollLeft = this.shouldDisableHorizontalScroll() ? 0 : scrollLeft;\n        const correctedScrollTop = this.shouldDisableVerticalScroll() ? 0 : scrollTop;\n\n        // defer to the quadrant stack to keep all quadrant positions in sync\n        this.quadrantStackInstance.scrollToPosition(correctedScrollLeft, correctedScrollTop);\n    }\n\n    // React lifecycle\n    // ===============\n\n    public shouldComponentUpdate(nextProps: ITableProps, nextState: ITableState) {\n        const propKeysBlacklist = { exclude: Table.SHALLOW_COMPARE_PROP_KEYS_BLACKLIST };\n        const stateKeysBlacklist = { exclude: Table.SHALLOW_COMPARE_STATE_KEYS_BLACKLIST };\n\n        return !Utils.shallowCompareKeys(this.props, nextProps, propKeysBlacklist)\n            || !Utils.shallowCompareKeys(this.state, nextState, stateKeysBlacklist)\n            || !Utils.deepCompareKeys(this.props, nextProps, Table.SHALLOW_COMPARE_PROP_KEYS_BLACKLIST)\n            || !Utils.deepCompareKeys(this.state, nextState, Table.SHALLOW_COMPARE_STATE_KEYS_BLACKLIST);\n    }\n\n    public componentWillReceiveProps(nextProps: ITableProps) {\n        const {\n            children,\n            columnWidths,\n            defaultColumnWidth,\n            defaultRowHeight,\n            enableFocus,\n            focusedCell,\n            numRows,\n            rowHeights,\n            selectedRegions,\n            selectionModes,\n        } = nextProps;\n\n        const newChildArray = React.Children.toArray(children) as Array<React.ReactElement<IColumnProps>>;\n        const numCols = newChildArray.length;\n\n        // Try to maintain widths of columns by looking up the width of the\n        // column that had the same `ID` prop. If none is found, use the\n        // previous width at the same index.\n        const previousColumnWidths = newChildArray.map((child: React.ReactElement<IColumnProps>, index: number) => {\n            const mappedIndex = this.columnIdToIndex[child.props.id];\n            return this.state.columnWidths[mappedIndex != null ? mappedIndex : index];\n        });\n\n        // Make sure the width/height arrays have the correct length, but keep\n        // as many existing widths/heights when possible. Also, apply the\n        // sparse width/heights from props.\n        let newColumnWidths = this.state.columnWidths;\n        newColumnWidths = Utils.arrayOfLength(newColumnWidths, numCols, defaultColumnWidth);\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, previousColumnWidths);\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, columnWidths);\n\n        let newRowHeights = this.state.rowHeights;\n        newRowHeights = Utils.arrayOfLength(newRowHeights, numRows, defaultRowHeight);\n        newRowHeights = Utils.assignSparseValues(newRowHeights, rowHeights);\n\n        let newSelectedRegions = selectedRegions;\n        if (selectedRegions == null) {\n            // if we're in uncontrolled mode, filter out all selected regions that don't\n            // fit in the current new table dimensions\n            newSelectedRegions = this.state.selectedRegions.filter((region) => {\n                const regionCardinality = Regions.getRegionCardinality(region);\n                const isSelectionModeEnabled = selectionModes.indexOf(regionCardinality) >= 0;\n                return isSelectionModeEnabled && Regions.isRegionValidForTable(region, numRows, numCols);\n            });\n        }\n\n        const newFocusedCell = FocusedCellUtils.getInitialFocusedCell(\n            enableFocus,\n            focusedCell,\n            this.state.focusedCell,\n            newSelectedRegions,\n        );\n\n        this.childrenArray = newChildArray;\n        this.columnIdToIndex = Table.createColumnIdIndex(this.childrenArray);\n        this.invalidateGrid();\n        this.setState({\n            columnWidths: newColumnWidths,\n            focusedCell: newFocusedCell,\n            rowHeights: newRowHeights,\n            selectedRegions: newSelectedRegions,\n        });\n    }\n\n    public render() {\n        const { className, isRowHeaderShown } = this.props;\n        const { horizontalGuides, verticalGuides } = this.state;\n        this.validateGrid();\n\n        const classes = classNames(Classes.TABLE_CONTAINER, {\n            [Classes.TABLE_REORDERING]: this.state.isReordering,\n            [Classes.TABLE_NO_VERTICAL_SCROLL]: this.shouldDisableVerticalScroll(),\n            [Classes.TABLE_NO_HORIZONTAL_SCROLL]: this.shouldDisableHorizontalScroll(),\n            [Classes.TABLE_SELECTION_ENABLED]: this.isSelectionModeEnabled(RegionCardinality.CELLS),\n        }, className);\n\n        return (\n            <div\n                className={classes}\n                ref={this.setRootTableRef}\n                onScroll={this.handleRootScroll}\n            >\n                <TableQuadrantStack\n                    bodyRef={this.setBodyRef}\n                    columnHeaderRef={this.refHandlers.columnHeader}\n                    grid={this.grid}\n                    handleColumnResizeGuide={this.handleColumnResizeGuide}\n                    handleColumnsReordering={this.handleColumnsReordering}\n                    handleRowResizeGuide={this.handleRowResizeGuide}\n                    handleRowsReordering={this.handleRowsReordering}\n                    isHorizontalScrollDisabled={this.shouldDisableHorizontalScroll()}\n                    isRowHeaderShown={isRowHeaderShown}\n                    isVerticalScrollDisabled={this.shouldDisableVerticalScroll()}\n                    numFrozenColumns={this.getNumFrozenColumnsClamped()}\n                    numFrozenRows={this.getNumFrozenRowsClamped()}\n                    onScroll={this.handleBodyScroll}\n                    quadrantRef={this.refHandlers.mainQuadrant}\n                    ref={this.refHandlers.quadrantStack}\n                    renderBody={this.renderBody}\n                    renderColumnHeader={this.renderColumnHeader}\n                    renderMenu={this.renderMenu}\n                    renderRowHeader={this.renderRowHeader}\n                    rowHeaderRef={this.refHandlers.rowHeader}\n                    scrollContainerRef={this.refHandlers.scrollContainer}\n                />\n                <div className={classNames(Classes.TABLE_OVERLAY_LAYER, \"bp-table-reordering-cursor-overlay\")} />\n                <GuideLayer\n                    className={Classes.TABLE_RESIZE_GUIDES}\n                    verticalGuides={verticalGuides}\n                    horizontalGuides={horizontalGuides}\n                />\n            </div>\n        );\n    }\n\n    public renderHotkeys() {\n        const hotkeys =\n            [this.maybeRenderCopyHotkey(), this.maybeRenderSelectAllHotkey(), this.maybeRenderFocusHotkeys()];\n        return (\n            <Hotkeys>\n                {hotkeys.filter((element) => element !== undefined)}\n            </Hotkeys>\n        );\n    }\n\n    /**\n     * When the component mounts, the HTML Element refs will be available, so\n     * we constructor the Locator, which queries the elements' bounding\n     * ClientRects.\n     */\n    public componentDidMount() {\n        this.validateGrid();\n\n        this.locator = new Locator(this.mainQuadrantElement, this.scrollContainerElement);\n        this.updateLocator();\n        this.updateViewportRect(this.locator.getViewportRect());\n\n        this.resizeSensorDetach = ResizeSensor.attach(this.rootTableElement, () => {\n            if (!this.state.isLayoutLocked) {\n                this.updateViewportRect(this.locator.getViewportRect());\n            }\n        });\n    }\n\n    public componentWillUnmount() {\n        if (this.resizeSensorDetach != null) {\n            this.resizeSensorDetach();\n            delete this.resizeSensorDetach;\n        }\n    }\n\n    public componentDidUpdate() {\n        if (this.locator != null) {\n            this.validateGrid();\n            this.updateLocator();\n        }\n\n        this.maybeScrollTableIntoView();\n    }\n\n    protected validateProps(props: ITableProps & { children: React.ReactNode }) {\n        const { children, numFrozenColumns, numFrozenRows, numRows } = props;\n        const numColumns = React.Children.count(children);\n\n        React.Children.forEach(children, (child: React.ReactElement<any>) => {\n            // save as a variable so that union type narrowing works\n            const childType = child.type;\n\n            if (typeof childType === \"string\") {\n                console.warn(Errors.TABLE_NON_COLUMN_CHILDREN_WARNING);\n            } else {\n                const isColumn = childType.prototype === Column.prototype || Column.prototype.isPrototypeOf(childType);\n                if (!isColumn) {\n                    console.warn(Errors.TABLE_NON_COLUMN_CHILDREN_WARNING);\n                }\n            }\n        });\n\n        if (numFrozenColumns != null && (numFrozenColumns < 0 || numFrozenColumns > numColumns)) {\n            console.warn(Errors.TABLE_NUM_FROZEN_COLUMNS_BOUND_WARNING);\n        }\n        if (numFrozenRows != null && (numFrozenRows < 0 || (numRows != null && numFrozenRows > numRows))) {\n            console.warn(Errors.TABLE_NUM_FROZEN_ROWS_BOUND_WARNING);\n        }\n    }\n\n    // Quadrant refs\n    // =============\n\n    private moveFocusCell(\n        primaryAxis: \"row\" | \"col\",\n        secondaryAxis: \"row\" | \"col\",\n        isUpOrLeft: boolean,\n        newFocusedCell: IFocusedCellCoordinates,\n        focusCellRegion: IRegion,\n    ) {\n\n        const { grid } = this;\n        const { selectedRegions } = this.state;\n\n        const primaryAxisPlural = primaryAxis === \"row\" ? \"rows\" : \"cols\";\n        const secondaryAxisPlural = secondaryAxis === \"row\" ? \"rows\" : \"cols\";\n\n        const movementDirection = isUpOrLeft ? -1 : +1;\n        const regionIntervalIndex = isUpOrLeft ? 1 : 0;\n\n        // try moving the cell in the direction along the primary axis\n        newFocusedCell[primaryAxis] += movementDirection;\n\n        const isPrimaryIndexOutOfBounds = isUpOrLeft\n            ? newFocusedCell[primaryAxis] < focusCellRegion[primaryAxisPlural][0]\n            : newFocusedCell[primaryAxis] > focusCellRegion[primaryAxisPlural][1];\n\n        if (isPrimaryIndexOutOfBounds) {\n            // if we moved outside the bounds of selection region,\n            // move to the start (or end) of the primary axis, and move one along the secondary\n            newFocusedCell[primaryAxis] = focusCellRegion[primaryAxisPlural][regionIntervalIndex];\n            newFocusedCell[secondaryAxis] += movementDirection;\n\n            const isSecondaryIndexOutOfBounds = isUpOrLeft\n                ? newFocusedCell[secondaryAxis] < focusCellRegion[secondaryAxisPlural][0]\n                : newFocusedCell[secondaryAxis] > focusCellRegion[secondaryAxisPlural][1];\n\n            if (isSecondaryIndexOutOfBounds) {\n                // if moving along the secondary also moves us outside\n                // go to the start (or end) of the next (or previous region)\n                // (note that if there's only one region you'll be moving to the opposite corner, which is fine)\n                let newFocusCellSelectionIndex = newFocusedCell.focusSelectionIndex + movementDirection;\n\n                // newFocusCellSelectionIndex should be one more (or less), unless we need to wrap around\n                if (isUpOrLeft\n                    ? newFocusCellSelectionIndex < 0\n                    : newFocusCellSelectionIndex >= selectedRegions.length\n                ) {\n                    newFocusCellSelectionIndex = isUpOrLeft\n                        ? selectedRegions.length - 1\n                        : 0;\n                }\n\n                const newFocusCellRegion = Regions.getCellRegionFromRegion(\n                    selectedRegions[newFocusCellSelectionIndex],\n                    grid.numRows,\n                    grid.numCols,\n                );\n\n                newFocusedCell = {\n                    col: newFocusCellRegion.cols[regionIntervalIndex],\n                    focusSelectionIndex: newFocusCellSelectionIndex,\n                    row: newFocusCellRegion.rows[regionIntervalIndex],\n                };\n            }\n        }\n        return newFocusedCell;\n    }\n\n    private handleCopy = (e: KeyboardEvent) => {\n        const { grid } = this;\n        const { getCellClipboardData, onCopy} = this.props;\n        const { selectedRegions} = this.state;\n\n        if (getCellClipboardData == null) {\n            return;\n        }\n\n        // prevent \"real\" copy from being called\n        e.preventDefault();\n        e.stopPropagation();\n\n        const cells = Regions.enumerateUniqueCells(selectedRegions, grid.numRows, grid.numCols);\n        const sparse = Regions.sparseMapCells(cells, getCellClipboardData);\n        if (sparse != null) {\n            const success = Clipboard.copyCells(sparse);\n            BlueprintUtils.safeInvoke(onCopy, success);\n        }\n    }\n\n    private shouldDisableVerticalScroll() {\n        const { fillBodyWithGhostCells } = this.props;\n        const { viewportRect } = this.state;\n\n        const rowIndices = this.grid.getRowIndicesInRect(viewportRect, fillBodyWithGhostCells);\n\n        const isViewportUnscrolledVertically = viewportRect != null && viewportRect.top === 0;\n        const areRowHeadersLoading = this.hasLoadingOption(this.props.loadingOptions, TableLoadingOption.ROW_HEADERS);\n        const areGhostRowsVisible = fillBodyWithGhostCells && this.grid.isGhostIndex(rowIndices.rowIndexEnd, 0);\n\n        return areGhostRowsVisible && (isViewportUnscrolledVertically || areRowHeadersLoading);\n    }\n\n    private shouldDisableHorizontalScroll() {\n        const { fillBodyWithGhostCells } = this.props;\n        const { viewportRect } = this.state;\n\n        const columnIndices = this.grid.getColumnIndicesInRect(viewportRect, fillBodyWithGhostCells);\n\n        const isViewportUnscrolledHorizontally = viewportRect != null && viewportRect.left === 0;\n        const areGhostColumnsVisible =\n            fillBodyWithGhostCells && this.grid.isGhostIndex(0, columnIndices.columnIndexEnd);\n        const areColumnHeadersLoading =\n            this.hasLoadingOption(this.props.loadingOptions, TableLoadingOption.COLUMN_HEADERS);\n\n        return areGhostColumnsVisible && (isViewportUnscrolledHorizontally || areColumnHeadersLoading);\n    }\n\n    private renderMenu = (refHandler: (ref: HTMLElement) => void) => {\n        const classes = classNames(Classes.TABLE_MENU, {\n            [Classes.TABLE_SELECTION_ENABLED]: this.isSelectionModeEnabled(RegionCardinality.FULL_TABLE),\n        });\n        return (\n            <div\n                className={classes}\n                ref={refHandler}\n                onMouseDown={this.handleMenuMouseDown}\n            >\n                {this.maybeRenderRegions(this.styleMenuRegion)}\n            </div>\n        );\n    }\n\n    private handleMenuMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n        // the shift+click interaction expands the region from the focused cell.\n        // thus, if shift is pressed we shouldn't move the focused cell.\n        this.selectAll(!e.shiftKey);\n    }\n\n    private maybeScrollTableIntoView() {\n        const { viewportRect } = this.state;\n\n        const tableBottom = this.grid.getCumulativeHeightAt(this.grid.numRows - 1);\n        const tableRight = this.grid.getCumulativeWidthAt(this.grid.numCols - 1);\n\n        const nextScrollTop = (tableBottom < viewportRect.top + viewportRect.height)\n            // scroll the last row into view\n            ? Math.max(0, tableBottom - viewportRect.height)\n            : viewportRect.top;\n\n        const nextScrollLeft = (tableRight < viewportRect.left + viewportRect.width)\n            // scroll the last column into view\n            ? Math.max(0, tableRight - viewportRect.width)\n            : viewportRect.left;\n\n        this.syncViewportPosition(nextScrollLeft, nextScrollTop);\n    }\n\n    private selectAll = (shouldUpdateFocusedCell: boolean) => {\n        const selectionHandler = this.getEnabledSelectionHandler(RegionCardinality.FULL_TABLE);\n        // clicking on upper left hand corner sets selection to \"all\"\n        // regardless of current selection state (clicking twice does not deselect table)\n        selectionHandler([Regions.table()]);\n\n        if (shouldUpdateFocusedCell) {\n            const newFocusedCellCoordinates = Regions.getFocusCellCoordinatesFromRegion(Regions.table());\n            this.handleFocus(FocusedCellUtils.toFullCoordinates(newFocusedCellCoordinates));\n        }\n    }\n\n    private handleSelectAllHotkey = (e: KeyboardEvent) => {\n        // prevent \"real\" select all from happening as well\n        e.preventDefault();\n        e.stopPropagation();\n\n        // selecting-all via the keyboard should not move the focused cell.\n        this.selectAll(false);\n    }\n\n    private getColumnProps(columnIndex: number) {\n        const column = this.childrenArray[columnIndex] as React.ReactElement<IColumnProps>;\n        return column.props;\n    }\n\n    private columnHeaderCellRenderer = (columnIndex: number) => {\n        const props = this.getColumnProps(columnIndex);\n\n        const {\n            id,\n            loadingOptions,\n            renderCell,\n            renderColumnHeader,\n            ...spreadableProps,\n        } = props;\n\n        const columnLoading = this.hasLoadingOption(loadingOptions, ColumnLoadingOption.HEADER);\n\n        if (renderColumnHeader != null) {\n            const columnHeader = renderColumnHeader(columnIndex);\n            const columnHeaderLoading  = columnHeader.props.loading;\n\n            return React.cloneElement(columnHeader, {\n                loading: columnHeaderLoading != null ? columnHeaderLoading : columnLoading,\n            } as IColumnHeaderCellProps);\n        }\n\n        const baseProps: IColumnHeaderCellProps = {\n            index: columnIndex,\n            loading: columnLoading,\n            ...spreadableProps,\n        };\n\n        if (props.name != null) {\n            return <ColumnHeaderCell {...baseProps} />;\n        } else {\n            return <ColumnHeaderCell {...baseProps} name={Utils.toBase26Alpha(columnIndex)} />;\n        }\n    }\n\n    private renderColumnHeader = (\n        refHandler: (ref: HTMLElement) => void,\n        resizeHandler: (verticalGuides: number[]) => void,\n        reorderingHandler: (oldIndex: number, newIndex: number, length: number) => void,\n        showFrozenColumnsOnly: boolean = false,\n    ) => {\n        const { grid, locator } = this;\n        const { focusedCell, selectedRegions, viewportRect } = this.state;\n        const {\n            allowMultipleSelection,\n            fillBodyWithGhostCells,\n            isColumnReorderable,\n            isColumnResizable,\n            loadingOptions,\n            maxColumnWidth,\n            minColumnWidth,\n            selectedRegionTransform,\n        } = this.props;\n\n        const classes = classNames(Classes.TABLE_COLUMN_HEADERS, {\n            [Classes.TABLE_SELECTION_ENABLED]: this.isSelectionModeEnabled(RegionCardinality.FULL_COLUMNS),\n        });\n\n        const columnIndices = grid.getColumnIndicesInRect(viewportRect, fillBodyWithGhostCells);\n        const columnIndexStart = showFrozenColumnsOnly ? 0 : columnIndices.columnIndexStart;\n        const columnIndexEnd = showFrozenColumnsOnly ? this.getMaxFrozenColumnIndex() : columnIndices.columnIndexEnd;\n\n        return (\n            <div\n                className={classes}\n                ref={refHandler}\n            >\n                <ColumnHeader\n                    allowMultipleSelection={allowMultipleSelection}\n                    cellRenderer={this.columnHeaderCellRenderer}\n                    focusedCell={focusedCell}\n                    grid={grid}\n                    isReorderable={isColumnReorderable}\n                    isResizable={isColumnResizable}\n                    loading={this.hasLoadingOption(loadingOptions, TableLoadingOption.COLUMN_HEADERS)}\n                    locator={locator}\n                    maxColumnWidth={maxColumnWidth}\n                    minColumnWidth={minColumnWidth}\n                    onColumnWidthChanged={this.handleColumnWidthChanged}\n                    onFocus={this.handleFocus}\n                    onLayoutLock={this.handleLayoutLock}\n                    onReordered={this.handleColumnsReordered}\n                    onReordering={reorderingHandler}\n                    onResizeGuide={resizeHandler}\n                    onSelection={this.getEnabledSelectionHandler(RegionCardinality.FULL_COLUMNS)}\n                    selectedRegions={selectedRegions}\n                    selectedRegionTransform={selectedRegionTransform}\n                    columnIndexStart={columnIndexStart}\n                    columnIndexEnd={columnIndexEnd}\n                >\n                    {this.props.children}\n                </ColumnHeader>\n\n                {this.maybeRenderRegions(this.styleColumnHeaderRegion)}\n            </div>\n        );\n    }\n\n    private renderRowHeader = (\n        refHandler: (ref: HTMLElement) => void,\n        resizeHandler: (verticalGuides: number[]) => void,\n        reorderingHandler: (oldIndex: number, newIndex: number, length: number) => void,\n        showFrozenRowsOnly: boolean = false,\n    ) => {\n        const { grid, locator } = this;\n        const { focusedCell, selectedRegions, viewportRect } = this.state;\n        const {\n            allowMultipleSelection,\n            fillBodyWithGhostCells,\n            isRowReorderable,\n            isRowResizable,\n            loadingOptions,\n            maxRowHeight,\n            minRowHeight,\n            renderRowHeader,\n            selectedRegionTransform,\n        } = this.props;\n\n        const classes = classNames(Classes.TABLE_ROW_HEADERS, {\n            [Classes.TABLE_SELECTION_ENABLED]: this.isSelectionModeEnabled(RegionCardinality.FULL_ROWS),\n        });\n\n        const rowIndices = grid.getRowIndicesInRect(viewportRect, fillBodyWithGhostCells);\n        const rowIndexStart = showFrozenRowsOnly ? 0 : rowIndices.rowIndexStart;\n        const rowIndexEnd = showFrozenRowsOnly ? this.getMaxFrozenRowIndex() : rowIndices.rowIndexEnd;\n\n        return (\n            <div\n                className={classes}\n                ref={refHandler}\n            >\n                <RowHeader\n                    allowMultipleSelection={allowMultipleSelection}\n                    focusedCell={focusedCell}\n                    grid={grid}\n                    locator={locator}\n                    isReorderable={isRowReorderable}\n                    isResizable={isRowResizable}\n                    loading={this.hasLoadingOption(loadingOptions, TableLoadingOption.ROW_HEADERS)}\n                    maxRowHeight={maxRowHeight}\n                    minRowHeight={minRowHeight}\n                    onFocus={this.handleFocus}\n                    onLayoutLock={this.handleLayoutLock}\n                    onResizeGuide={resizeHandler}\n                    onReordered={this.handleRowsReordered}\n                    onReordering={reorderingHandler}\n                    onRowHeightChanged={this.handleRowHeightChanged}\n                    onSelection={this.getEnabledSelectionHandler(RegionCardinality.FULL_ROWS)}\n                    renderRowHeader={renderRowHeader}\n                    selectedRegions={selectedRegions}\n                    selectedRegionTransform={selectedRegionTransform}\n                    rowIndexStart={rowIndexStart}\n                    rowIndexEnd={rowIndexEnd}\n                />\n\n                {this.maybeRenderRegions(this.styleRowHeaderRegion)}\n            </div>\n        );\n    }\n\n    private bodyCellRenderer = (rowIndex: number, columnIndex: number) => {\n        const columnProps = this.getColumnProps(columnIndex);\n        const cell = columnProps.renderCell(rowIndex, columnIndex);\n        const cellLoading = cell.props.loading;\n\n        const loading = cellLoading != null\n            ? cellLoading\n            : this.hasLoadingOption(columnProps.loadingOptions, ColumnLoadingOption.CELLS);\n\n        return React.cloneElement(cell, { ...columnProps, loading } as ICellProps);\n    }\n\n    private renderBody = (\n        quadrantType: QuadrantType,\n        showFrozenRowsOnly: boolean = false,\n        showFrozenColumnsOnly: boolean = false,\n    ) => {\n        const { grid, locator } = this;\n        const { focusedCell, selectedRegions, viewportRect } = this.state;\n        const {\n            allowMultipleSelection,\n            fillBodyWithGhostCells,\n            loadingOptions,\n            renderBodyContextMenu,\n            renderMode,\n            selectedRegionTransform,\n        } = this.props;\n\n        const numFrozenColumns = this.getNumFrozenColumnsClamped();\n        const numFrozenRows = this.getNumFrozenRowsClamped();\n\n        const rowIndices = grid.getRowIndicesInRect(viewportRect, fillBodyWithGhostCells);\n        const columnIndices = grid.getColumnIndicesInRect(viewportRect, fillBodyWithGhostCells);\n\n        const columnIndexStart = showFrozenColumnsOnly ? 0 : columnIndices.columnIndexStart;\n        const columnIndexEnd = showFrozenColumnsOnly ? numFrozenColumns : columnIndices.columnIndexEnd;\n        const rowIndexStart = showFrozenRowsOnly ? 0 : rowIndices.rowIndexStart;\n        const rowIndexEnd = showFrozenRowsOnly ? numFrozenRows : rowIndices.rowIndexEnd;\n\n        // the main quadrant contains all cells in the table, so listen only to that quadrant\n        const onCompleteRender = quadrantType === QuadrantType.MAIN\n            ? this.handleCompleteRender\n            : undefined;\n\n        return (\n            <div>\n                <TableBody\n                    allowMultipleSelection={allowMultipleSelection}\n                    cellRenderer={this.bodyCellRenderer}\n                    focusedCell={focusedCell}\n                    grid={grid}\n                    loading={this.hasLoadingOption(loadingOptions, TableLoadingOption.CELLS)}\n                    locator={locator}\n                    onCompleteRender={onCompleteRender}\n                    onFocus={this.handleFocus}\n                    onSelection={this.getEnabledSelectionHandler(RegionCardinality.CELLS)}\n                    renderBodyContextMenu={renderBodyContextMenu}\n                    renderMode={renderMode}\n                    selectedRegions={selectedRegions}\n                    selectedRegionTransform={selectedRegionTransform}\n                    viewportRect={viewportRect}\n\n                    columnIndexStart={columnIndexStart}\n                    columnIndexEnd={columnIndexEnd}\n\n                    rowIndexStart={rowIndexStart}\n                    rowIndexEnd={rowIndexEnd}\n\n                    numFrozenColumns={showFrozenColumnsOnly ? numFrozenColumns : undefined}\n                    numFrozenRows={showFrozenRowsOnly ? numFrozenRows : undefined}\n                />\n                {this.maybeRenderRegions(this.styleBodyRegion, quadrantType)}\n            </div>\n        );\n    }\n\n    private isGuidesShowing() {\n        return this.state.verticalGuides != null || this.state.horizontalGuides != null;\n    }\n\n    private isSelectionModeEnabled(selectionMode: RegionCardinality) {\n        return this.props.selectionModes.indexOf(selectionMode) >= 0;\n    }\n\n    private getEnabledSelectionHandler(selectionMode: RegionCardinality) {\n        if (!this.isSelectionModeEnabled(selectionMode)) {\n            // If the selection mode isn't enabled, return a callback that\n            // will clear the selection. For example, if row selection is\n            // disabled, clicking on the row header will clear the table's\n            // selection. If all selection modes are enabled, clicking on the\n            // same region twice will clear the selection.\n            return this.clearSelection;\n        } else {\n            return this.handleSelection;\n        }\n    }\n\n    private invalidateGrid() {\n        this.grid = null;\n    }\n\n    private validateGrid() {\n        if (this.grid == null) {\n            const { defaultRowHeight, defaultColumnWidth } = this.props;\n            const { rowHeights, columnWidths } = this.state;\n            this.grid = new Grid(\n                rowHeights,\n                columnWidths,\n                Grid.DEFAULT_BLEED,\n                defaultRowHeight,\n                defaultColumnWidth,\n            );\n            this.invokeOnVisibleCellsChangeCallback(this.state.viewportRect);\n        }\n    }\n\n    /**\n     * Renders a `RegionLayer`, applying styles to the regions using the\n     * supplied `IRegionStyler`. `RegionLayer` is a `PureRender` component, so\n     * the `IRegionStyler` should be a new instance on every render if we\n     * intend to redraw the region layer.\n     */\n    private maybeRenderRegions(getRegionStyle: IRegionStyler, quadrantType?: QuadrantType) {\n        if (this.isGuidesShowing() && !this.state.isReordering) {\n            // we want to show guides *and* the selection styles when reordering rows or columns\n            return undefined;\n        }\n\n        const regionGroups = Regions.joinStyledRegionGroups(\n            this.state.selectedRegions,\n            this.props.styledRegionGroups,\n            this.state.focusedCell,\n        );\n\n        return regionGroups.map((regionGroup, index) => {\n            const regionStyles = regionGroup.regions.map((region) => getRegionStyle(region, quadrantType));\n            return (\n                <RegionLayer\n                    className={classNames(regionGroup.className)}\n                    key={index}\n                    regions={regionGroup.regions}\n                    regionStyles={regionStyles}\n                />\n            );\n        });\n    }\n\n    private maybeRenderCopyHotkey() {\n        const { getCellClipboardData } = this.props;\n        if (getCellClipboardData != null) {\n            return (\n                <Hotkey\n                    key=\"copy-hotkey\"\n                    label=\"Copy selected table cells\"\n                    group=\"Table\"\n                    combo=\"mod+c\"\n                    onKeyDown={this.handleCopy}\n                />\n            );\n        } else {\n            return undefined;\n        }\n    }\n\n    private handleCompleteRender = () => {\n        // the first onCompleteRender is triggered before the viewportRect is\n        // defined and the second after the viewportRect has been set. the cells\n        // will only actually render once the viewportRect is defined though, so\n        // we defer invoking onCompleteRender until that check passes.\n        if (this.state.viewportRect != null) {\n            BlueprintUtils.safeInvoke(this.props.onCompleteRender);\n        }\n    }\n\n    private handleFocusMoveLeft = (e: KeyboardEvent) => this.handleFocusMove(e, \"left\");\n    private handleFocusMoveLeftInternal = (e: KeyboardEvent) => this.handleFocusMoveInternal(e, \"left\");\n    private handleFocusMoveRight = (e: KeyboardEvent) => this.handleFocusMove(e, \"right\");\n    private handleFocusMoveRightInternal = (e: KeyboardEvent) => this.handleFocusMoveInternal(e, \"right\");\n    private handleFocusMoveUp = (e: KeyboardEvent) => this.handleFocusMove(e, \"up\");\n    private handleFocusMoveUpInternal = (e: KeyboardEvent) => this.handleFocusMoveInternal(e, \"up\");\n    private handleFocusMoveDown = (e: KeyboardEvent) => this.handleFocusMove(e, \"down\");\n    private handleFocusMoveDownInternal = (e: KeyboardEvent) => this.handleFocusMoveInternal(e, \"down\");\n\n    private maybeRenderFocusHotkeys() {\n        const { enableFocus } = this.props;\n        if (enableFocus != null) {\n            return [\n                <Hotkey\n                    key=\"move left\"\n                    label=\"Move focus cell left\"\n                    group=\"Table\"\n                    combo=\"left\"\n                    onKeyDown={this.handleFocusMoveLeft}\n                />,\n                <Hotkey\n                    key=\"move right\"\n                    label=\"Move focus cell right\"\n                    group=\"Table\"\n                    combo=\"right\"\n                    onKeyDown={this.handleFocusMoveRight}\n                />,\n                <Hotkey\n                    key=\"move up\"\n                    label=\"Move focus cell up\"\n                    group=\"Table\"\n                    combo=\"up\"\n                    onKeyDown={this.handleFocusMoveUp}\n                />,\n                <Hotkey\n                    key=\"move down\"\n                    label=\"Move focus cell down\"\n                    group=\"Table\"\n                    combo=\"down\"\n                    onKeyDown={this.handleFocusMoveDown}\n                />,\n                <Hotkey\n                    key=\"move tab\"\n                    label=\"Move focus cell tab\"\n                    group=\"Table\"\n                    combo=\"tab\"\n                    onKeyDown={this.handleFocusMoveRightInternal}\n                />,\n                <Hotkey\n                    key=\"move shift-tab\"\n                    label=\"Move focus cell shift tab\"\n                    group=\"Table\"\n                    combo=\"shift+tab\"\n                    onKeyDown={this.handleFocusMoveLeftInternal}\n                />,\n                <Hotkey\n                    key=\"move enter\"\n                    label=\"Move focus cell enter\"\n                    group=\"Table\"\n                    combo=\"enter\"\n                    onKeyDown={this.handleFocusMoveDownInternal}\n                />,\n                <Hotkey\n                    key=\"move shift-enter\"\n                    label=\"Move focus cell shift enter\"\n                    group=\"Table\"\n                    combo=\"shift+enter\"\n                    onKeyDown={this.handleFocusMoveUpInternal}\n                />,\n            ];\n        } else {\n            return [];\n        }\n    }\n\n    private maybeRenderSelectAllHotkey() {\n        if (this.isSelectionModeEnabled(RegionCardinality.FULL_TABLE)) {\n            return (\n                <Hotkey\n                    key=\"select-all-hotkey\"\n                    label=\"Select all\"\n                    group=\"Table\"\n                    combo=\"mod+a\"\n                    onKeyDown={this.handleSelectAllHotkey}\n                />\n            );\n        } else {\n            return undefined;\n        }\n    }\n\n    private styleBodyRegion = (region: IRegion, quadrantType: QuadrantType): React.CSSProperties => {\n        const { numFrozenColumns } = this.props;\n\n        const cardinality = Regions.getRegionCardinality(region);\n        const style = this.grid.getRegionStyle(region);\n\n        // ensure we're not showing borders at the boundary of the frozen-columns area\n        const canHideRightBorder =\n            (quadrantType === QuadrantType.TOP_LEFT || quadrantType === QuadrantType.LEFT)\n            && numFrozenColumns != null && numFrozenColumns > 0;\n\n        const fixedHeight = this.grid.getHeight();\n        const fixedWidth = this.grid.getWidth();\n\n        // include a correction in some cases to hide borders along quadrant boundaries\n        const alignmentCorrection = 1;\n        const alignmentCorrectionString = `-${alignmentCorrection}px`;\n\n        switch (cardinality) {\n            case RegionCardinality.CELLS:\n                return style;\n            case RegionCardinality.FULL_COLUMNS:\n                style.top = alignmentCorrectionString;\n                style.height = fixedHeight + alignmentCorrection;\n                return style;\n            case RegionCardinality.FULL_ROWS:\n                style.left = alignmentCorrectionString;\n                style.width = fixedWidth + alignmentCorrection;\n                if (canHideRightBorder) {\n                    style.right = alignmentCorrectionString;\n                }\n                return style;\n            case RegionCardinality.FULL_TABLE:\n                style.left = alignmentCorrectionString;\n                style.top = alignmentCorrectionString;\n                style.width = fixedWidth + alignmentCorrection;\n                style.height = fixedHeight + alignmentCorrection;\n                if (canHideRightBorder) {\n                    style.right = alignmentCorrectionString;\n                }\n                return style;\n            default:\n                return { display: \"none\" };\n        }\n    }\n\n    private styleMenuRegion = (region: IRegion): React.CSSProperties => {\n        const { grid } = this;\n        const { viewportRect } = this.state;\n        if (viewportRect == null) {\n            return {};\n        }\n        const cardinality = Regions.getRegionCardinality(region);\n        const style = grid.getRegionStyle(region);\n\n        switch (cardinality) {\n            case RegionCardinality.FULL_TABLE:\n                style.right = \"0px\";\n                style.bottom = \"0px\";\n                style.top = \"0px\";\n                style.left = \"0px\";\n                style.borderBottom = \"none\";\n                style.borderRight = \"none\";\n                return style;\n\n            default:\n                return { display: \"none\" };\n        }\n    }\n\n    private styleColumnHeaderRegion = (region: IRegion): React.CSSProperties => {\n        const { grid } = this;\n        const { viewportRect } = this.state;\n        if (viewportRect == null) {\n            return {};\n        }\n        const cardinality = Regions.getRegionCardinality(region);\n        const style = grid.getRegionStyle(region);\n\n        switch (cardinality) {\n            case RegionCardinality.FULL_TABLE:\n                style.left = \"-1px\";\n                style.borderLeft = \"none\";\n                style.bottom = \"-1px\";\n                return style;\n            case RegionCardinality.FULL_COLUMNS:\n                style.bottom = \"-1px\";\n                return style;\n\n            default:\n                return { display: \"none\" };\n        }\n    }\n\n    private styleRowHeaderRegion = (region: IRegion): React.CSSProperties => {\n        const { grid } = this;\n        const { viewportRect } = this.state;\n        if (viewportRect == null) {\n            return {};\n        }\n        const cardinality = Regions.getRegionCardinality(region);\n        const style = grid.getRegionStyle(region);\n        switch (cardinality) {\n            case RegionCardinality.FULL_TABLE:\n                style.top = \"-1px\";\n                style.borderTop = \"none\";\n                style.right = \"-1px\";\n                return style;\n            case RegionCardinality.FULL_ROWS:\n                style.right = \"-1px\";\n                return style;\n\n            default:\n                return { display: \"none\" };\n        }\n    }\n\n    private handleColumnWidthChanged = (columnIndex: number, width: number) => {\n        const selectedRegions = this.state.selectedRegions;\n        const columnWidths = this.state.columnWidths.slice();\n\n        if (Regions.hasFullTable(selectedRegions)) {\n            for (let col = 0; col < columnWidths.length; col++) {\n                columnWidths[col] = width;\n            }\n        }\n        if (Regions.hasFullColumn(selectedRegions, columnIndex)) {\n            Regions.eachUniqueFullColumn(selectedRegions, (col: number) => {\n                columnWidths[col] = width;\n            });\n        } else {\n            columnWidths[columnIndex] = width;\n        }\n\n        this.invalidateGrid();\n        this.setState({ columnWidths });\n\n        const { onColumnWidthChanged } = this.props;\n        if (onColumnWidthChanged != null) {\n            onColumnWidthChanged(columnIndex, width);\n        }\n    }\n\n    private handleRowHeightChanged = (rowIndex: number, height: number) => {\n        const selectedRegions = this.state.selectedRegions;\n        const rowHeights = this.state.rowHeights.slice();\n\n        if (Regions.hasFullTable(selectedRegions)) {\n            for (let row = 0; row < rowHeights.length; row++) {\n                rowHeights[row] = height;\n            }\n        }\n        if (Regions.hasFullRow(selectedRegions, rowIndex)) {\n            Regions.eachUniqueFullRow(selectedRegions, (row: number) => {\n                rowHeights[row] = height;\n            });\n        } else {\n            rowHeights[rowIndex] = height;\n        }\n\n        this.invalidateGrid();\n        this.setState({ rowHeights });\n\n        const { onRowHeightChanged } = this.props;\n        if (onRowHeightChanged != null) {\n            onRowHeightChanged(rowIndex, height);\n        }\n    }\n\n    private handleRootScroll = (_event: React.UIEvent<HTMLElement>) => {\n        // Bug #211 - Native browser text selection events can cause the root\n        // element to scroll even though it has a overflow:hidden style. The\n        // only viable solution to this is to unscroll the element after the\n        // browser scrolls it.\n        if (this.rootTableElement != null) {\n            this.rootTableElement.scrollLeft = 0;\n            this.rootTableElement.scrollTop = 0;\n        }\n    }\n\n    private handleBodyScroll = (event: React.SyntheticEvent<HTMLElement>) => {\n        // Prevent the event from propagating to avoid a resize event on the\n        // resize sensor.\n        event.stopPropagation();\n\n        if (this.locator != null && !this.state.isLayoutLocked) {\n            const viewportRect = this.locator.getViewportRect();\n            this.updateViewportRect(viewportRect);\n        }\n    }\n\n    private clearSelection = (_selectedRegions: IRegion[]) => {\n        this.handleSelection([]);\n    }\n\n    // no good way to call arrow-key keyboard events from tests\n    /* istanbul ignore next */\n    private handleFocusMove = (e: KeyboardEvent, direction: \"up\" | \"down\" | \"left\" | \"right\") => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { focusedCell } = this.state;\n        if (focusedCell == null) {\n            // halt early if we have a selectedRegionTransform or something else in play that nixes\n            // the focused cell.\n            return;\n        }\n\n        const newFocusedCell = { col: focusedCell.col, row: focusedCell.row, focusSelectionIndex: 0 };\n        const { grid } = this;\n\n        switch (direction) {\n            case \"up\":\n                newFocusedCell.row -= 1;\n                break;\n            case \"down\":\n                newFocusedCell.row += 1;\n                break;\n            case \"left\":\n                newFocusedCell.col -= 1;\n                break;\n            case \"right\":\n                newFocusedCell.col += 1;\n                break;\n            default:\n                break;\n        }\n\n        if (newFocusedCell.row < 0 || newFocusedCell.row >= grid.numRows ||\n            newFocusedCell.col < 0 || newFocusedCell.col >= grid.numCols) {\n            return;\n        }\n\n        // change selection to match new focus cell location\n        const newSelectionRegions = [Regions.cell(newFocusedCell.row, newFocusedCell.col)];\n        this.handleSelection(newSelectionRegions);\n        this.handleFocus(newFocusedCell);\n\n        // keep the focused cell in view\n        this.scrollBodyToFocusedCell(newFocusedCell);\n    }\n\n    // no good way to call arrow-key keyboard events from tests\n    /* istanbul ignore next */\n    private handleFocusMoveInternal = (e: KeyboardEvent, direction: \"up\" | \"down\" | \"left\" | \"right\") => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { focusedCell, selectedRegions } = this.state;\n        const { grid } = this;\n\n        if (focusedCell == null) {\n            // halt early if we have a selectedRegionTransform or something else in play that nixes\n            // the focused cell.\n            return;\n        }\n\n        let newFocusedCell = {\n            col: focusedCell.col,\n            focusSelectionIndex: focusedCell.focusSelectionIndex,\n            row: focusedCell.row,\n        };\n\n        // if we're not in any particular focus cell region, and one exists, go to the first cell of the first one\n        if (focusedCell.focusSelectionIndex == null && selectedRegions.length > 0) {\n            const focusCellRegion = Regions.getCellRegionFromRegion(\n                selectedRegions[0],\n                grid.numRows,\n                grid.numCols,\n            );\n\n            newFocusedCell = {\n                col: focusCellRegion.cols[0],\n                focusSelectionIndex: 0,\n                row:  focusCellRegion.rows[0],\n            };\n        } else {\n            if (selectedRegions.length === 0) {\n                this.handleFocusMove(e, direction);\n                return;\n            }\n\n            const focusCellRegion = Regions.getCellRegionFromRegion(\n                selectedRegions[focusedCell.focusSelectionIndex],\n                grid.numRows,\n                grid.numCols,\n            );\n\n            if (focusCellRegion.cols[0] === focusCellRegion.cols[1]\n                && focusCellRegion.rows[0] === focusCellRegion.rows[1]\n                && selectedRegions.length === 1) {\n\n                this.handleFocusMove(e, direction);\n                return;\n            }\n\n            switch (direction) {\n                case \"up\":\n                    newFocusedCell = this.moveFocusCell(\"row\", \"col\", true, newFocusedCell, focusCellRegion);\n                    break;\n                case \"left\":\n                    newFocusedCell = this.moveFocusCell(\"col\", \"row\", true, newFocusedCell, focusCellRegion);\n                    break;\n                case \"down\":\n                    newFocusedCell = this.moveFocusCell(\"row\", \"col\", false, newFocusedCell, focusCellRegion);\n                    break;\n                case \"right\":\n                    newFocusedCell = this.moveFocusCell(\"col\", \"row\", false, newFocusedCell, focusCellRegion);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        if (newFocusedCell.row < 0 || newFocusedCell.row >= grid.numRows ||\n            newFocusedCell.col < 0 || newFocusedCell.col >= grid.numCols) {\n            return;\n        }\n\n        this.handleFocus(newFocusedCell);\n\n        // keep the focused cell in view\n        this.scrollBodyToFocusedCell(newFocusedCell);\n    }\n\n    private scrollBodyToFocusedCell = (focusedCell: IFocusedCellCoordinates) => {\n        const { row, col } = focusedCell;\n        const { viewportRect } = this.state;\n\n        // sort keys in normal CSS position order (per the trusty TRBL/\"trouble\" acronym)\n        // tslint:disable:object-literal-sort-keys\n        const viewportBounds = {\n            top: viewportRect.top,\n            right: viewportRect.left + viewportRect.width,\n            bottom: viewportRect.top + viewportRect.height,\n            left: viewportRect.left,\n        };\n        const focusedCellBounds = {\n            top: this.grid.getCumulativeHeightBefore(row),\n            right: this.grid.getCumulativeWidthAt(col),\n            bottom: this.grid.getCumulativeHeightAt(row),\n            left: this.grid.getCumulativeWidthBefore(col),\n        };\n        // tslint:enable:object-literal-sort-keys\n\n        const focusedCellWidth = focusedCellBounds.right - focusedCellBounds.left;\n        const focusedCellHeight = focusedCellBounds.bottom - focusedCellBounds.top;\n\n        const isFocusedCellWiderThanViewport = focusedCellWidth > viewportRect.width;\n        const isFocusedCellTallerThanViewport = focusedCellHeight > viewportRect.height;\n\n        let nextScrollTop = viewportRect.top;\n        let nextScrollLeft = viewportRect.left;\n\n        // keep the top end of an overly tall focused cell in view when moving left and right\n        // (without this OR check, the body seesaws to fit the top end, then the bottom end, etc.)\n        if (focusedCellBounds.top < viewportBounds.top || isFocusedCellTallerThanViewport) {\n            // scroll up (minus one pixel to avoid clipping the focused-cell border)\n            nextScrollTop = Math.max(0, focusedCellBounds.top - 1);\n        } else if (focusedCellBounds.bottom > viewportBounds.bottom) {\n            // scroll down\n            const scrollDelta = focusedCellBounds.bottom - viewportBounds.bottom;\n            nextScrollTop = viewportBounds.top + scrollDelta;\n        }\n\n        // keep the left end of an overly wide focused cell in view when moving up and down\n        if (focusedCellBounds.left < viewportBounds.left || isFocusedCellWiderThanViewport) {\n            // scroll left (again minus one additional pixel)\n            nextScrollLeft = Math.max(0, focusedCellBounds.left - 1);\n        } else if (focusedCellBounds.right > viewportBounds.right) {\n            // scroll right\n            const scrollDelta = focusedCellBounds.right - viewportBounds.right;\n            nextScrollLeft = viewportBounds.left + scrollDelta;\n        }\n\n        this.syncViewportPosition(nextScrollLeft, nextScrollTop);\n    }\n\n    private syncViewportPosition(nextScrollLeft: number, nextScrollTop: number) {\n        const { viewportRect } = this.state;\n\n        const didScrollTopChange = nextScrollTop !== viewportRect.top;\n        const didScrollLeftChange = nextScrollLeft !== viewportRect.left;\n\n        if (didScrollTopChange || didScrollLeftChange) {\n            // we need to modify the scroll container explicitly for the viewport to shift. in so\n            // doing, we add the size of the header elements, which are not technically part of the\n            // \"grid\" concept (the grid only consists of body cells at present).\n            if (didScrollTopChange) {\n                const topCorrection = this.shouldDisableVerticalScroll() ? 0 : this.columnHeaderElement.clientHeight;\n                this.scrollContainerElement.scrollTop = nextScrollTop + topCorrection;\n            }\n            if (didScrollLeftChange) {\n                const leftCorrection = this.shouldDisableHorizontalScroll() ? 0 : this.rowHeaderElement.clientWidth;\n                this.scrollContainerElement.scrollLeft = nextScrollLeft + leftCorrection;\n            }\n\n            const nextViewportRect = new Rect(\n                nextScrollLeft,\n                nextScrollTop,\n                viewportRect.width,\n                viewportRect.height,\n            );\n            this.updateViewportRect(nextViewportRect);\n        }\n    }\n\n    private handleFocus = (focusedCell: IFocusedCellCoordinates) => {\n        if (!this.props.enableFocus) {\n            // don't set focus state if focus is not allowed\n            return;\n        }\n\n        // only set focused cell state if not specified in props\n        if (this.props.focusedCell == null) {\n            this.setState({ focusedCell } as ITableState);\n        }\n\n        BlueprintUtils.safeInvoke(this.props.onFocus, focusedCell);\n    }\n\n    private handleSelection = (selectedRegions: IRegion[]) => {\n        // only set selectedRegions state if not specified in props\n        if (this.props.selectedRegions == null) {\n            this.setState({ selectedRegions } as ITableState);\n        }\n\n        const { onSelection } = this.props;\n        if (onSelection != null) {\n            onSelection(selectedRegions);\n        }\n    }\n\n    private handleColumnsReordering = (verticalGuides: number[]) => {\n        this.setState({ isReordering: true, verticalGuides } as ITableState);\n    }\n\n    private handleColumnsReordered = (oldIndex: number, newIndex: number, length: number) => {\n        this.setState({ isReordering: false, verticalGuides: undefined } as ITableState);\n        BlueprintUtils.safeInvoke(this.props.onColumnsReordered, oldIndex, newIndex, length);\n    }\n\n    private handleRowsReordering = (horizontalGuides: number[]) => {\n        this.setState({ isReordering: true, horizontalGuides } as ITableState);\n    }\n\n    private handleRowsReordered = (oldIndex: number, newIndex: number, length: number) => {\n        this.setState({ isReordering: false, horizontalGuides: undefined } as ITableState);\n        BlueprintUtils.safeInvoke(this.props.onRowsReordered, oldIndex, newIndex, length);\n    }\n\n    private handleLayoutLock = (isLayoutLocked = false) => {\n        this.setState({ isLayoutLocked });\n    }\n\n    private hasLoadingOption = (loadingOptions: string[], loadingOption: string) => {\n        if (loadingOptions == null) {\n            return undefined;\n        }\n        return loadingOptions.indexOf(loadingOption) >= 0;\n    }\n\n    private updateLocator() {\n        const rowHeaderWidth =\n            this.rowHeaderElement == null ? 0 : this.rowHeaderElement.getBoundingClientRect().width;\n        const columnHeaderHeight =\n            this.columnHeaderElement == null ? 0 : this.columnHeaderElement.getBoundingClientRect().height;\n\n        this.locator.setGrid(this.grid)\n            .setNumFrozenRows(this.getNumFrozenRowsClamped())\n            .setNumFrozenColumns(this.getNumFrozenColumnsClamped())\n            .setRowHeaderWidth(rowHeaderWidth)\n            .setColumnHeaderHeight(columnHeaderHeight);\n    }\n\n    private updateViewportRect = (nextViewportRect: Rect) => {\n        this.setState({ viewportRect: nextViewportRect });\n\n        const { viewportRect } = this.state;\n\n        const didViewportChange =\n            (viewportRect != null && !viewportRect.equals(nextViewportRect))\n            || (viewportRect == null && nextViewportRect != null);\n\n        if (didViewportChange) {\n            this.invokeOnVisibleCellsChangeCallback(nextViewportRect);\n        }\n    }\n\n    private invokeOnVisibleCellsChangeCallback(viewportRect: Rect) {\n        const columnIndices = this.grid.getColumnIndicesInRect(viewportRect);\n        const rowIndices = this.grid.getRowIndicesInRect(viewportRect);\n        BlueprintUtils.safeInvoke(this.props.onVisibleCellsChange, rowIndices, columnIndices);\n    }\n\n    private getMaxFrozenColumnIndex = () => {\n        const numFrozenColumns = this.getNumFrozenColumnsClamped();\n        return (numFrozenColumns != null) ? numFrozenColumns - 1 : undefined;\n    }\n\n    private getMaxFrozenRowIndex = () => {\n        const numFrozenRows = this.getNumFrozenRowsClamped();\n        return (numFrozenRows != null) ? numFrozenRows - 1 : undefined;\n    }\n\n    private getNumFrozenColumnsClamped(props: ITableProps = this.props) {\n        const { numFrozenColumns } = props;\n        const numColumns = React.Children.count(props.children);\n        return Utils.clamp(numFrozenColumns, 0, numColumns);\n    }\n\n    private getNumFrozenRowsClamped(props: ITableProps = this.props) {\n        const { numFrozenRows, numRows } = props;\n        return Utils.clamp(numFrozenRows, 0, numRows);\n    }\n\n    private handleColumnResizeGuide = (verticalGuides: number[]) => {\n        this.setState({ verticalGuides } as ITableState);\n    }\n\n    private handleRowResizeGuide = (horizontalGuides: number[]) => {\n        this.setState({ horizontalGuides } as ITableState);\n    }\n\n    private setBodyRef = (ref: HTMLElement) => this.bodyElement = ref;\n    private setRootTableRef = (ref: HTMLElement) => this.rootTableElement = ref;\n}\n"]}