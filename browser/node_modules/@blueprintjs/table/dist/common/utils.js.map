{"version":3,"sources":["../src/common/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { IProps } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\n/**\n * Re-declare matching types from the classnames library;\n */\nexport type ClassValue = string | number | ClassDictionary | ClassArray;\n\n// tslint:disable interface-name no-empty-interface\nexport interface ClassDictionary {\n    [id: string]: boolean;\n}\n\nexport interface ClassArray extends Array<ClassValue> {};\n// tslint:enable\n\n/**\n * Since Firefox doesn't provide a computed \"font\" property, we manually\n * construct it using the ordered properties that can be specifed in CSS.\n */\nconst CSS_FONT_PROPERTIES = [\n    \"font-style\",\n    \"font-variant\",\n    \"font-weight\",\n    \"font-size\",\n    \"font-family\",\n];\n\nexport interface IKeyWhitelist<T> { include: Array<keyof T>; }\nexport interface IKeyBlacklist<T> { exclude: Array<keyof T>; }\n\nexport const Utils = {\n    /**\n     * Returns a clone of the ReactElement with a className that includes the\n     * element's original className and any other classes passed in with variadic\n     * arguments matching the `classNames` api.\n     */\n    assignClasses<P extends IProps>(elem: React.ReactElement<P>, ...extendedClasses: ClassValue[]) {\n        const classes = classNames(elem.props.className, ...extendedClasses);\n        return React.cloneElement(elem, {className : classes} as IProps);\n    },\n\n    /**\n     * Invokes the callback `n` times, collecting the results in an array, which\n     * is the return value. Similar to _.times\n     */\n    times<T>(n: number, callback: (i: number) => T): T[] {\n        const result: T[] = Array(n);\n        for (let index = 0; index < n; index++) {\n            result[index] = callback(index);\n        }\n        return result;\n    },\n\n    /**\n     * Takes an array of numbers, returns an array of numbers of the same length in which each\n     * value is the sum of current and previous values in the input array.\n     *\n     * Example input:  [10, 20, 50]\n     *         output: [10, 30, 80]\n     */\n    accumulate(numbers: number[]) {\n        const result: number[] = [];\n        let sum = 0;\n        for (const num of numbers) {\n            sum += num;\n            result.push(sum);\n        }\n        return result;\n    },\n\n    /**\n     * Returns traditional spreadsheet-style column names\n     * e.g. (A, B, ..., Z, AA, AB, ..., ZZ, AAA, AAB, ...).\n     *\n     * Note that this isn't technically mathematically equivalent to base 26 since\n     * there is no zero element.\n     */\n    toBase26Alpha(num: number) {\n        let str = \"\";\n        while (true) {\n            const letter = num % 26;\n            str = String.fromCharCode(65 + letter) + str;\n            num = num - letter;\n            if (num <= 0) {\n                return str;\n            }\n            num = (num / 26) - 1;\n        }\n    },\n\n    /**\n     * Returns traditional spreadsheet-style cell names\n     * e.g. (A1, B2, ..., Z44, AA1) with rows 1-indexed.\n     */\n    toBase26CellName(rowIndex: number, columnIndex: number) {\n        return `${Utils.toBase26Alpha(columnIndex)}${rowIndex + 1}`;\n    },\n\n    /**\n     * Performs the binary search algorithm to find the index of the `value`\n     * parameter in a sorted list of numbers. If `value` is not in the list, the\n     * index where `value` can be inserted to maintain the sort is returned.\n     *\n     * Unlike a typical binary search implementation, we use a `lookup`\n     * callback to access the sorted list of numbers instead of an array. This\n     * avoids additional storage overhead.\n     *\n     * We use this to, for example, find the index of a row/col given its client\n     * coordinate.\n     *\n     * Adapted from lodash https://github.com/lodash/lodash/blob/4.11.2/lodash.js#L3579\n     *\n     * @param value - the query value\n     * @param high - the length of the sorted list of numbers\n     * @param lookup - returns the number from the list at the supplied index\n     */\n    binarySearch(value: number, high: number, lookup: (index: number) => number): number {\n        let low = 0;\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2.0);\n            const computed = lookup(mid);\n            if (computed < value) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    },\n\n    /**\n     * Returns a copy of the array that will have a length of the supplied parameter.\n     * If the array is too long, it will be truncated. If it is too short, it will be\n     * filled with the suppleid `fillValue` argument.\n     *\n     * @param array - the `Array` to copy and adjust\n     * @param length - the target length of the array\n     * @param fillValue - the value to add to the array if it is too short\n     */\n    arrayOfLength<T>(array: T[], length: number, fillValue: T): T[] {\n        if (array.length > length) {\n            return array.slice(0, length);\n        }\n\n        array = array.slice();\n        while (array.length < length) {\n            array.push(fillValue);\n        }\n        return array;\n    },\n\n    /**\n     * Takes in one full array of values and one sparse array of the same\n     * length and type. Returns a copy of the `defaults` array, where each\n     * value is replaced with the corresponding non-null value at the same\n     * index in `sparseOverrides`.\n     *\n     * @param defaults - the full array of default values\n     * @param sparseOverrides - the sparse array of override values\n     */\n    assignSparseValues<T>(defaults: T[], sparseOverrides: T[]) {\n        if (sparseOverrides == null || defaults.length !== sparseOverrides.length) {\n            return defaults;\n        }\n\n        defaults = defaults.slice();\n        for (let i = 0; i < defaults.length; i++) {\n            const override = sparseOverrides[i];\n            if (override != null) {\n                defaults[i] = override;\n            }\n        }\n        return defaults;\n    },\n\n    /**\n     * Measures the bounds of supplied element's textContent.\n     *\n     * We use the computed font from the supplied element and a non-DOM canvas\n     * context to measure the text.\n     *\n     * Returns a `TextMetrics` object.\n     */\n    measureElementTextContent(element: Element) {\n        const context = document.createElement(\"canvas\").getContext(\"2d\");\n        const style = getComputedStyle(element, null);\n        context.font = CSS_FONT_PROPERTIES.map((prop) => style.getPropertyValue(prop)).join(\" \");\n        return context.measureText(element.textContent);\n    },\n\n    /**\n     * Given a number, returns a value that is clamped within a\n     * minimum/maximum bounded range. The minimum and maximum are optional. If\n     * either is missing, that extrema limit is not applied.\n     *\n     * Assumes max >= min.\n     */\n    clamp(value: number, min?: number, max?: number) {\n        if (min != null && value < min) {\n            value = min;\n        }\n        if (max != null && value > max) {\n            value = max;\n        }\n        return value;\n    },\n\n    /**\n     * Shallow comparison between objects. If `keys` is provided, just that subset of keys will be\n     * compared; otherwise, all keys will be compared.\n     */\n    shallowCompareKeys<T extends object>(objA: T, objB: T, keys?: IKeyBlacklist<T> | IKeyWhitelist<T>) {\n        // treat `null` and `undefined` as the same\n        if (objA == null && objB == null) {\n            return true;\n        } else if (objA == null || objB == null) {\n            return false;\n        } else if (Array.isArray(objA) || Array.isArray(objB)) {\n            return false;\n        } else if (keys != null) {\n            return _shallowCompareKeys(objA, objB, keys);\n        } else {\n            // shallowly compare all keys from both objects\n            const keysA = Object.keys(objA) as Array<keyof T>;\n            const keysB = Object.keys(objB) as Array<keyof T>;\n            return _shallowCompareKeys(objA, objB, { include: keysA })\n                && _shallowCompareKeys(objA, objB, { include: keysB });\n        }\n    },\n\n    /**\n     * Deep comparison between objects. If `keys` is provided, just that subset of keys will be\n     * compared; otherwise, all keys will be compared.\n     */\n    deepCompareKeys(objA: any, objB: any, keys?: string[]): boolean {\n        if (objA === objB) {\n            return true;\n        } else if (objA == null && objB == null) {\n            // treat `null` and `undefined` as the same\n            return true;\n        } else if (objA == null || objB == null) {\n            return false;\n        } else if (Array.isArray(objA) || Array.isArray(objB)) {\n            return Utils.arraysEqual(objA, objB, Utils.deepCompareKeys);\n        } else if (_isSimplePrimitiveType(objA) || _isSimplePrimitiveType(objB)) {\n            return objA === objB;\n        } else if (keys != null) {\n            return _deepCompareKeys(objA, objB, keys);\n        } else if (objA.constructor !== objB.constructor) {\n            return false;\n        } else {\n            const keysA = Object.keys(objA);\n            const keysB = Object.keys(objB);\n            if (keysA == null || keysB == null) {\n                return false;\n            }\n            if (keysA.length === 0 && keysB.length === 0) {\n                return true;\n            }\n            return Utils.arraysEqual(keysA, keysB) && _deepCompareKeys(objA, objB, keysA);\n        }\n    },\n\n    /**\n     * Returns a descriptive object for each key whose values are shallowly unequal between two\n     * provided objects. Useful for debugging shouldComponentUpdate.\n     */\n    getShallowUnequalKeyValues<T extends object>(objA: T, objB: T, keys?: IKeyBlacklist<T> | IKeyWhitelist<T>) {\n        // default param values let null values pass through, so we have to take this more thorough approach\n        const definedObjA = (objA == null) ? {} : objA;\n        const definedObjB = (objB == null) ? {} : objB;\n\n        const filteredKeys = _filterKeys(definedObjA, definedObjB, keys == null ? { exclude: [] } : keys);\n        return _getUnequalKeyValues(\n            definedObjA,\n            definedObjB,\n            filteredKeys,\n            (a, b, key) => Utils.shallowCompareKeys(a, b, { include: [key] }));\n    },\n\n    /**\n     * Returns a descriptive object for each key whose values are deeply unequal between two\n     * provided objects. Useful for debugging shouldComponentUpdate.\n     */\n    getDeepUnequalKeyValues<T extends object>(objA: T, objB: T, keys?: Array<keyof T>) {\n        const definedObjA = (objA == null) ? {} as T : objA;\n        const definedObjB = (objB == null) ? {} as T : objB;\n\n        const filteredKeys = (keys == null) ? _unionKeys(definedObjA, definedObjB) : keys;\n        return _getUnequalKeyValues(\n            definedObjA,\n            definedObjB,\n            filteredKeys,\n            (a, b, key) => Utils.deepCompareKeys(a, b, [key]));\n    },\n\n    /**\n     * When reordering a contiguous block of rows or columns to a new index, we show a preview guide\n     * at the absolute index in the original ordering but emit the new index in the reordered list.\n     * This function converts an absolute \"guide\" index to a relative \"reordered\" index.\n     *\n     * Example: Say we want to move the first three columns two spots to the right. While we drag, a\n     * vertical guide is shown to preview where we'll be dropping the columns. (In the following\n     * ASCII art, `*` denotes a selected column, `·` denotes a cell border, and `|` denotes a\n     * vertical guide).\n     *\n     *     Before mousedown:\n     *     · 0 · 1 · 2 · 3 · 4 · 5 ·\n     *       *   *   *\n     *\n     *     During mousemove two spots to the right:\n     *     · 0 · 1 · 2 · 3 · 4 | 5 ·\n     *       *   *   *\n     *\n     *     After mouseup:\n     *     · 3 · 4 · 0 · 1 · 2 · 5 ·\n     *               *   *   *\n     *\n     * Note that moving the three columns beyond index 4 effectively moves them two spots rightward.\n     *\n     * In this case, the inputs to this function would be:\n     *     - oldIndex: 0 (the left-most index of the selected column range in the original ordering)\n     *     - newIndex: 5 (the index on whose left boundary the guide appears in the original ordering)\n     *     - length: 3 (the number of columns to move)\n     *\n     * The return value will then be 2, the left-most index of the columns in the new ordering.\n     */\n    guideIndexToReorderedIndex(oldIndex: number, newIndex: number, length: number) {\n        if (newIndex < oldIndex) {\n            return newIndex;\n        } else if (oldIndex <= newIndex && newIndex < oldIndex + length) {\n            return oldIndex;\n        } else {\n            return Math.max(0, newIndex - length);\n        }\n    },\n\n    /**\n     * When reordering a contiguous block of rows or columns to a new index, we show a preview guide\n     * at the absolute index in the original ordering but emit the new index in the reordered list.\n     * This function converts a relative \"reordered\"\" index to an absolute \"guide\" index.\n     *\n     * For the scenario in the example above, the inputs to this function would be:\n     *     - oldIndex: 0 (the left-most index of the selected column range in the original ordering)\n     *     - newIndex: 2 (the left-most index of the selected column range in the new ordering)\n     *     - length: 3 (the number of columns to move)\n     *\n     * The return value will then be 5, the index on whose left boundary the guide should appear in\n     * the original ordering.\n     */\n    reorderedIndexToGuideIndex(oldIndex: number, newIndex: number, length: number) {\n        return (newIndex <= oldIndex) ? newIndex : newIndex + length;\n    },\n\n    /**\n     * Returns a copy of the provided array with the `length` contiguous elements starting at the\n     * `from` index reordered to start at the `to` index.\n     *\n     * For example, given the array [A,B,C,D,E,F], reordering the 3 contiguous elements starting at\n     * index 1 (B, C, and D) to start at index 2 would yield [A,E,B,C,D,F].\n     */\n    reorderArray(array: any[], from: number, to: number, length = 1) {\n        if (length === 0 || length === array.length || from === to) {\n            // return an unchanged copy\n            return array.slice();\n        }\n\n        if (length < 0 || length > array.length || from + length > array.length) {\n            return undefined;\n        }\n\n        const before = array.slice(0, from);\n        const within = array.slice(from, from + length);\n        const after = array.slice(from + length);\n\n        const result = [];\n        let i = 0;\n        let b = 0;\n        let w = 0;\n        let a = 0;\n\n        while (i < to) {\n            if (b < before.length) {\n                result.push(before[b]);\n                b += 1;\n            } else {\n                result.push(after[a]);\n                a += 1;\n            }\n            i += 1;\n        }\n\n        while (w < length) {\n            result.push(within[w]);\n            w += 1;\n            i += 1;\n        }\n\n        while (i < array.length) {\n            if (b < before.length) {\n                result.push(before[b]);\n                b += 1;\n            } else {\n                result.push(after[a]);\n                a += 1;\n            }\n            i += 1;\n        }\n\n        return result;\n    },\n\n    /**\n     * Returns true if the mouse event was triggered by the left mouse button.\n     */\n    isLeftClick(event: MouseEvent) {\n        return event.button === 0;\n    },\n\n    /**\n     * Returns true if the arrays are equal. Elements will be shallowly compared by default, or they\n     * will be compared using the custom `compare` function if one is provided.\n     */\n    arraysEqual(arrA: any[], arrB: any[], compare = (a: any, b: any) => a === b) {\n        // treat `null` and `undefined` as the same\n        if (arrA == null && arrB == null) {\n            return true;\n        } else if (arrA == null || arrB == null || arrA.length !== arrB.length) {\n            return false;\n        } else {\n            return arrA.every((a, i) => compare(a, arrB[i]));\n        }\n    },\n};\n\n/**\n * Partial shallow comparison between objects using the given list of keys.\n */\nfunction _shallowCompareKeys<T>(objA: T, objB: T, keys: IKeyBlacklist<T> | IKeyWhitelist<T>) {\n    return _filterKeys(objA, objB, keys).every((key) => {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key)\n            && objA[key] === objB[key];\n    });\n}\n\n/**\n * Partial deep comparison between objects using the given list of keys.\n */\nfunction _deepCompareKeys(objA: any, objB: any, keys: string[]): boolean {\n    return keys.every((key) => {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key)\n            && Utils.deepCompareKeys(objA[key], objB[key]);\n    });\n}\n\nfunction _isSimplePrimitiveType(value: any) {\n    return typeof value === \"number\"\n        || typeof value === \"string\"\n        || typeof value === \"boolean\";\n}\n\nfunction _filterKeys<T>(objA: T, objB: T, keys: IKeyBlacklist<T> | IKeyWhitelist<T>) {\n    if (isWhitelist(keys)) {\n        return keys.include;\n    } else {\n        const keysA = Object.keys(objA);\n        const keysB = Object.keys(objB);\n\n        // merge keys from both objects into a big set for quick access\n        const keySet = _arrayToObject(keysA.concat(keysB));\n\n        // delete blacklisted keys from the key set\n        keys.exclude.forEach((key) => delete keySet[key]);\n\n        // return the remaining keys as an array\n        return Object.keys(keySet) as Array<keyof T>;\n    }\n}\n\nfunction isWhitelist<T>(keys: any): keys is IKeyWhitelist<T> {\n    return keys != null && (keys as IKeyWhitelist<T>).include != null;\n}\n\nfunction _arrayToObject(arr: any[]) {\n    return arr.reduce((obj: any, element: any) => {\n        obj[element] = true;\n        return obj;\n    }, {});\n}\n\nfunction _getUnequalKeyValues<T extends object>(\n    objA: T,\n    objB: T,\n    keys: Array<keyof T>,\n    compareFn: (objA: any, objB: any, key: keyof T) => boolean,\n) {\n    const unequalKeys = keys.filter((key) => !compareFn(objA, objB, key));\n    const unequalKeyValues = unequalKeys.map((key) => ({\n        key,\n        valueA: objA[key],\n        valueB: objB[key],\n    }));\n    return unequalKeyValues;\n}\n\nfunction _unionKeys<T extends object>(objA: T, objB: T) {\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n\n    const concatKeys = keysA.concat(keysB);\n    const keySet = _arrayToObject(concatKeys);\n\n    return Object.keys(keySet) as Array<keyof T>;\n}\n"]}