/**
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var classNames = require("classnames");
var React = require("react");
;
// tslint:enable
/**
 * Since Firefox doesn't provide a computed "font" property, we manually
 * construct it using the ordered properties that can be specifed in CSS.
 */
var CSS_FONT_PROPERTIES = [
    "font-style",
    "font-variant",
    "font-weight",
    "font-size",
    "font-family",
];
exports.Utils = {
    /**
     * Returns a clone of the ReactElement with a className that includes the
     * element's original className and any other classes passed in with variadic
     * arguments matching the `classNames` api.
     */
    assignClasses: function (elem) {
        var extendedClasses = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            extendedClasses[_i - 1] = arguments[_i];
        }
        var classes = classNames.apply(void 0, [elem.props.className].concat(extendedClasses));
        return React.cloneElement(elem, { className: classes });
    },
    /**
     * Invokes the callback `n` times, collecting the results in an array, which
     * is the return value. Similar to _.times
     */
    times: function (n, callback) {
        var result = Array(n);
        for (var index = 0; index < n; index++) {
            result[index] = callback(index);
        }
        return result;
    },
    /**
     * Takes an array of numbers, returns an array of numbers of the same length in which each
     * value is the sum of current and previous values in the input array.
     *
     * Example input:  [10, 20, 50]
     *         output: [10, 30, 80]
     */
    accumulate: function (numbers) {
        var result = [];
        var sum = 0;
        for (var _i = 0, numbers_1 = numbers; _i < numbers_1.length; _i++) {
            var num = numbers_1[_i];
            sum += num;
            result.push(sum);
        }
        return result;
    },
    /**
     * Returns traditional spreadsheet-style column names
     * e.g. (A, B, ..., Z, AA, AB, ..., ZZ, AAA, AAB, ...).
     *
     * Note that this isn't technically mathematically equivalent to base 26 since
     * there is no zero element.
     */
    toBase26Alpha: function (num) {
        var str = "";
        while (true) {
            var letter = num % 26;
            str = String.fromCharCode(65 + letter) + str;
            num = num - letter;
            if (num <= 0) {
                return str;
            }
            num = (num / 26) - 1;
        }
    },
    /**
     * Returns traditional spreadsheet-style cell names
     * e.g. (A1, B2, ..., Z44, AA1) with rows 1-indexed.
     */
    toBase26CellName: function (rowIndex, columnIndex) {
        return "" + exports.Utils.toBase26Alpha(columnIndex) + (rowIndex + 1);
    },
    /**
     * Performs the binary search algorithm to find the index of the `value`
     * parameter in a sorted list of numbers. If `value` is not in the list, the
     * index where `value` can be inserted to maintain the sort is returned.
     *
     * Unlike a typical binary search implementation, we use a `lookup`
     * callback to access the sorted list of numbers instead of an array. This
     * avoids additional storage overhead.
     *
     * We use this to, for example, find the index of a row/col given its client
     * coordinate.
     *
     * Adapted from lodash https://github.com/lodash/lodash/blob/4.11.2/lodash.js#L3579
     *
     * @param value - the query value
     * @param high - the length of the sorted list of numbers
     * @param lookup - returns the number from the list at the supplied index
     */
    binarySearch: function (value, high, lookup) {
        var low = 0;
        while (low < high) {
            var mid = Math.floor((low + high) / 2.0);
            var computed = lookup(mid);
            if (computed < value) {
                low = mid + 1;
            }
            else {
                high = mid;
            }
        }
        return high;
    },
    /**
     * Returns a copy of the array that will have a length of the supplied parameter.
     * If the array is too long, it will be truncated. If it is too short, it will be
     * filled with the suppleid `fillValue` argument.
     *
     * @param array - the `Array` to copy and adjust
     * @param length - the target length of the array
     * @param fillValue - the value to add to the array if it is too short
     */
    arrayOfLength: function (array, length, fillValue) {
        if (array.length > length) {
            return array.slice(0, length);
        }
        array = array.slice();
        while (array.length < length) {
            array.push(fillValue);
        }
        return array;
    },
    /**
     * Takes in one full array of values and one sparse array of the same
     * length and type. Returns a copy of the `defaults` array, where each
     * value is replaced with the corresponding non-null value at the same
     * index in `sparseOverrides`.
     *
     * @param defaults - the full array of default values
     * @param sparseOverrides - the sparse array of override values
     */
    assignSparseValues: function (defaults, sparseOverrides) {
        if (sparseOverrides == null || defaults.length !== sparseOverrides.length) {
            return defaults;
        }
        defaults = defaults.slice();
        for (var i = 0; i < defaults.length; i++) {
            var override = sparseOverrides[i];
            if (override != null) {
                defaults[i] = override;
            }
        }
        return defaults;
    },
    /**
     * Measures the bounds of supplied element's textContent.
     *
     * We use the computed font from the supplied element and a non-DOM canvas
     * context to measure the text.
     *
     * Returns a `TextMetrics` object.
     */
    measureElementTextContent: function (element) {
        var context = document.createElement("canvas").getContext("2d");
        var style = getComputedStyle(element, null);
        context.font = CSS_FONT_PROPERTIES.map(function (prop) { return style.getPropertyValue(prop); }).join(" ");
        return context.measureText(element.textContent);
    },
    /**
     * Given a number, returns a value that is clamped within a
     * minimum/maximum bounded range. The minimum and maximum are optional. If
     * either is missing, that extrema limit is not applied.
     *
     * Assumes max >= min.
     */
    clamp: function (value, min, max) {
        if (min != null && value < min) {
            value = min;
        }
        if (max != null && value > max) {
            value = max;
        }
        return value;
    },
    /**
     * Shallow comparison between objects. If `keys` is provided, just that subset of keys will be
     * compared; otherwise, all keys will be compared.
     */
    shallowCompareKeys: function (objA, objB, keys) {
        // treat `null` and `undefined` as the same
        if (objA == null && objB == null) {
            return true;
        }
        else if (objA == null || objB == null) {
            return false;
        }
        else if (Array.isArray(objA) || Array.isArray(objB)) {
            return false;
        }
        else if (keys != null) {
            return _shallowCompareKeys(objA, objB, keys);
        }
        else {
            // shallowly compare all keys from both objects
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            return _shallowCompareKeys(objA, objB, { include: keysA })
                && _shallowCompareKeys(objA, objB, { include: keysB });
        }
    },
    /**
     * Deep comparison between objects. If `keys` is provided, just that subset of keys will be
     * compared; otherwise, all keys will be compared.
     */
    deepCompareKeys: function (objA, objB, keys) {
        if (objA === objB) {
            return true;
        }
        else if (objA == null && objB == null) {
            // treat `null` and `undefined` as the same
            return true;
        }
        else if (objA == null || objB == null) {
            return false;
        }
        else if (Array.isArray(objA) || Array.isArray(objB)) {
            return exports.Utils.arraysEqual(objA, objB, exports.Utils.deepCompareKeys);
        }
        else if (_isSimplePrimitiveType(objA) || _isSimplePrimitiveType(objB)) {
            return objA === objB;
        }
        else if (keys != null) {
            return _deepCompareKeys(objA, objB, keys);
        }
        else if (objA.constructor !== objB.constructor) {
            return false;
        }
        else {
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA == null || keysB == null) {
                return false;
            }
            if (keysA.length === 0 && keysB.length === 0) {
                return true;
            }
            return exports.Utils.arraysEqual(keysA, keysB) && _deepCompareKeys(objA, objB, keysA);
        }
    },
    /**
     * Returns a descriptive object for each key whose values are shallowly unequal between two
     * provided objects. Useful for debugging shouldComponentUpdate.
     */
    getShallowUnequalKeyValues: function (objA, objB, keys) {
        // default param values let null values pass through, so we have to take this more thorough approach
        var definedObjA = (objA == null) ? {} : objA;
        var definedObjB = (objB == null) ? {} : objB;
        var filteredKeys = _filterKeys(definedObjA, definedObjB, keys == null ? { exclude: [] } : keys);
        return _getUnequalKeyValues(definedObjA, definedObjB, filteredKeys, function (a, b, key) { return exports.Utils.shallowCompareKeys(a, b, { include: [key] }); });
    },
    /**
     * Returns a descriptive object for each key whose values are deeply unequal between two
     * provided objects. Useful for debugging shouldComponentUpdate.
     */
    getDeepUnequalKeyValues: function (objA, objB, keys) {
        var definedObjA = (objA == null) ? {} : objA;
        var definedObjB = (objB == null) ? {} : objB;
        var filteredKeys = (keys == null) ? _unionKeys(definedObjA, definedObjB) : keys;
        return _getUnequalKeyValues(definedObjA, definedObjB, filteredKeys, function (a, b, key) { return exports.Utils.deepCompareKeys(a, b, [key]); });
    },
    /**
     * When reordering a contiguous block of rows or columns to a new index, we show a preview guide
     * at the absolute index in the original ordering but emit the new index in the reordered list.
     * This function converts an absolute "guide" index to a relative "reordered" index.
     *
     * Example: Say we want to move the first three columns two spots to the right. While we drag, a
     * vertical guide is shown to preview where we'll be dropping the columns. (In the following
     * ASCII art, `*` denotes a selected column, `·` denotes a cell border, and `|` denotes a
     * vertical guide).
     *
     *     Before mousedown:
     *     · 0 · 1 · 2 · 3 · 4 · 5 ·
     *       *   *   *
     *
     *     During mousemove two spots to the right:
     *     · 0 · 1 · 2 · 3 · 4 | 5 ·
     *       *   *   *
     *
     *     After mouseup:
     *     · 3 · 4 · 0 · 1 · 2 · 5 ·
     *               *   *   *
     *
     * Note that moving the three columns beyond index 4 effectively moves them two spots rightward.
     *
     * In this case, the inputs to this function would be:
     *     - oldIndex: 0 (the left-most index of the selected column range in the original ordering)
     *     - newIndex: 5 (the index on whose left boundary the guide appears in the original ordering)
     *     - length: 3 (the number of columns to move)
     *
     * The return value will then be 2, the left-most index of the columns in the new ordering.
     */
    guideIndexToReorderedIndex: function (oldIndex, newIndex, length) {
        if (newIndex < oldIndex) {
            return newIndex;
        }
        else if (oldIndex <= newIndex && newIndex < oldIndex + length) {
            return oldIndex;
        }
        else {
            return Math.max(0, newIndex - length);
        }
    },
    /**
     * When reordering a contiguous block of rows or columns to a new index, we show a preview guide
     * at the absolute index in the original ordering but emit the new index in the reordered list.
     * This function converts a relative "reordered"" index to an absolute "guide" index.
     *
     * For the scenario in the example above, the inputs to this function would be:
     *     - oldIndex: 0 (the left-most index of the selected column range in the original ordering)
     *     - newIndex: 2 (the left-most index of the selected column range in the new ordering)
     *     - length: 3 (the number of columns to move)
     *
     * The return value will then be 5, the index on whose left boundary the guide should appear in
     * the original ordering.
     */
    reorderedIndexToGuideIndex: function (oldIndex, newIndex, length) {
        return (newIndex <= oldIndex) ? newIndex : newIndex + length;
    },
    /**
     * Returns a copy of the provided array with the `length` contiguous elements starting at the
     * `from` index reordered to start at the `to` index.
     *
     * For example, given the array [A,B,C,D,E,F], reordering the 3 contiguous elements starting at
     * index 1 (B, C, and D) to start at index 2 would yield [A,E,B,C,D,F].
     */
    reorderArray: function (array, from, to, length) {
        if (length === void 0) { length = 1; }
        if (length === 0 || length === array.length || from === to) {
            // return an unchanged copy
            return array.slice();
        }
        if (length < 0 || length > array.length || from + length > array.length) {
            return undefined;
        }
        var before = array.slice(0, from);
        var within = array.slice(from, from + length);
        var after = array.slice(from + length);
        var result = [];
        var i = 0;
        var b = 0;
        var w = 0;
        var a = 0;
        while (i < to) {
            if (b < before.length) {
                result.push(before[b]);
                b += 1;
            }
            else {
                result.push(after[a]);
                a += 1;
            }
            i += 1;
        }
        while (w < length) {
            result.push(within[w]);
            w += 1;
            i += 1;
        }
        while (i < array.length) {
            if (b < before.length) {
                result.push(before[b]);
                b += 1;
            }
            else {
                result.push(after[a]);
                a += 1;
            }
            i += 1;
        }
        return result;
    },
    /**
     * Returns true if the mouse event was triggered by the left mouse button.
     */
    isLeftClick: function (event) {
        return event.button === 0;
    },
    /**
     * Returns true if the arrays are equal. Elements will be shallowly compared by default, or they
     * will be compared using the custom `compare` function if one is provided.
     */
    arraysEqual: function (arrA, arrB, compare) {
        if (compare === void 0) { compare = function (a, b) { return a === b; }; }
        // treat `null` and `undefined` as the same
        if (arrA == null && arrB == null) {
            return true;
        }
        else if (arrA == null || arrB == null || arrA.length !== arrB.length) {
            return false;
        }
        else {
            return arrA.every(function (a, i) { return compare(a, arrB[i]); });
        }
    },
};
/**
 * Partial shallow comparison between objects using the given list of keys.
 */
function _shallowCompareKeys(objA, objB, keys) {
    return _filterKeys(objA, objB, keys).every(function (key) {
        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key)
            && objA[key] === objB[key];
    });
}
/**
 * Partial deep comparison between objects using the given list of keys.
 */
function _deepCompareKeys(objA, objB, keys) {
    return keys.every(function (key) {
        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key)
            && exports.Utils.deepCompareKeys(objA[key], objB[key]);
    });
}
function _isSimplePrimitiveType(value) {
    return typeof value === "number"
        || typeof value === "string"
        || typeof value === "boolean";
}
function _filterKeys(objA, objB, keys) {
    if (isWhitelist(keys)) {
        return keys.include;
    }
    else {
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        // merge keys from both objects into a big set for quick access
        var keySet_1 = _arrayToObject(keysA.concat(keysB));
        // delete blacklisted keys from the key set
        keys.exclude.forEach(function (key) { return delete keySet_1[key]; });
        // return the remaining keys as an array
        return Object.keys(keySet_1);
    }
}
function isWhitelist(keys) {
    return keys != null && keys.include != null;
}
function _arrayToObject(arr) {
    return arr.reduce(function (obj, element) {
        obj[element] = true;
        return obj;
    }, {});
}
function _getUnequalKeyValues(objA, objB, keys, compareFn) {
    var unequalKeys = keys.filter(function (key) { return !compareFn(objA, objB, key); });
    var unequalKeyValues = unequalKeys.map(function (key) { return ({
        key: key,
        valueA: objA[key],
        valueB: objB[key],
    }); });
    return unequalKeyValues;
}
function _unionKeys(objA, objB) {
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    var concatKeys = keysA.concat(keysB);
    var keySet = _arrayToObject(concatKeys);
    return Object.keys(keySet);
}

//# sourceMappingURL=utils.js.map
