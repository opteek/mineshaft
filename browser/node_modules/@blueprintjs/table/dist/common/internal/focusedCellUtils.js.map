{"version":3,"sources":["../src/common/internal/focusedCellUtils.ts"],"names":[],"mappings":"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","file":"focusedCellUtils.js","sourcesContent":["/**\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { IRegion, RegionCardinality, Regions } from \"../../regions\";\nimport { ICellCoordinates, IFocusedCellCoordinates } from \"../cell\";\nimport * as Errors from \"../errors\";\n\n/**\n * Returns the proper focused cell for the given set of initial conditions.\n */\nexport function getInitialFocusedCell(\n    enableFocus: boolean,\n    focusedCellFromProps: IFocusedCellCoordinates,\n    focusedCellFromState: IFocusedCellCoordinates,\n    selectedRegions: IRegion[],\n): IFocusedCellCoordinates {\n    if (!enableFocus) {\n        return undefined;\n    } else if (focusedCellFromProps != null) {\n        // controlled mode\n        return focusedCellFromProps;\n    } else if (focusedCellFromState != null) {\n        // use the current focused cell from state\n        return focusedCellFromState;\n    } else if (selectedRegions.length > 0) {\n        // focus the top-left cell of the last selection\n        const lastIndex = selectedRegions.length - 1;\n        return {\n            ...Regions.getFocusCellCoordinatesFromRegion(selectedRegions[lastIndex]),\n            focusSelectionIndex: lastIndex,\n        };\n    } else {\n        // focus the top-left cell of the table\n        return { col: 0, row: 0, focusSelectionIndex: 0 };\n    }\n}\n\n/**\n * Returns a new cell-coordinates object that includes a focusSelectionIndex property.\n * The returned object will have the proper IFocusedCellCoordinates type.\n */\nexport function toFullCoordinates(\n    cellCoords: ICellCoordinates,\n    focusSelectionIndex: number = 0,\n): IFocusedCellCoordinates {\n    return { ...cellCoords, focusSelectionIndex };\n}\n\n/**\n * Expands an existing region to new region based on the current focused cell.\n * The focused cell is an invariant and should not move as a result of this\n * operation. This function is used, for instance, to expand a selected region\n * on shift+click.\n */\nexport function expandFocusedRegion(focusedCell: IFocusedCellCoordinates, newRegion: IRegion) {\n    switch (Regions.getRegionCardinality(newRegion)) {\n        case RegionCardinality.FULL_COLUMNS: {\n            const [indexStart, indexEnd] = getExpandedRegionIndices(focusedCell, newRegion, \"col\", \"cols\");\n            return Regions.column(indexStart, indexEnd);\n        }\n        case RegionCardinality.FULL_ROWS: {\n            const [indexStart, indexEnd] = getExpandedRegionIndices(focusedCell, newRegion, \"row\", \"rows\");\n            return Regions.row(indexStart, indexEnd);\n        }\n        case RegionCardinality.CELLS:\n            const [rowIndexStart, rowIndexEnd] = getExpandedRegionIndices(focusedCell, newRegion, \"row\", \"rows\");\n            const [colIndexStart, colIndexEnd] = getExpandedRegionIndices(focusedCell, newRegion, \"col\", \"cols\");\n            return Regions.cell(rowIndexStart, colIndexStart, rowIndexEnd, colIndexEnd);\n        default: // i.e. `case RegionCardinality.FULL_TABLE:`\n            return Regions.table();\n    }\n}\n\nfunction getExpandedRegionIndices(\n    focusedCell: IFocusedCellCoordinates,\n    newRegion: IRegion,\n    focusedCellDimension: \"row\" | \"col\",\n    regionDimension: \"rows\" | \"cols\",\n) {\n    const sourceIndex = focusedCell[focusedCellDimension];\n    const [destinationIndex, destinationIndexEnd] = newRegion[regionDimension];\n\n    if (destinationIndex !== destinationIndexEnd) {\n        if (regionDimension === \"rows\") {\n            throw new Error(Errors.TABLE_EXPAND_FOCUSED_REGION_MULTI_ROW_REGION);\n        } else if (regionDimension === \"cols\") {\n            throw new Error(Errors.TABLE_EXPAND_FOCUSED_REGION_MULTI_COLUMN_REGION);\n        }\n    }\n\n    return sourceIndex <= destinationIndex\n        ? [sourceIndex, destinationIndex]\n        : [destinationIndex, sourceIndex];\n}\n"]}