{"version":3,"sources":["../src/common/requestIdleCallback.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;AAEH;;GAEG;AACH,IAAM,kBAAkB,GAAG,8BAA8B,CAAC;AAI1D;;GAEG;AACH,IAAM,UAAU,GAAG;IACf,SAAS,EAAE,EAAgB;IAC3B,SAAS,EAAE,KAAK;CACnB,CAAC;AAEF,IAAM,UAAU,GAAG,UAAC,KAAmB;IACnC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,kBAAkB,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC;IACV,CAAC;IAED,UAAU,CAAC,SAAS,GAAG,KAAK,CAAC;IAE7B,IAAI,QAAQ,GAAG,IAAI,CAAC;IACpB,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAClC,QAAQ,GAAG,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IAC5C,CAAC;IAED,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAClC,gBAAgB,EAAE,CAAC;IACvB,CAAC;IAED,8DAA8D;IAC9D,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACX,QAAQ,EAAE,CAAC;IACf,CAAC;AACL,CAAC,CAAC;AAEF,sEAAsE;AACtE,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC;IAChC,EAAE,CAAC,CAAC,MAAM,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;IAC1D,CAAC;AACL,CAAC;AAED,IAAM,gBAAgB,GAAG;IACrB,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;QACvB,MAAM,CAAC;IACX,CAAC;IACD,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC;IAE5B;;;;;;;;;;;;OAYG;IACH,qBAAqB,CAAC;QAClB,qBAAqB,CAAC;YAClB,WAAW,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;;;;;;;GASG;AACU,QAAA,mBAAmB,GAAG,UAAC,QAAkB;IAClD,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpC,gBAAgB,EAAE,CAAC;AACvB,CAAC,CAAC","file":"requestIdleCallback.js","sourcesContent":["/**\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\n/**\n * Event name for `postMessage`\n */\nconst MESSAGE_EVENT_DATA = \"blueprint-table-post-message\";\n\ntype Callback = () => void;\n\n/**\n * Object that holds state for managing idle callbacks\n */\nconst IDLE_STATE = {\n    callbacks: [] as Callback[],\n    triggered: false,\n};\n\nconst handleIdle = (event: MessageEvent) => {\n    if (event.source !== window || event.data !== MESSAGE_EVENT_DATA) {\n       return;\n    }\n\n    IDLE_STATE.triggered = false;\n\n    let callback = null;\n    if (IDLE_STATE.callbacks.length > 0) {\n        callback = IDLE_STATE.callbacks.shift();\n    }\n\n    if (IDLE_STATE.callbacks.length > 0) {\n        triggerIdleFrame();\n    }\n\n    // finally, invoke the callback. exceptions will be propagated\n    if (callback) {\n        callback();\n    }\n};\n\n// check for window since we might be in a headless server environment\nif (typeof window !== \"undefined\") {\n    if (window.addEventListener != null) {\n        window.addEventListener(\"message\", handleIdle, false);\n    }\n}\n\nconst triggerIdleFrame = () => {\n    if (IDLE_STATE.triggered) {\n        return;\n    }\n    IDLE_STATE.triggered = true;\n\n    /**\n     * This is the magic that will wait for the browser to be \"idle\" before\n     * invoking the callback.\n     *\n     * First, we use nested calls to `requestAnimationFrame` which will cause\n     * the inner callback to be invoked on the NEXT FRAME.\n     *\n     * Then, we call to `postMessage` to invoke the `handleIdle` method only\n     * once the current stack frame is empty.\n     *\n     * With this approach, the idle callback will be invoked at most once per\n     * frame and only after the stack frame is empty.\n     */\n    requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n            postMessage(MESSAGE_EVENT_DATA, \"*\");\n        });\n    });\n};\n\n/**\n * Invokes the provided callback on the next available frame after the stack\n * frame is empty.\n *\n * At most one callback per frame is invoked, and the callback may be delayed\n * multiple frames until the page is idle.\n *\n * TODO: return a token from this method that allows you to cancel the callback\n * (otherwise the callback list may increase without bound).\n */\nexport const requestIdleCallback = (callback: Callback) => {\n    IDLE_STATE.callbacks.push(callback);\n    triggerIdleFrame();\n};\n"]}