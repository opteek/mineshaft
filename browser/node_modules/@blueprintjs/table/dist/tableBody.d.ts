/// <reference types="react" />
/**
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
import { IProps } from "@blueprintjs/core";
import * as React from "react";
import { ICellRenderer } from "./cell/cell";
import { Grid, IColumnIndices, IRowIndices } from "./common/grid";
import { Rect } from "./common/rect";
import { RenderMode } from "./common/renderMode";
import { IContextMenuRenderer } from "./interactions/menus";
import { ISelectableProps } from "./interactions/selectable";
import { ILocator } from "./locator";
export interface ITableBodyProps extends ISelectableProps, IRowIndices, IColumnIndices, IProps {
    /**
     * A cell renderer for the cells in the body.
     */
    cellRenderer: ICellRenderer;
    /**
     * The grid computes sizes of cells, rows, or columns from the
     * configurable `columnWidths` and `rowHeights`.
     */
    grid: Grid;
    /**
     * If true, all `Cell`s render their loading state except for those who have
     * their `loading` prop explicitly set to false.
     */
    loading: boolean;
    /**
     * Locates the row/column/cell given a mouse event.
     */
    locator: ILocator;
    /**
     * The number of columns to freeze to the left side of the table, counting from the leftmost column.
     */
    numFrozenColumns?: number;
    /**
     * The number of rows to freeze to the top of the table, counting from the topmost row.
     */
    numFrozenRows?: number;
    /**
     * An optional callback invoked when all cells in view have completely rendered.
     */
    onCompleteRender?: () => void;
    /**
     * The `Rect` bounds of the visible viewport with respect to its parent
     * scrollable pane.
     */
    viewportRect: Rect;
    /**
     * An optional callback for displaying a context menu when right-clicking
     * on the table body. The callback is supplied with an `IMenuContext`
     * containing the `IRegion`s of interest.
     */
    renderBodyContextMenu?: IContextMenuRenderer;
    /**
     * Dictates how cells should be rendered. Supported modes are:
     * - `RenderMode.BATCH`: renders cells in batches to improve
     *   performance
     * - `RenderMode.NONE`: renders cells synchronously all at once
     * @default RenderMode.BATCH
     */
    renderMode?: RenderMode;
}
export declare class TableBody extends React.Component<ITableBodyProps, {}> {
    static defaultProps: {
        loading: boolean;
        renderMode: RenderMode;
    };
    /**
     * Returns the array of class names that must be applied to each table
     * cell so that we can locate any cell based on its coordinate.
     */
    static cellClassNames(rowIndex: number, columnIndex: number): string[];
    private static cellReactKey(rowIndex, columnIndex);
    private activationCell;
    private batcher;
    private isRenderingBatchedCells;
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: ITableBodyProps): boolean;
    componentWillUpdate(nextProps?: ITableBodyProps): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    renderContextMenu: (e: React.MouseEvent<HTMLElement>) => JSX.Element;
    private renderBatchedCells();
    private renderAllCells();
    private renderNewCell;
    private renderCell;
    private handleSelectionEnd;
    private locateClick;
    private locateDrag;
    private maybeInvokeOnCompleteRender();
}
