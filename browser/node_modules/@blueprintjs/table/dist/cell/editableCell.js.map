{"version":3,"sources":["../src/cell/editableCell.tsx"],"names":[],"mappings":"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","file":"editableCell.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { EditableText, Utils as CoreUtils } from \"@blueprintjs/core\";\n\nimport * as Classes from \"../common/classes\";\nimport { Utils } from \"../common/utils\";\nimport { Draggable } from \"../interactions/draggable\";\nimport { Cell, ICellProps } from \"./cell\";\n\nexport interface IEditableCellProps extends ICellProps {\n    /**\n     * The value displayed in the text box. Be sure to update this value when\n     * rendering this component after a confirmed change.\n     */\n    value?: string;\n\n    /**\n     * A listener that is triggered if the user cancels the edit. This is\n     * important to listen to if you are doing anything with `onChange` events,\n     * since you'll likely want to revert whatever changes you made. The\n     * callback will also receive the row index and column index if they were\n     * originally provided via props.\n     */\n    onCancel?: (value: string, rowIndex?: number, columnIndex?: number) => void;\n\n    /**\n     * A listener that is triggered as soon as the editable name is modified.\n     * This can be due, for example, to keyboard input or the clipboard. The\n     * callback will also receive the row index and column index if they were\n     * originally provided via props.\n     */\n    onChange?: (value: string, rowIndex?: number, columnIndex?: number) => void;\n\n    /**\n     * A listener that is triggered once the editing is confirmed. This is\n     * usually due to the <code>return</code> (or <code>enter</code>) key press.\n     * The callback will also receive the row index and column index if they\n     * were originally provided via props.\n     */\n    onConfirm?: (value: string, rowIndex?: number, columnIndex?: number) => void;\n}\n\nexport interface IEditableCellState {\n    isEditing?: boolean;\n    savedValue?: string;\n    dirtyValue?: string;\n}\n\nexport class EditableCell extends React.Component<IEditableCellProps, IEditableCellState> {\n    public constructor(props: IEditableCellProps, context?: any) {\n        super(props, context);\n        this.state = {\n            isEditing: false,\n            savedValue: props.value,\n        };\n    }\n\n    public shouldComponentUpdate(nextProps: IEditableCellProps, nextState: IEditableCellState) {\n        return !Utils.shallowCompareKeys(this.props, nextProps, { exclude: [\"style\"] })\n            || !Utils.shallowCompareKeys(this.state, nextState)\n            || !Utils.deepCompareKeys(this.props, nextProps, [\"style\"]);\n    }\n\n    public componentWillReceiveProps(nextProps: IEditableCellProps) {\n        const { value } = nextProps;\n        this.setState({ savedValue: value, dirtyValue: value });\n    }\n\n    public render() {\n        const {\n            onCancel,\n            onChange,\n            onConfirm,\n            ...spreadableProps,\n        } = this.props;\n\n        const { isEditing, dirtyValue, savedValue } = this.state;\n        const interactive = spreadableProps.interactive || isEditing;\n\n        return (\n            <Cell {...spreadableProps} truncated={false} interactive={interactive}>\n                <Draggable\n                    onActivate={this.handleCellActivate}\n                    onDoubleClick={this.handleCellDoubleClick}\n                    preventDefault={!interactive}\n                    stopPropagation={interactive}\n                >\n                    <EditableText\n                        className={Classes.TABLE_EDITABLE_NAME}\n                        intent={spreadableProps.intent}\n                        minWidth={null}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleChange}\n                        onConfirm={this.handleConfirm}\n                        onEdit={this.handleEdit}\n                        placeholder=\"\"\n                        selectAllOnFocus={true}\n                        value={isEditing ? dirtyValue : savedValue}\n                    />\n                </Draggable>\n            </Cell>\n        );\n    }\n\n    private handleEdit = () => {\n        this.setState({ isEditing: true, dirtyValue: this.state.savedValue });\n    }\n\n    private handleCancel = (value: string) => {\n        // don't strictly need to clear the dirtyValue, but it's better hygiene\n        this.setState({ isEditing: false, dirtyValue: undefined });\n        this.invokeCallback(this.props.onCancel, value);\n    }\n\n    private handleChange = (value: string) => {\n        this.setState({ dirtyValue: value });\n        this.invokeCallback(this.props.onChange, value);\n    }\n\n    private handleConfirm = (value: string) => {\n        this.setState({ isEditing: false, savedValue: value, dirtyValue: undefined });\n        this.invokeCallback(this.props.onConfirm, value);\n    }\n\n    private invokeCallback(callback: (value: string, rowIndex?: number, columnIndex?: number) => void, value: string) {\n        // pass through the row and column indices if they were provided as props by the consumer\n        const { rowIndex, columnIndex } = this.props;\n        CoreUtils.safeInvoke(callback, value, rowIndex, columnIndex);\n    }\n\n    private handleCellActivate = (_event: MouseEvent) => {\n        // Cancel edit of active cell when clicking away\n        if (!this.state.isEditing && document.activeElement instanceof HTMLElement && document.activeElement.blur) {\n            document.activeElement.blur();\n        }\n        return true;\n    }\n\n    private handleCellDoubleClick = (_event: MouseEvent) => {\n        const cellElement = ReactDOM.findDOMNode(this) as HTMLElement;\n        if (cellElement == null) {\n            return;\n        }\n\n        const focusable = (cellElement.querySelector(\".pt-editable-text\") as HTMLElement);\n        if (focusable.focus != null) {\n            focusable.focus();\n        }\n    }\n}\n"]}