{"version":3,"sources":["../src/cell/cell.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,uCAAyC;AACzC,6BAA+B;AAC/B,2CAA6C;AAC7C,yCAAwC;AAExC,0CAAiF;AAEjF,6DAA4D;AAuD/C,QAAA,iBAAiB,GAAG,cAAM,OAAA,oBAAC,IAAI,OAAG,EAAR,CAAQ,CAAC;AAEhD;IAA0B,gCAA+B;IAAzD;;IAqDA,CAAC;IA/CU,oCAAqB,GAA5B,UAA6B,SAAqB;QAC9C,uFAAuF;QACvF,MAAM,CAAC,CAAC,aAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,OAAO,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC;eACxE,CAAC,aAAK,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;IACrE,CAAC;IAEM,qBAAM,GAAb;QACU,IAAA,eAA6F,EAA3F,gBAAK,EAAE,kBAAM,EAAE,4BAAW,EAAE,oBAAO,EAAE,oBAAO,EAAE,wBAAS,EAAE,wBAAS,EAAE,sBAAQ,CAAgB;QAEpG,IAAM,OAAO,GAAG,UAAU,CACtB,OAAO,CAAC,UAAU,EAClB,cAAW,CAAC,WAAW,CAAC,MAAM,CAAC;YAE3B,GAAC,OAAO,CAAC,sBAAsB,IAAG,WAAW;YAC7C,GAAC,cAAW,CAAC,OAAO,IAAG,OAAO;YAC9B,GAAC,OAAO,CAAC,oBAAoB,IAAG,SAAS;iBAE7C,SAAS,CACZ,CAAC;QAEF,IAAM,WAAW,GAAG,UAAU;YAEtB,GAAC,OAAO,CAAC,oBAAoB,IAAG,SAAS;YACzC,GAAC,OAAO,CAAC,kBAAkB,IAAG,CAAC,QAAQ;gBAE9C,CAAC;QAEF,4FAA4F;QAC5F,sFAAsF;QACtF,IAAM,gBAAgB,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAC,KAAK;YACnE,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC/C,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,KAAgC,EACtD,EAAC,gBAAgB,EAAE,KAAK,CAAC,MAAM,EAAE,eAAe,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;YACxE,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,IAAM,OAAO,GAAG,6BAAK,SAAS,EAAE,WAAW,IAAG,gBAAgB,CAAO,CAAC;QAEtE,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO;YACjD,oBAAC,iCAAe,IAAC,OAAO,EAAE,OAAO,EAAE,cAAc,EAAE,IAAI,IAClD,OAAO,CACM,CAChB,CACT,CAAC;;IACN,CAAC;IACL,WAAC;AAAD,CArDA,AAqDC,CArDyB,KAAK,CAAC,SAAS;AACvB,iBAAY,GAAG;IACzB,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,KAAK;CAClB,CAAC;AAJO,oBAAI","file":"cell.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Utils } from \"../common/utils\";\n\nimport { Classes as CoreClasses, IIntentProps, IProps } from \"@blueprintjs/core\";\n\nimport { LoadableContent } from \"../common/loadableContent\";\n\nexport interface ICellProps extends IIntentProps, IProps {\n    key?: string;\n\n    style?: React.CSSProperties;\n\n    /**\n     * The column index of the cell. If provided, this will be passed as an argument to any callbacks\n     * when they are invoked.\n     */\n    columnIndex?: number;\n\n    /**\n     * If `true`, the cell will be rendered above overlay layers to enable mouse\n     * interactions within the cell.\n     * @default false\n     */\n    interactive?: boolean;\n\n    /**\n     * An optional native tooltip that is displayed on hover.\n     * If `true`, content will be replaced with a fixed-height skeleton.\n     * @default false\n     */\n    loading?: boolean;\n\n    /**\n     * The row index of the cell. If provided, this will be passed as an argument to any callbacks\n     * when they are invoked.\n     */\n    rowIndex?: number;\n\n    /**\n     * An optional native tooltip that is displayed on hover.\n     */\n    tooltip?: string;\n\n    /**\n     * If `true`, the cell contents will be wrapped in a `div` with\n     * styling that will prevent the content from overflowing the cell.\n     * @default true\n     */\n    truncated?: boolean;\n\n    /**\n     * If `true`, the cell contents will be wrapped in a `div` with\n     * styling that will cause text to wrap, rather than displaying it on a single line.\n     * @default false\n     */\n    wrapText?: boolean;\n}\n\nexport type ICellRenderer = (rowIndex: number, columnIndex: number) => React.ReactElement<ICellProps>;\n\nexport const emptyCellRenderer = () => <Cell />;\n\nexport class Cell extends React.Component<ICellProps, {}> {\n    public static defaultProps = {\n        truncated: true,\n        wrapText: false,\n    };\n\n    public shouldComponentUpdate(nextProps: ICellProps) {\n        // deeply compare \"style,\" because a new but identical object might have been provided.\n        return !Utils.shallowCompareKeys(this.props, nextProps, { exclude: [\"style\"] })\n            || !Utils.deepCompareKeys(this.props.style, nextProps.style);\n    }\n\n    public render() {\n        const { style, intent, interactive, loading, tooltip, truncated, className, wrapText } = this.props;\n\n        const classes = classNames(\n            Classes.TABLE_CELL,\n            CoreClasses.intentClass(intent),\n            {\n                [Classes.TABLE_CELL_INTERACTIVE]: interactive,\n                [CoreClasses.LOADING]: loading,\n                [Classes.TABLE_TRUNCATED_CELL]: truncated,\n            },\n            className,\n        );\n\n        const textClasses = classNames(\n            {\n                [Classes.TABLE_TRUNCATED_TEXT]: truncated,\n                [Classes.TABLE_NO_WRAP_TEXT]: !wrapText,\n            },\n        );\n\n        // add width and height to the children, for use in shouldComponentUpdate in truncatedFormat\n        // note: these aren't actually used by truncated format, just in shouldComponentUpdate\n        const modifiedChildren = React.Children.map(this.props.children, (child) => {\n            if (style != null && React.isValidElement(child)) {\n                return React.cloneElement(child as React.ReactElement<any>,\n                    {parentCellHeight: style.height, parentCellWidth: style.width});\n            }\n            return child;\n        });\n\n        const content = <div className={textClasses}>{modifiedChildren}</div>;\n\n        return (\n            <div className={classes} style={style} title={tooltip}>\n                <LoadableContent loading={loading} variableLength={true}>\n                    {content}\n                </LoadableContent>\n            </div>\n        );\n    }\n}\n"]}