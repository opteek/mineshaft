{"version":3,"sources":["../src/cell/formats/truncatedFormat.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,0CAAoE;AACpE,uCAAyC;AACzC,kDAAoD;AACpD,6BAA+B;AAE/B,8CAAgD;AAEhD,6EAA6E;AAC7E,mDAAmD;AACnD,yFAAyF;AACzF,sCAAsC;AACtC,IAAM,uBAAuB,GAAG,EAAE,CAAC;AAEnC,IAAY,oBAIX;AAJD,WAAY,oBAAoB;IAC5B,mEAAM,CAAA;IACN,iEAAK,CAAA;IACL,mFAAc,CAAA;AAClB,CAAC,EAJW,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAI/B;AA6DD,IAAa,eAAe;IAAS,2CAA6D;IADlG;QAAA,qEAuHC;QA7GU,WAAK,GAA0B,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;QAqDrD,yBAAmB,GAAG,UAAC,GAAmB,IAAK,OAAA,KAAI,CAAC,UAAU,GAAG,GAAG,EAArB,CAAqB,CAAC;;IAwDjF,CAAC;IAzGU,gCAAM,GAAb;QACU,IAAA,eAA2F,EAAzF,sBAAQ,EAAE,sCAAgB,EAAE,8BAAY,EAAE,kCAAc,EAAE,sCAAgB,CAAgB;QAClG,IAAM,OAAO,GAAG,EAAE,GAAG,QAAQ,CAAC;QAE9B,IAAI,WAAW,GAAG,OAAO,CAAC;QAC1B,EAAE,CAAC,CAAC,CAAC,gBAAgB,IAAI,cAAc,GAAG,CAAC,IAAI,WAAW,CAAC,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC;YACjF,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,cAAc,CAAC,GAAG,gBAAgB,CAAC;QAC9E,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClC,IAAM,cAAc,GAAG,UAAU,CAC7B,OAAO,CAAC,uBAAuB,EAC/B,YAAY,GAAG,OAAO,CAAC,4BAA4B,GAAG,OAAO,CAAC,+BAA+B,CAChG,CAAC;YACF,IAAM,cAAc,GAAG,6BAAK,SAAS,EAAE,cAAc,IAAG,QAAQ,CAAO,CAAC;YACxE,IAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,sBAAsB,CAAC,CAAC;YACnF,IAAM,WAAW,GAAG,CAAC;oBACjB,UAAU,EAAE,UAAU;oBACtB,EAAE,EAAE,QAAQ;iBACf,CAAC,CAAC;YAEH,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,SAAS;gBACrB,6BAAK,SAAS,EAAE,OAAO,CAAC,qBAAqB,EAAE,GAAG,EAAE,IAAI,CAAC,mBAAmB,IAAG,WAAW,CAAO;gBACjG,oBAAC,cAAO,IACJ,SAAS,EAAE,OAAO,CAAC,8BAA8B,EACjD,aAAa,EAAE,EAAE,WAAW,aAAA,EAAE,EAC9B,OAAO,EAAE,cAAc,EACvB,QAAQ,EAAE,eAAQ,CAAC,MAAM,EACzB,wBAAwB,EAAE,IAAI;oBAE9B,oBAAC,WAAI,IAAC,QAAQ,EAAC,MAAM,GAAG,CAClB,CACR,CACT,CAAC;QACN,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,2BAA2B,CAAC,CAAC;YACxF,MAAM,CAAC,6BAAK,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,mBAAmB,IAAG,WAAW,CAAO,CAAC;QACzF,CAAC;IACL,CAAC;IAEM,2CAAiB,GAAxB;QACI,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAEM,4CAAkB,GAAzB;QACI,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAIO,2CAAiB,GAAzB,UAA0B,OAAe;QAC/B,IAAA,eAA8D,EAA5D,sCAAgB,EAAE,4BAAW,EAAE,kCAAc,CAAgB;QAErE,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAClB,KAAK,oBAAoB,CAAC,MAAM;gBAC5B,MAAM,CAAC,IAAI,CAAC;YAChB,KAAK,oBAAoB,CAAC,KAAK;gBAC3B,MAAM,CAAC,KAAK,CAAC;YACjB,KAAK,oBAAoB,CAAC,cAAc;gBACpC,MAAM,CAAC,gBAAgB;sBACjB,IAAI,CAAC,KAAK,CAAC,WAAW;sBACtB,CAAC,cAAc,GAAG,CAAC,IAAI,OAAO,CAAC,MAAM,GAAG,cAAc,CAAC,CAAC;YAClE;gBACI,MAAM,CAAC,KAAK,CAAC;QACrB,CAAC;IACL,CAAC;IAEO,4CAAkB,GAA1B;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,oBAAoB,CAAC,cAAc,CAAC,CAAC,CAAC;YACjG,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC;YACtC,MAAM,CAAC;QACX,CAAC;QAEO,IAAA,oCAAW,CAAgB;QAEnC,gEAAgE;QAC1D,IAAA,oBAKa,EAJf,iCAA6B,EAC7B,+BAA2B,EAC3B,qCAAiC,EACjC,6BAAyB,CACT;QAEpB,0EAA0E;QAC1E,qEAAqE;QACrE,+DAA+D;QAC/D,IAAM,kBAAkB,GAAG,WAAW;cAChC,YAAY,GAAG,uBAAuB;cACtC,YAAY,CAAC;QAEnB,+EAA+E;QAC/E,+EAA+E;QAC/E,8EAA8E;QAC9E,yDAAyD;QACzD,IAAM,cAAc,GAAG,CAAC,WAAW,IAAI,kBAAkB,KAAK,cAAc,CAAC;eACtE,kBAAkB,GAAG,cAAc;eACnC,mBAAmB,GAAG,eAAe,CAAC;QAE7C,IAAI,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC;IACnD,CAAC;IACL,sBAAC;AAAD,CAtHA,AAsHC,CAtHoC,KAAK,CAAC,SAAS,GAsHnD;AArHiB,4BAAY,GAA0B;IAChD,gBAAgB,EAAE,IAAI;IACtB,YAAY,EAAE,KAAK;IACnB,WAAW,EAAE,oBAAoB,CAAC,cAAc;IAChD,cAAc,EAAE,EAAE;IAClB,gBAAgB,EAAE,KAAK;CAC1B,CAAC;AAPO,eAAe;IAD3B,UAAU;GACE,eAAe,CAsH3B;AAtHY,0CAAe","file":"truncatedFormat.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { Icon, IProps, Popover, Position } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\n\n// amount in pixels that the content div width changes when truncated vs when\n// not truncated. Note: could be modified by styles\n// Note 2: this doesn't come from the width of the popover element, but the \"right\" style\n// on the div, which comes from styles\nconst CONTENT_DIV_WIDTH_DELTA = 25;\n\nexport enum TruncatedPopoverMode {\n    ALWAYS,\n    NEVER,\n    WHEN_TRUNCATED,\n}\n\nexport interface ITruncatedFormatProps extends IProps {\n    children?: string;\n\n    /**\n     * Should the component keep track of the truncation state of the string content. If true, the\n     * value of `truncateLength` is ignored. When combined with a `showPopover` value of\n     * `WHEN_TRUNCATED`, popovers will only render when necessary.\n     * @default true;\n     */\n    detectTruncation?: boolean;\n\n    /**\n     * Height of the parent cell. Used by shouldComponentUpdate only\n     */\n    parentCellHeight?: string;\n\n    /**\n     * Width of the parent cell. Used by shouldComponentUpdate only\n     */\n    parentCellWidth?: string;\n\n    /**\n     * Sets the popover content style to `white-space: pre` if `true` or\n     * `white-space: normal` if `false`.\n     * @default false\n     */\n    preformatted?: boolean;\n\n    /**\n     * Configures when the popover is shown with the `TruncatedPopoverMode` enum.\n     *\n     * The enum values are:\n     * - `ALWAYS`: show the popover (default).\n     * - `NEVER`: don't show the popover.\n     * - `WHEN_TRUNCATED`: show the popover only when the text is truncated.\n     * @default WHEN_TRUNCATED\n     */\n    showPopover?: TruncatedPopoverMode;\n\n    /**\n     * Number of characters that are displayed before being truncated and appended with the\n     * `truncationSuffix` prop. A value of 0 will disable truncation. This prop is ignored if\n     * `detectTruncation` is `true`.\n     * @default 80\n     */\n    truncateLength?: number;\n\n    /**\n     * The string that is appended to the display string if it is truncated.\n     * @default \"...\"\n     */\n    truncationSuffix?: string;\n}\n\nexport interface ITruncatedFormatState {\n    isTruncated: boolean;\n}\n\n@PureRender\nexport class TruncatedFormat extends React.Component<ITruncatedFormatProps, ITruncatedFormatState> {\n    public static defaultProps: ITruncatedFormatProps = {\n        detectTruncation: true,\n        preformatted: false,\n        showPopover: TruncatedPopoverMode.WHEN_TRUNCATED,\n        truncateLength: 80,\n        truncationSuffix: \"...\",\n    };\n\n    public state: ITruncatedFormatState = { isTruncated: false };\n\n    private contentDiv: HTMLDivElement;\n\n    public render() {\n        const { children, detectTruncation, preformatted, truncateLength, truncationSuffix } = this.props;\n        const content = \"\" + children;\n\n        let cellContent = content;\n        if (!detectTruncation && truncateLength > 0 && cellContent.length > truncateLength) {\n            cellContent = cellContent.substring(0, truncateLength) + truncationSuffix;\n        }\n\n        if (this.shouldShowPopover(content)) {\n            const popoverClasses = classNames(\n                Classes.TABLE_TRUNCATED_POPOVER,\n                preformatted ? Classes.TABLE_POPOVER_WHITESPACE_PRE : Classes.TABLE_POPOVER_WHITESPACE_NORMAL,\n            );\n            const popoverContent = <div className={popoverClasses}>{children}</div>;\n            const className = classNames(this.props.className, Classes.TABLE_TRUNCATED_FORMAT);\n            const constraints = [{\n                attachment: \"together\",\n                to: \"window\",\n            }];\n\n            return (\n                <div className={className}>\n                    <div className={Classes.TABLE_TRUNCATED_VALUE} ref={this.handleContentDivRef}>{cellContent}</div>\n                    <Popover\n                        className={Classes.TABLE_TRUNCATED_POPOVER_TARGET}\n                        tetherOptions={{ constraints }}\n                        content={popoverContent}\n                        position={Position.BOTTOM}\n                        useSmartArrowPositioning={true}\n                    >\n                        <Icon iconName=\"more\" />\n                    </Popover>\n                </div>\n            );\n        } else {\n            const className = classNames(this.props.className, Classes.TABLE_TRUNCATED_FORMAT_TEXT);\n            return <div className={className} ref={this.handleContentDivRef}>{cellContent}</div>;\n        }\n    }\n\n    public componentDidMount() {\n        this.setTruncationState();\n    }\n\n    public componentDidUpdate() {\n        this.setTruncationState();\n    }\n\n    private handleContentDivRef = (ref: HTMLDivElement) => this.contentDiv = ref;\n\n    private shouldShowPopover(content: string) {\n        const { detectTruncation, showPopover, truncateLength } = this.props;\n\n        switch (showPopover) {\n            case TruncatedPopoverMode.ALWAYS:\n                return true;\n            case TruncatedPopoverMode.NEVER:\n                return false;\n            case TruncatedPopoverMode.WHEN_TRUNCATED:\n                return detectTruncation\n                    ? this.state.isTruncated\n                    : (truncateLength > 0 && content.length > truncateLength);\n            default:\n                return false;\n        }\n    }\n\n    private setTruncationState() {\n        if (!this.props.detectTruncation || this.props.showPopover !== TruncatedPopoverMode.WHEN_TRUNCATED) {\n            return;\n        }\n\n        if (this.contentDiv === undefined) {\n            this.setState({ isTruncated: false });\n            return;\n        }\n\n        const { isTruncated } = this.state;\n\n        // take all measurements at once to avoid excessive DOM reflows.\n        const {\n            clientHeight: containerHeight,\n            clientWidth: containerWidth,\n            scrollHeight: actualContentHeight,\n            scrollWidth: contentWidth,\n        } = this.contentDiv;\n\n        // if the content is truncated, then a popover handle will be present as a\n        // sibling of the content. we don't want to consider that handle when\n        // calculating the width of the actual content, so subtract it.\n        const actualContentWidth = isTruncated\n            ? contentWidth - CONTENT_DIV_WIDTH_DELTA\n            : contentWidth;\n\n        // we of course truncate the content if it doesn't fit in the container. but we\n        // also aggressively truncate if they're the same size with truncation enabled;\n        // this addresses browser-crashing stack-overflow bugs at various zoom levels.\n        // (see: https://github.com/palantir/blueprint/pull/1519)\n        const shouldTruncate = (isTruncated && actualContentWidth === containerWidth)\n            || actualContentWidth > containerWidth\n            || actualContentHeight > containerHeight;\n\n        this.setState({ isTruncated: shouldTruncate });\n    }\n}\n"]}