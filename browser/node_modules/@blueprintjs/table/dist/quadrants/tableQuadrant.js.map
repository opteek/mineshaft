{"version":3,"sources":["../src/quadrants/tableQuadrant.tsx"],"names":[],"mappings":"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","file":"tableQuadrant.js","sourcesContent":["/**\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { AbstractComponent, IProps } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../common/classes\";\nimport * as Errors from \"../common/errors\";\nimport { Grid } from \"../common/grid\";\n\nexport enum QuadrantType {\n    /**\n     * The main quadrant beneath any frozen rows or columns.\n     */\n    MAIN,\n\n    /**\n     * The top quadrant, containing column headers and frozen rows.\n     */\n    TOP,\n\n    /**\n     * The left quadrant, containing row headers and frozen columns.\n     */\n    LEFT,\n\n    /**\n     * The top-left quadrant, containing the headers and cells common to both the frozen columns and\n     * frozen rows.\n     */\n    TOP_LEFT,\n}\n\nexport interface ITableQuadrantProps extends IProps {\n    /**\n     * A callback that receives a `ref` to the quadrant's body-wrapping element. Will need to be\n     * provided only for the MAIN quadrant, because that quadrant contains the main table body.\n     */\n    bodyRef?: React.Ref<HTMLElement>;\n\n    /**\n     * The grid computes sizes of cells, rows, or columns from the\n     * configurable `columnWidths` and `rowHeights`.\n     */\n    grid: Grid;\n\n    /**\n     * If `false`, hides the row headers and settings menu.\n     * @default true\n     */\n    isRowHeaderShown?: boolean;\n\n    /**\n     * An optional callback invoked when the quadrant is scrolled via the scrollbar OR the trackpad/mouse wheel.\n     * This callback really only makes sense for the MAIN quadrant, because that's the only quadrant whose\n     * scrollbar is visible. Other quadrants should simply provide an `onWheel` callback.\n     */\n    onScroll?: React.EventHandler<React.UIEvent<HTMLDivElement>>;\n\n    /**\n     * An optional callback invoked when the quadrant is scrolled via the trackpad/mouse wheel. This\n     * callback should be provided for all quadrant types except MAIN, which should provide the more\n     * generic `onScroll` callback.\n     */\n    onWheel?: React.EventHandler<React.WheelEvent<HTMLDivElement>>;\n\n    /**\n     * A callback that receives a `ref` to the quadrant's outermost element.\n     */\n    quadrantRef?: React.Ref<HTMLElement>;\n\n    /**\n     * The quadrant type. Informs the values of the parameters that will be passed to the\n     * `render...` callbacks, assuming an expected stacking order of the four quadrants.\n     */\n    quadrantType: QuadrantType;\n\n    /**\n     * A callback that renders the table menu (the rectangle in the top-left corner).\n     */\n    renderMenu?: () => JSX.Element;\n\n    /**\n     * A callback that renders either all of or just the frozen section of the column header.\n     */\n    renderColumnHeader?: (showFrozenColumnsOnly?: boolean) => JSX.Element;\n\n    /**\n     * A callback that renders either all of or just the frozen section of the row header.\n     */\n    renderRowHeader?: (showFrozenRowsOnly?: boolean) => JSX.Element;\n\n    /**\n     * A callback that renders either all of or just frozen sections of the table body.\n     */\n    renderBody: (\n        quadrantType: QuadrantType,\n        showFrozenRowsOnly?: boolean,\n        showFrozenColumnsOnly?: boolean,\n    ) => JSX.Element;\n\n    /**\n     * A callback that receives a `ref` to the quadrant's scroll-container element.\n     */\n    scrollContainerRef: React.Ref<HTMLElement>;\n\n    /**\n     * CSS styles to apply to the quadrant's outermost element.\n     */\n    style?: React.CSSProperties;\n}\n\nexport class TableQuadrant extends AbstractComponent<ITableQuadrantProps, {}> {\n    // we want the user to explicitly pass a quadrantType. define defaultProps as a Partial to avoid\n    // declaring that and other required props here.\n    public static defaultProps: Partial<ITableQuadrantProps> & object = {\n        isRowHeaderShown: true,\n    };\n\n    public render() {\n        const { isRowHeaderShown, quadrantType } = this.props;\n\n        const showFrozenRowsOnly = quadrantType === QuadrantType.TOP || quadrantType === QuadrantType.TOP_LEFT;\n        const showFrozenColumnsOnly = quadrantType === QuadrantType.LEFT || quadrantType === QuadrantType.TOP_LEFT;\n\n        const className = classNames(Classes.TABLE_QUADRANT, this.getQuadrantCssClass(), this.props.className);\n\n        const maybeMenu = isRowHeaderShown ? this.props.renderMenu() : undefined;\n        const maybeRowHeader = isRowHeaderShown ? this.props.renderRowHeader(showFrozenRowsOnly) : undefined;\n        const columnHeader = this.props.renderColumnHeader(showFrozenColumnsOnly);\n\n        // need to set bottom container size to prevent overlay clipping on scroll\n        const bottomContainerStyle = {\n            height: this.props.grid.getHeight(),\n            width: this.props.grid.getWidth(),\n        };\n\n        return (\n            <div className={className} style={this.props.style} ref={this.props.quadrantRef}>\n                <div\n                    className={Classes.TABLE_QUADRANT_SCROLL_CONTAINER}\n                    ref={this.props.scrollContainerRef}\n                    onScroll={this.props.onScroll}\n                    onWheel={this.props.onWheel}\n                >\n                    <div className={Classes.TABLE_TOP_CONTAINER}>\n                        {maybeMenu}\n                        {columnHeader}\n                    </div>\n                    <div className={Classes.TABLE_BOTTOM_CONTAINER} style={bottomContainerStyle}>\n                        {maybeRowHeader}\n                        <div\n                            className={Classes.TABLE_QUADRANT_BODY_CONTAINER}\n                            ref={this.props.bodyRef}\n                        >\n                            {this.props.renderBody(quadrantType, showFrozenRowsOnly, showFrozenColumnsOnly)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    protected validateProps(nextProps: ITableQuadrantProps) {\n        const { quadrantType } = nextProps;\n        if (nextProps.onScroll != null && quadrantType !== QuadrantType.MAIN) {\n            console.warn(Errors.QUADRANT_ON_SCROLL_UNNECESSARILY_DEFINED);\n        }\n    }\n\n    private getQuadrantCssClass() {\n        switch (this.props.quadrantType) {\n            case QuadrantType.MAIN:\n                return Classes.TABLE_QUADRANT_MAIN;\n            case QuadrantType.TOP:\n                return Classes.TABLE_QUADRANT_TOP;\n            case QuadrantType.LEFT:\n                return Classes.TABLE_QUADRANT_LEFT;\n            case QuadrantType.TOP_LEFT:\n                return Classes.TABLE_QUADRANT_TOP_LEFT;\n            default:\n                return undefined;\n        }\n    }\n}\n"]}