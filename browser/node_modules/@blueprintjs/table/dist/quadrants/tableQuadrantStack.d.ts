/// <reference types="react" />
/**
 * Copyright 2017 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
import { AbstractComponent, IProps } from "@blueprintjs/core";
import * as React from "react";
import { Grid } from "../common/grid";
import { QuadrantType } from "./tableQuadrant";
export interface ITableQuadrantStackProps extends IProps {
    /**
     * A callback that receives a `ref` to the main quadrant's table-body element.
     */
    bodyRef?: React.Ref<HTMLElement>;
    /**
     * A callback that receives a `ref` to the main quadrant's column-header container.
     */
    columnHeaderRef?: (ref: HTMLElement) => void;
    /**
     * The grid computes sizes of cells, rows, or columns from the
     * configurable `columnWidths` and `rowHeights`.
     */
    grid: Grid;
    /**
     * An optional callback for reacting to column-resize events.
     */
    handleColumnResizeGuide?: (verticalGuides: number[]) => void;
    /**
     * An optional callback for reacting to column-reordering events.
     */
    handleColumnsReordering?: (verticalGuides: number[]) => void;
    /**
     * An optional callback for reacting to row-resize events.
     */
    handleRowResizeGuide?: (horizontalGuides: number[]) => void;
    /**
     * An optional callback for reacting to column-reordering events.
     */
    handleRowsReordering?: (horizontalGuides: number[]) => void;
    /**
     * Whether horizontal scrolling is currently disabled.
     * @default false
     */
    isHorizontalScrollDisabled?: boolean;
    /**
     * If `false`, hides the row headers and settings menu.
     * @default true
     */
    isRowHeaderShown?: boolean;
    /**
     * Whether vertical scrolling is currently disabled.
     * @default false
     */
    isVerticalScrollDisabled?: boolean;
    /**
     * The number of frozen columns.
     */
    numFrozenColumns?: number;
    /**
     * The number of frozen rows.
     */
    numFrozenRows?: number;
    /**
     * An optional callback invoked the quadrants are scrolled.
     */
    onScroll?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    /**
     * A callback that receives a `ref` to the main-quadrant element.
     */
    quadrantRef?: (ref: HTMLElement) => void;
    /**
     * A callback that renders either all of or just frozen sections of the table body.
     */
    renderBody: (quadrantType: QuadrantType, showFrozenRowsOnly?: boolean, showFrozenColumnsOnly?: boolean) => JSX.Element;
    /**
     * A callback that renders either all of or just the frozen section of the column header.
     */
    renderColumnHeader?: (refHandler: (ref: HTMLElement) => void, resizeHandler: (verticalGuides: number[]) => void, reorderingHandler: (oldIndex: number, newIndex: number, length: number) => void, showFrozenColumnsOnly?: boolean) => JSX.Element;
    /**
     * A callback that renders the table menu (the rectangle in the top-left corner).
     */
    renderMenu?: (refHandler: (ref: HTMLElement) => void) => JSX.Element;
    /**
     * A callback that renders either all of or just the frozen section of the row header.
     */
    renderRowHeader?: (refHandler: (ref: HTMLElement) => void, resizeHandler: (verticalGuides: number[]) => void, reorderingHandler: (oldIndex: number, newIndex: number, length: number) => void, showFrozenRowsOnly?: boolean) => JSX.Element;
    /**
     * A callback that receives a `ref` to the main quadrant's row-header container.
     */
    rowHeaderRef?: (ref: HTMLElement) => void;
    /**
     * A callback that receives a `ref` to the main quadrant's scroll-container element.
     */
    scrollContainerRef?: (ref: HTMLElement) => void;
}
export declare class TableQuadrantStack extends AbstractComponent<ITableQuadrantStackProps, {}> {
    static defaultProps: Partial<ITableQuadrantStackProps>;
    private quadrantRefs;
    private quadrantRefHandlers;
    private wasMainQuadrantScrollChangedFromOtherOnWheelCallback;
    private throttledHandleMainQuadrantScroll;
    private throttledHandleWheel;
    constructor(props: ITableQuadrantStackProps, context?: any);
    /**
     * Scroll the main quadrant to the specified scroll offset, keeping all other quadrants in sync.
     */
    scrollToPosition(scrollLeft: number, scrollTop: number): void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    render(): JSX.Element;
    private generateQuadrantRefHandlers(quadrantType);
    private renderMainQuadrantMenu;
    private renderTopQuadrantMenu;
    private renderLeftQuadrantMenu;
    private renderTopLeftQuadrantMenu;
    private renderMainQuadrantColumnHeader;
    private renderTopQuadrantColumnHeader;
    private renderLeftQuadrantColumnHeader;
    private renderTopLeftQuadrantColumnHeader;
    private renderMainQuadrantRowHeader;
    private renderTopQuadrantRowHeader;
    private renderLeftQuadrantRowHeader;
    private renderTopLeftQuadrantRowHeader;
    private handleMainQuadrantScroll;
    private handleWheel;
    private handleColumnResizeGuideMain;
    private handleColumnResizeGuideTop;
    private handleColumnResizeGuideLeft;
    private handleColumnResizeGuideTopLeft;
    private invokeColumnResizeHandler;
    private handleRowResizeGuideMain;
    private handleRowResizeGuideTop;
    private handleRowResizeGuideLeft;
    private handleRowResizeGuideTopLeft;
    private invokeRowResizeHandler;
    private handleColumnsReorderingMain;
    private handleColumnsReorderingTop;
    private handleColumnsReorderingLeft;
    private handleColumnsReorderingTopLeft;
    private invokeColumnsReorderingHandler;
    private handleRowsReorderingMain;
    private handleRowsReorderingTop;
    private handleRowsReorderingLeft;
    private handleRowsReorderingTopLeft;
    private invokeRowsReorderingHandler;
    private emitRefs();
    private syncQuadrantMenuElementWidths();
    private syncQuadrantMenuElementWidth(quadrantType);
    private syncQuadrantSizes();
    private maybeSyncRowHeaderSize(rowHeaderElement, width);
    private findColumnHeader(quadrantType);
    private findRowHeader(quadrantType);
    private handleDirectionalWheel;
    private adjustVerticalGuides(verticalGuides, quadrantType);
    private adjustHorizontalGuides(horizontalGuides, quadrantType);
    private getRowHeaderWidth(quadrantType);
}
