{"version":3,"sources":["../src/quadrants/tableQuadrantStack.tsx"],"names":[],"mappings":"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","file":"tableQuadrantStack.js","sourcesContent":["/**\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { AbstractComponent, IProps, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../common/classes\";\nimport { Grid } from \"../common/grid\";\nimport { Utils } from \"../common/utils\";\nimport { QuadrantType, TableQuadrant } from \"./tableQuadrant\";\n\ninterface IQuadrantRefMap<T> {\n    columnHeader?: T;\n    menu?: T;\n    quadrant?: T;\n    rowHeader?: T;\n    scrollContainer?: T;\n}\n\ntype QuadrantRefHandler = (ref: HTMLElement) => void;\ntype IQuadrantRefs = IQuadrantRefMap<HTMLElement>;\ntype IQuadrantRefHandlers = IQuadrantRefMap<QuadrantRefHandler>;\n\nexport interface ITableQuadrantStackProps extends IProps {\n    /**\n     * A callback that receives a `ref` to the main quadrant's table-body element.\n     */\n    bodyRef?: React.Ref<HTMLElement>;\n\n    /**\n     * A callback that receives a `ref` to the main quadrant's column-header container.\n     */\n    columnHeaderRef?: (ref: HTMLElement) => void;\n\n    /**\n     * The grid computes sizes of cells, rows, or columns from the\n     * configurable `columnWidths` and `rowHeights`.\n     */\n    grid: Grid;\n\n    /**\n     * An optional callback for reacting to column-resize events.\n     */\n    handleColumnResizeGuide?: (verticalGuides: number[]) => void;\n\n    /**\n     * An optional callback for reacting to column-reordering events.\n     */\n    handleColumnsReordering?: (verticalGuides: number[]) => void;\n\n    /**\n     * An optional callback for reacting to row-resize events.\n     */\n    handleRowResizeGuide?: (horizontalGuides: number[]) => void;\n\n    /**\n     * An optional callback for reacting to column-reordering events.\n     */\n    handleRowsReordering?: (horizontalGuides: number[]) => void;\n\n    /**\n     * Whether horizontal scrolling is currently disabled.\n     * @default false\n     */\n    isHorizontalScrollDisabled?: boolean;\n\n    /**\n     * If `false`, hides the row headers and settings menu.\n     * @default true\n     */\n    isRowHeaderShown?: boolean;\n\n    /**\n     * Whether vertical scrolling is currently disabled.\n     * @default false\n     */\n    isVerticalScrollDisabled?: boolean;\n\n    /**\n     * The number of frozen columns.\n     */\n    numFrozenColumns?: number;\n\n    /**\n     * The number of frozen rows.\n     */\n    numFrozenRows?: number;\n\n    /**\n     * An optional callback invoked the quadrants are scrolled.\n     */\n    onScroll?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;\n\n    /**\n     * A callback that receives a `ref` to the main-quadrant element.\n     */\n    quadrantRef?: (ref: HTMLElement) => void;\n\n    /**\n     * A callback that renders either all of or just frozen sections of the table body.\n     */\n    renderBody: (\n        quadrantType: QuadrantType,\n        showFrozenRowsOnly?: boolean,\n        showFrozenColumnsOnly?: boolean,\n    ) => JSX.Element;\n\n    /**\n     * A callback that renders either all of or just the frozen section of the column header.\n     */\n    renderColumnHeader?: (\n        refHandler: (ref: HTMLElement) => void,\n        resizeHandler: (verticalGuides: number[]) => void,\n        reorderingHandler: (oldIndex: number, newIndex: number, length: number) => void,\n        showFrozenColumnsOnly?: boolean,\n    ) => JSX.Element;\n\n    /**\n     * A callback that renders the table menu (the rectangle in the top-left corner).\n     */\n    renderMenu?: (refHandler: (ref: HTMLElement) => void) => JSX.Element;\n\n    /**\n     * A callback that renders either all of or just the frozen section of the row header.\n     */\n    renderRowHeader?: (\n        refHandler: (ref: HTMLElement) => void,\n        resizeHandler: (verticalGuides: number[]) => void,\n        reorderingHandler: (oldIndex: number, newIndex: number, length: number) => void,\n        showFrozenRowsOnly?: boolean,\n    ) => JSX.Element;\n\n    /**\n     * A callback that receives a `ref` to the main quadrant's row-header container.\n     */\n    rowHeaderRef?: (ref: HTMLElement) => void;\n\n    /**\n     * A callback that receives a `ref` to the main quadrant's scroll-container element.\n     */\n    scrollContainerRef?: (ref: HTMLElement) => void;\n}\n\nexport class TableQuadrantStack extends AbstractComponent<ITableQuadrantStackProps, {}> {\n    // we want the user to explicitly pass a quadrantType. define defaultProps as a Partial to avoid\n    // declaring that and other required props here.\n    public static defaultProps: Partial<ITableQuadrantStackProps> = {\n        isHorizontalScrollDisabled: false,\n        isRowHeaderShown: true,\n        isVerticalScrollDisabled: false,\n    };\n\n    private quadrantRefs = {\n        [QuadrantType.MAIN]: {} as IQuadrantRefs,\n        [QuadrantType.TOP]: {} as IQuadrantRefs,\n        [QuadrantType.LEFT]: {} as IQuadrantRefs,\n        [QuadrantType.TOP_LEFT]: {} as IQuadrantRefs,\n    };\n\n    private quadrantRefHandlers = {\n        [QuadrantType.MAIN]: this.generateQuadrantRefHandlers(QuadrantType.MAIN),\n        [QuadrantType.TOP]: this.generateQuadrantRefHandlers(QuadrantType.TOP),\n        [QuadrantType.LEFT]: this.generateQuadrantRefHandlers(QuadrantType.LEFT),\n        [QuadrantType.TOP_LEFT]: this.generateQuadrantRefHandlers(QuadrantType.TOP_LEFT),\n    };\n\n    // this flag helps us avoid redundant work in the MAIN quadrant's onScroll callback, if the\n    // callback was triggered from a manual scrollTop/scrollLeft update within an onWheel.\n    private wasMainQuadrantScrollChangedFromOtherOnWheelCallback = false;\n\n    // Throttled event callbacks\n    // =========================\n\n    private throttledHandleMainQuadrantScroll: (event: React.UIEvent<HTMLElement>) => any;\n    private throttledHandleWheel: (event: React.WheelEvent<HTMLElement>) => any;\n\n    public constructor(props: ITableQuadrantStackProps, context?: any) {\n        super(props, context);\n\n        // a few points here:\n        // - we throttle onScroll/onWheel callbacks to making scrolling look more fluid.\n        // - we declare throttled functions on the component instance, since they're stateful.\n        // - \"wheel\"-ing triggers super-fluid onScroll behavior by default, but relying on that\n        //   causes sync'd quadrants to lag behind. thus, we preventDefault for onWheel and instead\n        //   manually update all relevant quadrants using event.delta{X,Y} later, in the callback.\n        //   this keeps every sync'd quadrant visually aligned in each animation frame.\n        this.throttledHandleMainQuadrantScroll = CoreUtils.throttleReactEventCallback(this.handleMainQuadrantScroll);\n        this.throttledHandleWheel = CoreUtils.throttleReactEventCallback(this.handleWheel, { preventDefault: true });\n    }\n\n    /**\n     * Scroll the main quadrant to the specified scroll offset, keeping all other quadrants in sync.\n     */\n    public scrollToPosition(scrollLeft: number, scrollTop: number) {\n        const { scrollContainer } = this.quadrantRefs[QuadrantType.MAIN];\n        this.wasMainQuadrantScrollChangedFromOtherOnWheelCallback = false;\n        // this will trigger the main quadrant's scroll callback below\n        scrollContainer.scrollLeft = scrollLeft;\n        scrollContainer.scrollTop = scrollTop;\n    }\n\n    public componentDidMount() {\n        this.emitRefs();\n        this.syncQuadrantSizes();\n        this.syncQuadrantMenuElementWidths();\n        CoreUtils.safeInvoke(this.props.columnHeaderRef, this.findColumnHeader(QuadrantType.MAIN));\n        CoreUtils.safeInvoke(this.props.rowHeaderRef, this.findRowHeader(QuadrantType.MAIN));\n    }\n\n    public componentDidUpdate() {\n        this.emitRefs();\n        this.syncQuadrantSizes();\n        this.syncQuadrantMenuElementWidths();\n        CoreUtils.safeInvoke(this.props.columnHeaderRef, this.findColumnHeader(QuadrantType.MAIN));\n        CoreUtils.safeInvoke(this.props.rowHeaderRef, this.findRowHeader(QuadrantType.MAIN));\n    }\n\n    public render() {\n        const { grid, isRowHeaderShown, renderBody } = this.props;\n\n        return (\n            <div className={Classes.TABLE_QUADRANT_STACK}>\n                <TableQuadrant\n                    bodyRef={this.props.bodyRef}\n                    grid={grid}\n                    isRowHeaderShown={isRowHeaderShown}\n                    onScroll={this.throttledHandleMainQuadrantScroll}\n                    onWheel={this.throttledHandleWheel}\n                    quadrantRef={this.quadrantRefHandlers[QuadrantType.MAIN].quadrant}\n                    quadrantType={QuadrantType.MAIN}\n                    renderBody={renderBody}\n                    renderColumnHeader={this.renderMainQuadrantColumnHeader}\n                    renderMenu={this.renderMainQuadrantMenu}\n                    renderRowHeader={this.renderMainQuadrantRowHeader}\n                    scrollContainerRef={this.quadrantRefHandlers[QuadrantType.MAIN].scrollContainer}\n                />\n                <TableQuadrant\n                    grid={grid}\n                    isRowHeaderShown={isRowHeaderShown}\n                    onWheel={this.throttledHandleWheel}\n                    quadrantRef={this.quadrantRefHandlers[QuadrantType.TOP].quadrant}\n                    quadrantType={QuadrantType.TOP}\n                    renderBody={renderBody}\n                    renderColumnHeader={this.renderTopQuadrantColumnHeader}\n                    renderMenu={this.renderTopQuadrantMenu}\n                    renderRowHeader={this.renderTopQuadrantRowHeader}\n                    scrollContainerRef={this.quadrantRefHandlers[QuadrantType.TOP].scrollContainer}\n                />\n                <TableQuadrant\n                    grid={grid}\n                    isRowHeaderShown={isRowHeaderShown}\n                    onWheel={this.throttledHandleWheel}\n                    quadrantRef={this.quadrantRefHandlers[QuadrantType.LEFT].quadrant}\n                    quadrantType={QuadrantType.LEFT}\n                    renderBody={renderBody}\n                    renderColumnHeader={this.renderLeftQuadrantColumnHeader}\n                    renderMenu={this.renderLeftQuadrantMenu}\n                    renderRowHeader={this.renderLeftQuadrantRowHeader}\n                    scrollContainerRef={this.quadrantRefHandlers[QuadrantType.LEFT].scrollContainer}\n                />\n                <TableQuadrant\n                    grid={grid}\n                    isRowHeaderShown={isRowHeaderShown}\n                    onWheel={this.throttledHandleWheel}\n                    quadrantRef={this.quadrantRefHandlers[QuadrantType.TOP_LEFT].quadrant}\n                    quadrantType={QuadrantType.TOP_LEFT}\n                    renderBody={renderBody}\n                    renderColumnHeader={this.renderTopLeftQuadrantColumnHeader}\n                    renderMenu={this.renderTopLeftQuadrantMenu}\n                    renderRowHeader={this.renderTopLeftQuadrantRowHeader}\n                    scrollContainerRef={this.quadrantRefHandlers[QuadrantType.TOP_LEFT].scrollContainer}\n                />\n            </div>\n        );\n    }\n\n    // Ref handlers\n    // ============\n\n    private generateQuadrantRefHandlers(quadrantType: QuadrantType): IQuadrantRefHandlers {\n        const reducer = (agg: IQuadrantRefHandlers, key: keyof IQuadrantRefHandlers) => {\n            agg[key] = (ref: HTMLElement) => this.quadrantRefs[quadrantType][key] = ref;\n            return agg;\n        };\n        return [\"columnHeader\", \"menu\", \"quadrant\", \"rowHeader\", \"scrollContainer\"].reduce(reducer, {});\n    }\n\n    // Quadrant-specific renderers\n    // ===========================\n\n    // Menu\n\n    private renderMainQuadrantMenu = () => {\n        return this.props.renderMenu(this.quadrantRefHandlers[QuadrantType.MAIN].menu);\n    }\n\n    private renderTopQuadrantMenu = () => {\n        return this.props.renderMenu(this.quadrantRefHandlers[QuadrantType.TOP].menu);\n    }\n\n    private renderLeftQuadrantMenu = () => {\n        return this.props.renderMenu(this.quadrantRefHandlers[QuadrantType.LEFT].menu);\n    }\n\n    private renderTopLeftQuadrantMenu = () => {\n        return this.props.renderMenu(this.quadrantRefHandlers[QuadrantType.TOP_LEFT].menu);\n    }\n\n    // Column header\n\n    private renderMainQuadrantColumnHeader = (showFrozenColumnsOnly: boolean) => {\n        const refHandler = this.quadrantRefHandlers[QuadrantType.MAIN].columnHeader;\n        const resizeHandler = this.handleColumnResizeGuideMain;\n        const reorderingHandler = this.handleColumnsReorderingMain;\n        return this.props.renderColumnHeader(refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n    }\n\n    private renderTopQuadrantColumnHeader = (showFrozenColumnsOnly: boolean) => {\n        const refHandler = this.quadrantRefHandlers[QuadrantType.TOP].columnHeader;\n        const resizeHandler = this.handleColumnResizeGuideTop;\n        const reorderingHandler = this.handleColumnsReorderingTop;\n        return this.props.renderColumnHeader(refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n    }\n\n    private renderLeftQuadrantColumnHeader = (showFrozenColumnsOnly: boolean) => {\n        const refHandler = this.quadrantRefHandlers[QuadrantType.LEFT].columnHeader;\n        const resizeHandler = this.handleColumnResizeGuideLeft;\n        const reorderingHandler = this.handleColumnsReorderingLeft;\n        return this.props.renderColumnHeader(refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n    }\n\n    private renderTopLeftQuadrantColumnHeader = (showFrozenColumnsOnly: boolean) => {\n        const refHandler = this.quadrantRefHandlers[QuadrantType.TOP_LEFT].columnHeader;\n        const resizeHandler = this.handleColumnResizeGuideTopLeft;\n        const reorderingHandler = this.handleColumnsReorderingTopLeft;\n        return this.props.renderColumnHeader(refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n    }\n\n    // Row header\n\n    private renderMainQuadrantRowHeader = (showFrozenRowsOnly: boolean) => {\n        const refHandler = this.quadrantRefHandlers[QuadrantType.MAIN].rowHeader;\n        const resizeHandler = this.handleRowResizeGuideMain;\n        const reorderingHandler = this.handleRowsReorderingMain;\n        return this.props.renderRowHeader(refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n    }\n\n    private renderTopQuadrantRowHeader = (showFrozenRowsOnly: boolean) => {\n        const refHandler = this.quadrantRefHandlers[QuadrantType.TOP].rowHeader;\n        const resizeHandler = this.handleRowResizeGuideTop;\n        const reorderingHandler = this.handleRowsReorderingTop;\n        return this.props.renderRowHeader(refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n    }\n\n    private renderLeftQuadrantRowHeader = (showFrozenRowsOnly: boolean) => {\n        const refHandler = this.quadrantRefHandlers[QuadrantType.LEFT].rowHeader;\n        const resizeHandler = this.handleRowResizeGuideLeft;\n        const reorderingHandler = this.handleRowsReorderingLeft;\n        return this.props.renderRowHeader(refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n    }\n\n    private renderTopLeftQuadrantRowHeader = (showFrozenRowsOnly: boolean) => {\n        const refHandler = this.quadrantRefHandlers[QuadrantType.TOP_LEFT].rowHeader;\n        const resizeHandler = this.handleRowResizeGuideTopLeft;\n        const reorderingHandler = this.handleRowsReorderingTopLeft;\n        return this.props.renderRowHeader(refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n    }\n\n    // Event handlers\n    // ==============\n\n    // Scrolling\n    // ---------\n\n    // use the more generic \"scroll\" event for the main quadrant, which captures both click+dragging\n    // on the scrollbar and trackpad/mousewheel gestures\n    private handleMainQuadrantScroll = (event: React.UIEvent<HTMLElement>) => {\n        if (this.wasMainQuadrantScrollChangedFromOtherOnWheelCallback) {\n            this.wasMainQuadrantScrollChangedFromOtherOnWheelCallback = false;\n            return;\n        }\n        const nextScrollTop = this.quadrantRefs[QuadrantType.MAIN].scrollContainer.scrollTop;\n        const nextScrollLeft = this.quadrantRefs[QuadrantType.MAIN].scrollContainer.scrollLeft;\n\n        this.quadrantRefs[QuadrantType.LEFT].scrollContainer.scrollTop = nextScrollTop;\n        this.quadrantRefs[QuadrantType.TOP].scrollContainer.scrollLeft = nextScrollLeft;\n\n        this.props.onScroll(event);\n    }\n\n    // recall that we've already invoked event.preventDefault() when defining the throttled versions\n    // of these onWheel callbacks, so now we need to manually update the affected quadrant's scroll\n    // position too.\n\n    private handleWheel = (event: React.WheelEvent<HTMLElement>) => {\n        this.handleDirectionalWheel(\"horizontal\", event.deltaX, QuadrantType.MAIN, [QuadrantType.TOP]);\n        this.handleDirectionalWheel(\"vertical\", event.deltaY, QuadrantType.MAIN, [QuadrantType.LEFT]);\n        this.props.onScroll(event);\n    }\n\n    // Resizing\n    // --------\n\n    // Columns\n\n    private handleColumnResizeGuideMain = (verticalGuides: number[]) => {\n        this.invokeColumnResizeHandler(verticalGuides, QuadrantType.MAIN);\n    }\n\n    private handleColumnResizeGuideTop = (verticalGuides: number[]) => {\n        this.invokeColumnResizeHandler(verticalGuides, QuadrantType.TOP);\n    }\n\n    private handleColumnResizeGuideLeft = (verticalGuides: number[]) => {\n        this.invokeColumnResizeHandler(verticalGuides, QuadrantType.LEFT);\n    }\n\n    private handleColumnResizeGuideTopLeft = (verticalGuides: number[]) => {\n        this.invokeColumnResizeHandler(verticalGuides, QuadrantType.TOP_LEFT);\n    }\n\n    private invokeColumnResizeHandler = (verticalGuides: number[], quadrantType: QuadrantType) => {\n        const adjustedGuides = this.adjustVerticalGuides(verticalGuides, quadrantType);\n        this.props.handleColumnResizeGuide(adjustedGuides);\n    }\n\n    // Rows\n\n    private handleRowResizeGuideMain = (verticalGuides: number[]) => {\n        this.invokeRowResizeHandler(verticalGuides, QuadrantType.MAIN);\n    }\n\n    private handleRowResizeGuideTop = (verticalGuides: number[]) => {\n        this.invokeRowResizeHandler(verticalGuides, QuadrantType.TOP);\n    }\n\n    private handleRowResizeGuideLeft = (verticalGuides: number[]) => {\n        this.invokeRowResizeHandler(verticalGuides, QuadrantType.LEFT);\n    }\n\n    private handleRowResizeGuideTopLeft = (verticalGuides: number[]) => {\n        this.invokeRowResizeHandler(verticalGuides, QuadrantType.TOP_LEFT);\n    }\n\n    private invokeRowResizeHandler = (verticalGuides: number[], quadrantType: QuadrantType) => {\n        const adjustedGuides = this.adjustHorizontalGuides(verticalGuides, quadrantType);\n        this.props.handleRowResizeGuide(adjustedGuides);\n    }\n\n    // Reordering\n    // ----------\n\n    // Columns\n\n    private handleColumnsReorderingMain = (oldIndex: number, newIndex: number, length: number) => {\n        this.invokeColumnsReorderingHandler(oldIndex, newIndex, length);\n    }\n\n    private handleColumnsReorderingTop = (oldIndex: number, newIndex: number, length: number) => {\n        this.invokeColumnsReorderingHandler(oldIndex, newIndex, length);\n    }\n\n    private handleColumnsReorderingLeft = (oldIndex: number, newIndex: number, length: number) => {\n        this.invokeColumnsReorderingHandler(oldIndex, newIndex, length);\n    }\n\n    private handleColumnsReorderingTopLeft = (oldIndex: number, newIndex: number, length: number) => {\n        this.invokeColumnsReorderingHandler(oldIndex, newIndex, length);\n    }\n\n    private invokeColumnsReorderingHandler = (oldIndex: number, newIndex: number, length: number) => {\n        const guideIndex = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);\n        const leftOffset = this.props.grid.getCumulativeWidthBefore(guideIndex);\n        const quadrantType = guideIndex <= this.props.numFrozenColumns ? QuadrantType.TOP_LEFT : QuadrantType.TOP;\n        const verticalGuides = this.adjustVerticalGuides([leftOffset], quadrantType);\n        this.props.handleColumnsReordering(verticalGuides);\n    }\n\n    // Rows\n\n    private handleRowsReorderingMain = (oldIndex: number, newIndex: number, length: number) => {\n        this.invokeRowsReorderingHandler(oldIndex, newIndex, length);\n    }\n\n    private handleRowsReorderingTop = (oldIndex: number, newIndex: number, length: number) => {\n        this.invokeRowsReorderingHandler(oldIndex, newIndex, length);\n    }\n\n    private handleRowsReorderingLeft = (oldIndex: number, newIndex: number, length: number) => {\n        this.invokeRowsReorderingHandler(oldIndex, newIndex, length);\n    }\n\n    private handleRowsReorderingTopLeft = (oldIndex: number, newIndex: number, length: number) => {\n        this.invokeRowsReorderingHandler(oldIndex, newIndex, length);\n    }\n\n    private invokeRowsReorderingHandler = (oldIndex: number, newIndex: number, length: number) => {\n        const guideIndex = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);\n        const topOffset = this.props.grid.getCumulativeHeightBefore(guideIndex);\n        const quadrantType = guideIndex <= this.props.numFrozenRows ? QuadrantType.TOP_LEFT : QuadrantType.LEFT;\n        const horizontalGuides = this.adjustHorizontalGuides([topOffset], quadrantType);\n        this.props.handleRowsReordering(horizontalGuides);\n    }\n\n    // Emitters\n    // ========\n\n    private emitRefs() {\n        CoreUtils.safeInvoke(this.props.columnHeaderRef, this.quadrantRefs[QuadrantType.MAIN].columnHeader);\n        CoreUtils.safeInvoke(this.props.quadrantRef, this.quadrantRefs[QuadrantType.MAIN].quadrant);\n        CoreUtils.safeInvoke(this.props.rowHeaderRef, this.quadrantRefs[QuadrantType.MAIN].rowHeader);\n        CoreUtils.safeInvoke(this.props.scrollContainerRef, this.quadrantRefs[QuadrantType.MAIN].scrollContainer);\n    }\n\n    // Size syncing\n    // ============\n\n    private syncQuadrantMenuElementWidths() {\n        this.syncQuadrantMenuElementWidth(QuadrantType.MAIN);\n        this.syncQuadrantMenuElementWidth(QuadrantType.TOP);\n        this.syncQuadrantMenuElementWidth(QuadrantType.LEFT);\n        this.syncQuadrantMenuElementWidth(QuadrantType.TOP_LEFT);\n    }\n\n    private syncQuadrantMenuElementWidth(quadrantType: QuadrantType) {\n        const mainQuadrantMenu = this.quadrantRefs[QuadrantType.MAIN].menu;\n        const mainQuadrantRowHeader = this.quadrantRefs[QuadrantType.MAIN].rowHeader;\n        const quadrantMenu = this.quadrantRefs[quadrantType].menu;\n\n        // the main quadrant menu informs the size of every other quadrant menu\n        if (mainQuadrantMenu != null && mainQuadrantRowHeader != null && quadrantMenu != null) {\n            const { width } = mainQuadrantRowHeader.getBoundingClientRect();\n            quadrantMenu.style.width = `${width}px`;\n\n            // no need to use the main quadrant's menu to set its *own* height\n            if (quadrantType !== QuadrantType.MAIN) {\n                const { height } = mainQuadrantMenu.getBoundingClientRect();\n                quadrantMenu.style.height = `${height}px`;\n            }\n        }\n    }\n\n    private syncQuadrantSizes() {\n        const mainQuadrantScrollElement = this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n        const topQuadrantElement = this.quadrantRefs[QuadrantType.TOP].quadrant;\n        const topQuadrantRowHeaderElement = this.quadrantRefs[QuadrantType.TOP].rowHeader;\n        const leftQuadrantElement = this.quadrantRefs[QuadrantType.LEFT].quadrant;\n        const topLeftQuadrantElement = this.quadrantRefs[QuadrantType.TOP_LEFT].quadrant;\n        const topLeftQuadrantRowHeaderElement = this.quadrantRefs[QuadrantType.TOP_LEFT].rowHeader;\n\n        const { grid, numFrozenColumns, numFrozenRows } = this.props;\n\n        // if there are no frozen rows or columns, we still want the quadrant to be 1px bigger to\n        // reveal the header border.\n        const BORDER_WIDTH_CORRECTION = 1;\n\n        const leftQuadrantGridContentWidth = numFrozenColumns > 0\n            ? grid.getCumulativeWidthAt(numFrozenColumns - 1)\n            : BORDER_WIDTH_CORRECTION;\n        const topQuadrantGridContentHeight = numFrozenRows > 0\n            ? grid.getCumulativeHeightAt(numFrozenRows - 1)\n            : BORDER_WIDTH_CORRECTION;\n\n        // all menus are the same size, so arbitrarily use the one from the main quadrant.\n        // assumes that the menu element width has already been sync'd after the last render\n\n        const { rowHeader, columnHeader } = this.quadrantRefs[QuadrantType.MAIN];\n        const rowHeaderWidth = rowHeader == null ? 0 : rowHeader.getBoundingClientRect().width;\n        const columnHeaderHeight = columnHeader == null ? 0 : columnHeader.getBoundingClientRect().height;\n\n        // no need to sync the main quadrant, because it fills the entire viewport\n        topQuadrantElement.style.height = `${topQuadrantGridContentHeight + columnHeaderHeight}px`;\n        leftQuadrantElement.style.width = `${leftQuadrantGridContentWidth + rowHeaderWidth}px`;\n        topLeftQuadrantElement.style.width = `${leftQuadrantGridContentWidth + rowHeaderWidth}px`;\n        topLeftQuadrantElement.style.height = `${topQuadrantGridContentHeight + columnHeaderHeight}px`;\n\n        // resize the top and left quadrants to keep the main quadrant's scrollbar visible\n        const scrollbarWidth = mainQuadrantScrollElement.offsetWidth - mainQuadrantScrollElement.clientWidth;\n        const scrollbarHeight = mainQuadrantScrollElement.offsetHeight - mainQuadrantScrollElement.clientHeight;\n        topQuadrantElement.style.right = `${scrollbarWidth}px`;\n        leftQuadrantElement.style.bottom = `${scrollbarHeight}px`;\n\n        // resize top and top-left quadrant row headers if main quadrant scrolls\n        this.maybeSyncRowHeaderSize(topQuadrantRowHeaderElement, rowHeaderWidth);\n        this.maybeSyncRowHeaderSize(topLeftQuadrantRowHeaderElement, rowHeaderWidth);\n    }\n\n    private maybeSyncRowHeaderSize(rowHeaderElement: HTMLElement, width: number) {\n        if (rowHeaderElement == null) {\n            return;\n        }\n        const selector = `.${Classes.TABLE_ROW_HEADERS_CELLS_CONTAINER}`;\n        // this child element dictates the width of all row-header cells\n        const elementToResize = rowHeaderElement.querySelector(selector) as HTMLElement;\n        elementToResize.style.width = `${width}px`;\n    }\n\n    // Helpers\n    // =======\n\n    private findColumnHeader(quadrantType: QuadrantType) {\n        const quadrantElement = this.quadrantRefs[quadrantType].quadrant;\n        return quadrantElement.querySelector(`.${Classes.TABLE_COLUMN_HEADERS}`) as HTMLElement;\n    }\n\n    private findRowHeader(quadrantType: QuadrantType) {\n        const quadrantElement = this.quadrantRefs[quadrantType].quadrant;\n        return quadrantElement.querySelector(`.${Classes.TABLE_ROW_HEADERS}`) as HTMLElement;\n    }\n\n    private handleDirectionalWheel = (\n        direction: \"horizontal\" | \"vertical\",\n        delta: number,\n        quadrantType: QuadrantType,\n        quadrantTypesToSync: QuadrantType[],\n    ) => {\n        const isHorizontal = direction === \"horizontal\";\n\n        const scrollKey = isHorizontal\n            ? \"scrollLeft\"\n            : \"scrollTop\";\n        const isScrollDisabled = isHorizontal\n            ? this.props.isHorizontalScrollDisabled\n            : this.props.isVerticalScrollDisabled;\n\n        if (!isScrollDisabled) {\n            this.wasMainQuadrantScrollChangedFromOtherOnWheelCallback = true;\n\n            // sync the corresponding scroll position of all dependent quadrants\n            const nextScrollPosition = this.quadrantRefs[quadrantType].scrollContainer[scrollKey] + delta;\n            this.quadrantRefs[quadrantType].scrollContainer[scrollKey] = nextScrollPosition;\n            quadrantTypesToSync.forEach((quadrantTypeToSync) => {\n                this.quadrantRefs[quadrantTypeToSync].scrollContainer[scrollKey] = nextScrollPosition;\n            });\n        }\n    }\n\n    // Resizing\n\n    private adjustVerticalGuides(verticalGuides: number[], quadrantType: QuadrantType) {\n        const scrollAmount = this.quadrantRefs[quadrantType].scrollContainer.scrollLeft;\n        const rowHeaderWidth = this.getRowHeaderWidth(quadrantType);\n\n        const adjustedVerticalGuides = verticalGuides != null\n            ? verticalGuides.map((verticalGuide) => verticalGuide - scrollAmount + rowHeaderWidth)\n            : verticalGuides;\n\n        return adjustedVerticalGuides;\n    }\n\n    private adjustHorizontalGuides(horizontalGuides: number[], quadrantType: QuadrantType) {\n        const scrollAmount = this.quadrantRefs[quadrantType].scrollContainer.scrollTop;\n        const columnHeaderHeight = this.quadrantRefs[quadrantType].columnHeader.clientHeight;\n\n        const adjustedHorizontalGuides = horizontalGuides != null\n            ? horizontalGuides.map((horizontalGuide) => horizontalGuide - scrollAmount + columnHeaderHeight)\n            : horizontalGuides;\n\n        return adjustedHorizontalGuides;\n    }\n\n    private getRowHeaderWidth(quadrantType: QuadrantType) {\n        // unlike the column header, the row header can be toggled, so we need to handle the case\n        // when it's not showing\n        const { rowHeader } = this.quadrantRefs[quadrantType];\n        return rowHeader == null ? 0 : rowHeader.clientWidth;\n    }\n}\n"]}