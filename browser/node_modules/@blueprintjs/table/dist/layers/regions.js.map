{"version":3,"sources":["../src/layers/regions.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAGH,uCAAyC;AACzC,6BAA+B;AAC/B,2CAA6C;AAC7C,yCAAwC;AAExC,sCAA8C;AAiB9C,8FAA8F;AAC9F,IAAM,iBAAiB,GAAG;IACtB,WAAW;CACoB,CAAC;AAEpC;IAAiC,uCAAsC;IAAvE;QAAA,qEAgCC;QAVW,kBAAY,GAAG,UAAC,OAAgB,EAAE,KAAa;YAC7C,IAAA,gBAAwC,EAAtC,wBAAS,EAAE,8BAAY,CAAgB;YAC/C,MAAM,CAAC,CACH,6BACI,SAAS,EAAE,UAAU,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,EAC7E,GAAG,EAAE,KAAK,EACV,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,GAC5B,CACL,CAAC;QACN,CAAC,CAAA;;IACL,CAAC;IA/BU,2CAAqB,GAA5B,UAA6B,SAA4B;QACrD,sFAAsF;QACtF,sFAAsF;QACtF,cAAc;QACd,MAAM,CAAC,CAAC,aAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,OAAO,EAAE,iBAAO,CAAC,YAAY,CAAC;eAC/E,CAAC,aAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,YAAY,EAAE,aAAK,CAAC,kBAAkB,CAAC;eAC7F,CAAC,aAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC,CAAC;IAC5F,CAAC;IAEM,4BAAM,GAAb;QACI,MAAM,CAAC,6BAAK,SAAS,EAAE,OAAO,CAAC,mBAAmB,IAAG,IAAI,CAAC,oBAAoB,EAAE,CAAO,CAAC;IAC5F,CAAC;IAEO,0CAAoB,GAA5B;QACY,IAAA,4BAAO,CAAgB;QAC/B,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;IAYL,kBAAC;AAAD,CAhCA,AAgCC,CAhCgC,KAAK,CAAC,SAAS,GAgC/C;AAhCY,kCAAW","file":"regions.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { IProps } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Utils } from \"../common/utils\";\nimport { QuadrantType } from \"../quadrants/tableQuadrant\";\nimport { IRegion, Regions } from \"../regions\";\n\nexport type IRegionStyler = (region: IRegion, quadrantType?: QuadrantType) => React.CSSProperties;\n\nexport interface IRegionLayerProps extends IProps {\n    /**\n     * The array of regions to render.\n     */\n    regions?: IRegion[];\n\n    /**\n     * The array of CSS styles to apply to each region. The ith style object in this array will be\n     * applied to the ith region in `regions`.\n     */\n    regionStyles?: React.CSSProperties[];\n}\n\n// don't include \"regions\" or \"regionStyles\" in here, because they can't be shallowly compared\nconst UPDATE_PROPS_KEYS = [\n    \"className\",\n] as Array<keyof IRegionLayerProps>;\n\nexport class RegionLayer extends React.Component<IRegionLayerProps, {}> {\n    public shouldComponentUpdate(nextProps: IRegionLayerProps) {\n        // shallowly comparable props like \"className\" tend not to change in the default table\n        // implementation, so do that check last with hope that we return earlier and avoid it\n        // altogether.\n        return !Utils.arraysEqual(this.props.regions, nextProps.regions, Regions.regionsEqual)\n            || !Utils.arraysEqual(this.props.regionStyles, nextProps.regionStyles, Utils.shallowCompareKeys)\n            || !Utils.shallowCompareKeys(this.props, nextProps, { include: UPDATE_PROPS_KEYS });\n    }\n\n    public render() {\n        return <div className={Classes.TABLE_OVERLAY_LAYER}>{this.renderRegionChildren()}</div>;\n    }\n\n    private renderRegionChildren() {\n        const { regions } = this.props;\n        if (regions == null) {\n            return undefined;\n        }\n        return regions.map(this.renderRegion);\n    }\n\n    private renderRegion = (_region: IRegion, index: number) => {\n        const { className, regionStyles } = this.props;\n        return (\n            <div\n                className={classNames(Classes.TABLE_OVERLAY, Classes.TABLE_REGION, className)}\n                key={index}\n                style={regionStyles[index]}\n            />\n        );\n    }\n}\n"]}