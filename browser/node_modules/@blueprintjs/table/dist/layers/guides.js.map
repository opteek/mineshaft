{"version":3,"sources":["../src/layers/guides.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAGH,uCAAyC;AACzC,6BAA+B;AAE/B,2CAA6C;AAC7C,yCAAwC;AAcxC;IAAgC,sCAAqC;IAArE;QAAA,qEA8CC;QAvBW,yBAAmB,GAAG,UAAC,MAAc,EAAE,KAAa;YACxD,IAAM,KAAK,GAAG;gBACV,IAAI,EAAK,MAAM,OAAI;aACC,CAAC;YACzB,IAAM,SAAS,GAAG,UAAU,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,oBAAoB,EAAE;gBAC9E,oCAAoC,EAAE,MAAM,KAAK,CAAC;aACrD,CAAC,CAAC;YACH,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,GAAI,CAC1D,CAAC;QACN,CAAC,CAAA;QAEO,2BAAqB,GAAG,UAAC,MAAc,EAAE,KAAa;YAC1D,IAAM,KAAK,GAAG;gBACV,GAAG,EAAK,MAAM,OAAI;aACE,CAAC;YACzB,IAAM,SAAS,GAAG,UAAU,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,sBAAsB,EAAE;gBAChF,qCAAqC,EAAE,MAAM,KAAK,CAAC;aACtD,CAAC,CAAC;YACH,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,GAAI,CAC1D,CAAC;QACN,CAAC,CAAA;;IACL,CAAC;IA7CU,0CAAqB,GAA5B,UAA6B,SAA2B;QACpD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,0FAA0F;QAC1F,6BAA6B;QAC7B,MAAM,CAAC,CAAC,aAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,SAAS,CAAC,cAAc,CAAC;eACvE,CAAC,aAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,SAAS,CAAC,gBAAgB,CAAC,CAAC;IACvF,CAAC;IAEM,2BAAM,GAAb;QACU,IAAA,eAA4D,EAA1D,kCAAc,EAAE,sCAAgB,EAAE,wBAAS,CAAgB;QACnE,IAAM,SAAS,GAAG,CAAC,cAAc,IAAI,IAAI,CAAC,GAAG,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACtG,IAAM,WAAW,GAAG,CAAC,gBAAgB,IAAI,IAAI,CAAC,GAAG,SAAS,GAAG,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAC9G,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,UAAU,CAAC,SAAS,EAAE,OAAO,CAAC,mBAAmB,CAAC;YAC7D,SAAS;YACT,WAAW,CACV,CACT,CAAC;IACN,CAAC;IAyBL,iBAAC;AAAD,CA9CA,AA8CC,CA9C+B,KAAK,CAAC,SAAS,GA8C9C;AA9CY,gCAAU","file":"guides.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { IProps } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../common/classes\";\nimport { Utils } from \"../common/utils\";\n\nexport interface IGuideLayerProps extends IProps {\n    /**\n     *  The left-offset location of the vertical guides\n     */\n    verticalGuides?: number[];\n\n    /**\n     *  The top-offset location of the horizontal guides\n     */\n    horizontalGuides?: number[];\n}\n\nexport class GuideLayer extends React.Component<IGuideLayerProps, {}> {\n    public shouldComponentUpdate(nextProps: IGuideLayerProps) {\n        if (this.props.className !== nextProps.className) {\n            return true;\n        }\n        // shallow-comparing guide arrays leads to tons of unnecessary re-renders, so we check the\n        // array contents explicitly.\n        return !Utils.arraysEqual(this.props.verticalGuides, nextProps.verticalGuides)\n            || !Utils.arraysEqual(this.props.horizontalGuides, nextProps.horizontalGuides);\n    }\n\n    public render() {\n        const { verticalGuides, horizontalGuides, className } = this.props;\n        const verticals = (verticalGuides == null) ? undefined : verticalGuides.map(this.renderVerticalGuide);\n        const horizontals = (horizontalGuides == null) ? undefined : horizontalGuides.map(this.renderHorizontalGuide);\n        return (\n            <div className={classNames(className, Classes.TABLE_OVERLAY_LAYER)}>\n                {verticals}\n                {horizontals}\n            </div>\n        );\n    }\n\n    private renderVerticalGuide = (offset: number, index: number) => {\n        const style = {\n            left: `${offset}px`,\n        } as React.CSSProperties;\n        const className = classNames(Classes.TABLE_OVERLAY, Classes.TABLE_VERTICAL_GUIDE, {\n            \"bp-table-vertical-guide-flush-left\": offset === 0,\n        });\n        return (\n            <div className={className} key={index} style={style} />\n        );\n    }\n\n    private renderHorizontalGuide = (offset: number, index: number) => {\n        const style = {\n            top: `${offset}px`,\n        } as React.CSSProperties;\n        const className = classNames(Classes.TABLE_OVERLAY, Classes.TABLE_HORIZONTAL_GUIDE, {\n            \"bp-table-horizontal-guide-flush-top\": offset === 0,\n        });\n        return (\n            <div className={className} key={index} style={style} />\n        );\n    }\n}\n"]}