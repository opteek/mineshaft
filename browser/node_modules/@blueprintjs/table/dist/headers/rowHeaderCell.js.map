{"version":3,"sources":["../src/headers/rowHeaderCell.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,uCAAyC;AACzC,6BAA+B;AAE/B,0CAA8D;AAE9D,2CAA6C;AAC7C,yCAA2C;AAC3C,6DAA4D;AAC5D,2CAA4D;AAc5D;IAAmC,yCAA0C;IAA7E;;IA0CA,CAAC;IAzCU,8BAAM,GAAb;QACI,IAAM,yBAAyB,GAAG,UAAU,CACxC,OAAO,CAAC,mBAAmB,EAC3B,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAElC,IAAM,eAOQ;QANV,2BAA2B;QAC3B,sCAAgB,EAChB,gCAAa;QAEb,oBAAoB;QACpB,2EACU,CAAC;QAEf,MAAM,CAAC,CACH,oBAAC,uBAAU,qBACP,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAC1C,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,IAChC,eAAe;YAEnB,6BAAK,SAAS,EAAE,OAAO,CAAC,cAAc;gBAClC,oBAAC,iCAAe,IAAC,OAAO,EAAE,eAAe,CAAC,OAAO;oBAC7C,6BAAK,SAAS,EAAE,yBAAyB,IACpC,eAAe,CAAC,IAAI,CACnB,CACQ,CAChB;YACL,IAAI,CAAC,KAAK,CAAC,QAAQ;YACnB,eAAe,CAAC,OAAO,GAAG,SAAS,GAAG,eAAe,CAAC,YAAY,CAC1D,CAChB,CAAC;IACN,CAAC;IAES,qCAAa,GAAvB,UAAwB,SAA8B;QAClD,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACzB,qFAAqF;YACrF,uFAAuF;YACvF,iBAAiB;YACjB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC;QACzD,CAAC;IACL,CAAC;IACL,oBAAC;AAAD,CA1CA,AA0CC,CA1CkC,wBAAiB,GA0CnD;AA1CY,sCAAa","file":"rowHeaderCell.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractComponent, IProps } from \"@blueprintjs/core\";\n\nimport * as Classes from \"../common/classes\";\nimport * as Errors from \"../common/errors\";\nimport { LoadableContent } from \"../common/loadableContent\";\nimport { HeaderCell, IHeaderCellProps } from \"./headerCell\";\n\nexport interface IRowHeaderCellProps extends IHeaderCellProps, IProps {\n    /**\n     * Specifies if the row is reorderable.\n     */\n    isRowReorderable?: boolean;\n\n    /**\n     * Specifies whether the full row is part of a selection.\n     */\n    isRowSelected?: boolean;\n}\n\nexport class RowHeaderCell extends AbstractComponent<IRowHeaderCellProps, {}> {\n    public render() {\n        const loadableContentDivClasses = classNames(\n            Classes.TABLE_ROW_NAME_TEXT,\n            Classes.TABLE_TRUNCATED_TEXT);\n\n        const {\n            // from IRowHeaderCellProps\n            isRowReorderable,\n            isRowSelected,\n\n            // from IHeaderProps\n            ...spreadableProps,\n        } = this.props;\n\n        return (\n            <HeaderCell\n                isReorderable={this.props.isRowReorderable}\n                isSelected={this.props.isRowSelected}\n                {...spreadableProps}\n            >\n                <div className={Classes.TABLE_ROW_NAME}>\n                    <LoadableContent loading={spreadableProps.loading}>\n                        <div className={loadableContentDivClasses}>\n                            {spreadableProps.name}\n                        </div>\n                    </LoadableContent>\n                </div>\n                {this.props.children}\n                {spreadableProps.loading ? undefined : spreadableProps.resizeHandle}\n            </HeaderCell>\n        );\n    }\n\n    protected validateProps(nextProps: IRowHeaderCellProps) {\n        if (nextProps.menu != null) {\n            // throw this warning from the publicly exported, higher-order *HeaderCell components\n            // rather than HeaderCell, so consumers know exactly which components are receiving the\n            // offending prop\n            console.warn(Errors.ROW_HEADER_CELL_MENU_DEPRECATED);\n        }\n    }\n}\n"]}