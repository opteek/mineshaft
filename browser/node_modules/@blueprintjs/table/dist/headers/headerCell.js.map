{"version":3,"sources":["../src/headers/headerCell.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,uCAAyC;AACzC,6BAA+B;AAE/B,0CAK2B;AAC3B,2CAA6C;AAC7C,yCAAwC;AA6ExC,IAAa,UAAU;IAAS,sCAA2D;IAD3F;QAAA,qEAsCC;QApCU,WAAK,GAAqB;YAC7B,QAAQ,EAAE,KAAK;SAClB,CAAC;;IAkCN,CAAC;IAhCU,0CAAqB,GAA5B,UAA6B,SAA2B;QACpD,MAAM,CAAC,CAAC,aAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,OAAO,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC;eACxE,CAAC,aAAK,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACpE,CAAC;IAEM,sCAAiB,GAAxB,UAAyB,MAAqC;QAClD,IAAA,kCAAU,CAAgB;QAElC,EAAE,CAAC,CAAC,YAAS,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACnC,yFAAyF;YACzF,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,mFAAmF;YACnF,sFAAsF;YACtF,qFAAqF;YACrF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAC3B,CAAC;IACL,CAAC;IAEM,2BAAM,GAAb;QACI,IAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY;YAC3C,GAAC,OAAO,CAAC,mBAAmB,IAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ;YACzE,GAAC,OAAO,CAAC,qBAAqB,IAAG,IAAI,CAAC,KAAK,CAAC,UAAU;YACtD,GAAC,cAAW,CAAC,OAAO,IAAG,IAAI,CAAC,KAAK,CAAC,OAAO;iBAC1C,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAEzB,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,IAC3C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAClB,CACT,CAAC;;IACN,CAAC;IACL,iBAAC;AAAD,CArCA,AAqCC,CArC+B,KAAK,CAAC,SAAS,GAqC9C;AArCY,UAAU;IADtB,wBAAiB;GACL,UAAU,CAqCtB;AArCY,gCAAU","file":"headerCell.js","sourcesContent":["/**\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    Classes as CoreClasses,\n    ContextMenuTarget,\n    IProps,\n    Utils as CoreUtils,\n} from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport { Utils } from \"../common/utils\";\nimport { ResizeHandle } from \"../interactions/resizeHandle\";\n\nexport interface IHeaderCellProps extends IProps {\n    /**\n     * The index of the cell in the header. If provided, this will be passed as an argument to any\n     * callbacks when they are invoked.\n     */\n    index?: number;\n\n    /**\n     * If `true`, will apply the active class to the header to indicate it is\n     * part of an external operation.\n     */\n    isActive?: boolean;\n\n    /**\n     * If `true`, the row/column `name` will be replaced with a fixed-height skeleton, and the\n     * `resizeHandle` will not be rendered. If passing in additional children to this component, you\n     * will also want to conditionally apply the `.pt-skeleton` class where appropriate.\n     * @default false\n     */\n    loading?: boolean;\n\n    /**\n     * An element, like a `<Menu>`, this is displayed by right-clicking\n     * anywhere in the header.\n     * @deprecated since v1.17.0; use `renderMenu` instead\n     */\n    menu?: JSX.Element;\n\n    /**\n     * The name displayed in the header of the row/column.\n     */\n    name?: string;\n\n    /**\n     * A callback that returns an element, like a `<Menu>`, which is displayed by right-clicking\n     * anywhere in the header. The callback will receive the cell index if it was provided via\n     * props.\n     */\n    renderMenu?: (index?: number) => JSX.Element;\n\n    /**\n     * A `ReorderHandle` React component that allows users to drag-reorder the column header.\n     */\n    reorderHandle?: JSX.Element;\n\n    /**\n     * A `ResizeHandle` React component that allows users to drag-resize the header.\n     */\n    resizeHandle?: ResizeHandle;\n\n    /**\n     * CSS styles for the top level element.\n     */\n    style?: React.CSSProperties;\n}\n\nexport interface IInternalHeaderCellProps extends IHeaderCellProps {\n    /**\n     * Specifies if the cell is reorderable.\n     * @deprecated since 1.21.0; pass `isReorderable` to `ColumnHeader` or `RowHeader` instead\n     */\n    isReorderable?: boolean;\n\n    /**\n     * Specifies if the cell is selected.\n     */\n    isSelected?: boolean;\n}\n\nexport interface IHeaderCellState {\n    isActive: boolean;\n}\n\n@ContextMenuTarget\nexport class HeaderCell extends React.Component<IInternalHeaderCellProps, IHeaderCellState> {\n    public state: IHeaderCellState = {\n        isActive: false,\n    };\n\n    public shouldComponentUpdate(nextProps: IHeaderCellProps) {\n        return !Utils.shallowCompareKeys(this.props, nextProps, { exclude: [\"style\"] })\n            || !Utils.deepCompareKeys(this.props, nextProps, [\"style\"]);\n    }\n\n    public renderContextMenu(_event: React.MouseEvent<HTMLElement>) {\n        const { renderMenu } = this.props;\n\n        if (CoreUtils.isFunction(renderMenu)) {\n            // the preferred way (a consistent function instance that won't cause as many re-renders)\n            return renderMenu(this.props.index);\n        } else {\n            // the deprecated way (leads to lots of unnecessary re-renders because of menu-item\n            // callbacks needing access to the index of the right-clicked cell, which demands that\n            // new callback functions and JSX elements be recreated on each render of the parent)\n            return this.props.menu;\n        }\n    }\n\n    public render() {\n        const classes = classNames(Classes.TABLE_HEADER, {\n            [Classes.TABLE_HEADER_ACTIVE]: this.props.isActive || this.state.isActive,\n            [Classes.TABLE_HEADER_SELECTED]: this.props.isSelected,\n            [CoreClasses.LOADING]: this.props.loading,\n        }, this.props.className);\n\n        return (\n            <div className={classes} style={this.props.style}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n"]}