{"version":3,"sources":["../src/headers/columnHeader.tsx"],"names":[],"mappings":"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","file":"columnHeader.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../common/classes\";\nimport { IColumnIndices } from \"../common/grid\";\nimport { Utils } from \"../common/index\";\nimport { IClientCoordinates } from \"../interactions/draggable\";\nimport { IIndexedResizeCallback } from \"../interactions/resizable\";\nimport { Orientation } from \"../interactions/resizeHandle\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { ColumnHeaderCell, IColumnHeaderCellProps } from \"./columnHeaderCell\";\nimport { Header, IHeaderProps } from \"./header\";\n\nexport type IColumnHeaderRenderer = (columnIndex: number) => React.ReactElement<IColumnHeaderCellProps>;\n\nexport interface IColumnWidths {\n    minColumnWidth?: number;\n    maxColumnWidth?: number;\n    defaultColumnWidth?: number;\n}\n\nexport interface IColumnHeaderProps extends IHeaderProps, IColumnWidths, IColumnIndices {\n    /**\n     * A IColumnHeaderRenderer that, for each `<Column>`, will delegate to:\n     * 1. The `renderColumnHeader` method from the `<Column>`\n     * 2. A `<ColumnHeaderCell>` using the `name` prop from the `<Column>`\n     * 3. A `<ColumnHeaderCell>` with a `name` generated from `Utils.toBase26Alpha`\n     */\n    cellRenderer: IColumnHeaderRenderer;\n\n    /**\n     * A callback invoked when user is done resizing the column\n     */\n    onColumnWidthChanged: IIndexedResizeCallback;\n}\n\nexport class ColumnHeader extends React.Component<IColumnHeaderProps, {}> {\n    public static defaultProps = {\n        isReorderable: false,\n        isResizable: true,\n        loading: false,\n    };\n\n    public render() {\n        const {\n            // from IColumnHeaderProps\n            cellRenderer: renderHeaderCell,\n            onColumnWidthChanged,\n\n            // from IColumnWidths\n            minColumnWidth: minSize,\n            maxColumnWidth: maxSize,\n            defaultColumnWidth,\n\n            // from IColumnIndices\n            columnIndexStart: indexStart,\n            columnIndexEnd: indexEnd,\n\n            // from IHeaderProps\n            ...spreadableProps,\n        } = this.props;\n\n        return (\n            <Header\n                convertPointToIndex={this.convertPointToColumn}\n                fullRegionCardinality={RegionCardinality.FULL_COLUMNS}\n                getCellExtremaClasses={this.getCellExtremaClasses}\n                getCellIndexClass={Classes.columnCellIndexClass}\n                getCellSize={this.getColumnWidth}\n                getDragCoordinate={this.getDragCoordinate}\n                getIndexClass={Classes.columnIndexClass}\n                getMouseCoordinate={this.getMouseCoordinate}\n                handleResizeDoubleClick={this.handleResizeDoubleClick}\n                handleResizeEnd={this.handleResizeEnd}\n                handleSizeChanged={this.handleSizeChanged}\n                headerCellIsReorderablePropName={\"isColumnReorderable\"}\n                headerCellIsSelectedPropName={\"isColumnSelected\"}\n                indexEnd={indexEnd}\n                indexStart={indexStart}\n                isCellSelected={this.isCellSelected}\n                isGhostIndex={this.isGhostIndex}\n                maxSize={maxSize}\n                minSize={minSize}\n                renderGhostCell={this.renderGhostCell}\n                renderHeaderCell={renderHeaderCell}\n                resizeOrientation={Orientation.VERTICAL}\n                toRegion={this.toRegion}\n                wrapCells={this.wrapCells}\n                {...spreadableProps}\n            />\n        );\n    }\n\nprivate wrapCells = (cells: Array<React.ReactElement<any>>) => {\n    const { columnIndexStart, grid } = this.props;\n\n    const tableWidth = grid.getRect().width;\n    const scrollLeftCorrection = this.props.grid.getCumulativeWidthBefore(columnIndexStart);\n    const style: React.CSSProperties = {\n        // only header cells in view will render, but we need to reposition them to stay in view\n        // as we scroll horizontally.\n        transform: `translateX(${scrollLeftCorrection || 0}px)`,\n        // reduce the width to clamp the sliding window as we approach the final headers; otherwise,\n        // we'll have tons of useless whitespace at the end.\n        width: tableWidth - scrollLeftCorrection,\n    };\n\n    const classes = classNames(Classes.TABLE_THEAD, Classes.TABLE_COLUMN_HEADER_TR);\n\n    // add a wrapper set to the full-table width to ensure container styles stretch from the first\n    // cell all the way to the last\n    return (\n        <div style={{ width: tableWidth }}>\n            <div style={style} className={classes}>\n                {cells}\n            </div>\n        </div>\n    );\n}\n\n    private convertPointToColumn = (clientXOrY: number, useMidpoint?: boolean) => {\n        const { locator } = this.props;\n        return locator != null ? locator.convertPointToColumn(clientXOrY, useMidpoint) : null;\n    }\n\n    private getCellExtremaClasses = (index: number, indexEnd: number) => {\n        return this.props.grid.getExtremaClasses(0, index, 1, indexEnd);\n    }\n\n    private getColumnWidth = (index: number) => {\n        return this.props.grid.getColumnRect(index).width;\n    }\n\n    private getDragCoordinate = (clientCoords: IClientCoordinates) => {\n        return clientCoords[0]; // x-coordinate\n    }\n\n    private getMouseCoordinate = (event: MouseEvent) => {\n        return event.clientX;\n    }\n\n    private handleResizeEnd = (index: number, size: number) => {\n        this.props.onResizeGuide(null);\n        this.props.onColumnWidthChanged(index, size);\n    }\n\n    private handleResizeDoubleClick = (index: number) => {\n        const { minColumnWidth, maxColumnWidth } = this.props;\n\n        const width = this.props.locator.getWidestVisibleCellInColumn(index);\n        const clampedWidth = Utils.clamp(width, minColumnWidth, maxColumnWidth);\n\n        this.props.onResizeGuide(null);\n        this.props.onColumnWidthChanged(index, clampedWidth);\n    }\n\n    private handleSizeChanged = (index: number, size: number) => {\n        const rect = this.props.grid.getColumnRect(index);\n        this.props.onResizeGuide([rect.left + size]);\n    }\n\n    private isCellSelected = (index: number) => {\n        return Regions.hasFullColumn(this.props.selectedRegions, index);\n    }\n\n    private isGhostIndex = (index: number) => {\n        return this.props.grid.isGhostIndex(-1, index);\n    }\n\n    private renderGhostCell = (index: number, extremaClasses: string[]) => {\n        const { grid, loading } = this.props;\n        const rect = grid.getGhostCellRect(0, index);\n        const style = {\n            flexBasis: `${rect.width}px`,\n            width: `${rect.width}px`,\n        };\n        return (\n            <ColumnHeaderCell\n                className={classNames(extremaClasses)}\n                index={index}\n                key={Classes.columnIndexClass(index)}\n                loading={loading}\n                style={style}\n            />);\n    }\n\n    private toRegion = (index1: number, index2?: number) => {\n        return Regions.column(index1, index2);\n    }\n}\n"]}