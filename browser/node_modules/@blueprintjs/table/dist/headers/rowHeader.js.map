{"version":3,"sources":["../src/headers/rowHeader.tsx"],"names":[],"mappings":"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","file":"rowHeader.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../common/classes\";\nimport { IRowIndices } from \"../common/grid\";\nimport { IClientCoordinates } from \"../interactions/draggable\";\nimport { IIndexedResizeCallback } from \"../interactions/resizable\";\nimport { Orientation } from \"../interactions/resizeHandle\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { Header, IHeaderProps } from \"./header\";\nimport { IRowHeaderCellProps, RowHeaderCell } from \"./rowHeaderCell\";\n\nexport type IRowHeaderRenderer = (rowIndex: number) => React.ReactElement<IRowHeaderCellProps>;\n\nexport interface IRowHeights {\n    minRowHeight?: number;\n    maxRowHeight?: number;\n    defaultRowHeight?: number;\n}\n\nexport interface IRowHeaderProps extends IHeaderProps, IRowHeights, IRowIndices {\n    /**\n     * A callback invoked when user is done resizing the column\n     */\n    onRowHeightChanged: IIndexedResizeCallback;\n\n    /**\n     * Renders the cell for each row header\n     */\n    renderRowHeader?: IRowHeaderRenderer;\n}\n\nexport class RowHeader extends React.Component<IRowHeaderProps, {}> {\n    public defaultProps = {\n        renderRowHeader: renderDefaultRowHeader,\n    };\n\n    public render() {\n        const {\n            // from IRowHeaderProps\n            onRowHeightChanged,\n            renderRowHeader: renderHeaderCell,\n\n            // from IRowHeights\n            minRowHeight: minSize,\n            maxRowHeight: maxSize,\n            defaultRowHeight,\n\n            // from IRowIndices\n            rowIndexStart: indexStart,\n            rowIndexEnd: indexEnd,\n\n            // from IHeaderProps\n            ...spreadableProps,\n        } = this.props;\n\n        return (\n            <Header\n                convertPointToIndex={this.convertPointToRow}\n                fullRegionCardinality={RegionCardinality.FULL_ROWS}\n                getCellExtremaClasses={this.getCellExtremaClasses}\n                getCellIndexClass={Classes.rowCellIndexClass}\n                getCellSize={this.getRowHeight}\n                getDragCoordinate={this.getDragCoordinate}\n                getIndexClass={Classes.rowIndexClass}\n                getMouseCoordinate={this.getMouseCoordinate}\n                handleResizeEnd={this.handleResizeEnd}\n                handleSizeChanged={this.handleSizeChanged}\n                headerCellIsReorderablePropName={\"isRowReorderable\"}\n                headerCellIsSelectedPropName={\"isRowSelected\"}\n                indexEnd={indexEnd}\n                indexStart={indexStart}\n                isCellSelected={this.isCellSelected}\n                isGhostIndex={this.isGhostIndex}\n                maxSize={maxSize}\n                minSize={minSize}\n                renderGhostCell={this.renderGhostCell}\n                renderHeaderCell={renderHeaderCell}\n                resizeOrientation={Orientation.HORIZONTAL}\n                toRegion={this.toRegion}\n                wrapCells={this.wrapCells}\n                {...spreadableProps}\n            />\n        );\n    }\n\n    private wrapCells = (cells: Array<React.ReactElement<any>>) => {\n        const { rowIndexStart, grid } = this.props;\n\n        const tableHeight = grid.getRect().height;\n        const scrollTopCorrection = this.props.grid.getCumulativeHeightBefore(rowIndexStart);\n        const style: React.CSSProperties = {\n            // reduce the height to clamp the sliding window as we approach the final headers; otherwise,\n            // we'll have tons of useless whitespace at the end.\n            height: tableHeight - scrollTopCorrection,\n            // only header cells in view will render, but we need to reposition them to stay in view\n            // as we scroll vertically.\n            transform: `translateY(${scrollTopCorrection || 0}px)`,\n        };\n\n        // add a wrapper set to the full-table height to ensure container styles stretch from the first\n        // cell all the way to the last\n        return (\n            <div style={{ height: tableHeight }}>\n                <div className={Classes.TABLE_ROW_HEADERS_CELLS_CONTAINER} style={style}>\n                    {cells}\n                </div>\n            </div>\n        );\n    }\n\n    private convertPointToRow = (clientXOrY: number, useMidpoint?: boolean) => {\n        const { locator } = this.props;\n        return locator != null ? locator.convertPointToRow(clientXOrY, useMidpoint) : null;\n    }\n\n    private getCellExtremaClasses = (index: number, indexEnd: number) => {\n        return this.props.grid.getExtremaClasses(index, 0, indexEnd, 1);\n    }\n\n    private getRowHeight = (index: number) => {\n        return this.props.grid.getRowRect(index).height;\n    }\n\n    private getDragCoordinate = (clientCoords: IClientCoordinates) => {\n        return clientCoords[1]; // y-coordinate\n    }\n\n    private getMouseCoordinate = (event: MouseEvent) => {\n        return event.clientY;\n    }\n\n    private handleResizeEnd = (index: number, size: number) => {\n        this.props.onResizeGuide(null);\n        this.props.onRowHeightChanged(index, size);\n    }\n\n    private handleSizeChanged = (index: number, size: number) => {\n        const rect = this.props.grid.getRowRect(index);\n        this.props.onResizeGuide([rect.top + size]);\n    }\n\n    private isCellSelected = (index: number) => {\n        return Regions.hasFullRow(this.props.selectedRegions, index);\n    }\n\n    private isGhostIndex = (index: number) => {\n        return this.props.grid.isGhostIndex(index, -1);\n    }\n\n    private renderGhostCell = (index: number, extremaClasses: string[]) => {\n        const rect = this.props.grid.getGhostCellRect(index, 0);\n        return (\n            <RowHeaderCell\n                className={classNames(extremaClasses)}\n                index={index}\n                key={Classes.rowIndexClass(index)}\n                loading={this.props.loading}\n                style={{ height: `${rect.height}px` }}\n            />);\n    }\n\n    private toRegion = (index1: number, index2?: number) => {\n        // the `this` value is messed up for Regions.row, so we have to have a wrapper function here\n        return Regions.row(index1, index2);\n    }\n}\n\n/**\n * A default implementation of `IRowHeaderRenderer` that displays 1-indexed\n * numbers for each row.\n */\nexport function renderDefaultRowHeader(rowIndex: number) {\n    return <RowHeaderCell index={rowIndex} name={`${rowIndex + 1}`}/>;\n}\n"]}