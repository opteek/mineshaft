'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = BoxPlot;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _group = require('@vx/group');

var _additionalProps = require('../util/additionalProps');

var _additionalProps2 = _interopRequireDefault(_additionalProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function BoxPlot(_ref) {
  var _ref$left = _ref.left,
      left = _ref$left === undefined ? 0 : _ref$left,
      className = _ref.className,
      data = _ref.data,
      max = _ref.max,
      min = _ref.min,
      firstQuartile = _ref.firstQuartile,
      thirdQuartile = _ref.thirdQuartile,
      median = _ref.median,
      boxWidth = _ref.boxWidth,
      fill = _ref.fill,
      fillOpacity = _ref.fillOpacity,
      stroke = _ref.stroke,
      strokeWidth = _ref.strokeWidth,
      _ref$rx = _ref.rx,
      rx = _ref$rx === undefined ? 2 : _ref$rx,
      _ref$ry = _ref.ry,
      ry = _ref$ry === undefined ? 2 : _ref$ry,
      _ref$medianProps = _ref.medianProps,
      medianProps = _ref$medianProps === undefined ? {} : _ref$medianProps,
      _ref$maxProps = _ref.maxProps,
      maxProps = _ref$maxProps === undefined ? {} : _ref$maxProps,
      _ref$minProps = _ref.minProps,
      minProps = _ref$minProps === undefined ? {} : _ref$minProps,
      _ref$boxProps = _ref.boxProps,
      boxProps = _ref$boxProps === undefined ? {} : _ref$boxProps,
      _ref$container = _ref.container,
      container = _ref$container === undefined ? false : _ref$container,
      _ref$containerProps = _ref.containerProps,
      containerProps = _ref$containerProps === undefined ? {} : _ref$containerProps,
      restProps = _objectWithoutProperties(_ref, ['left', 'className', 'data', 'max', 'min', 'firstQuartile', 'thirdQuartile', 'median', 'boxWidth', 'fill', 'fillOpacity', 'stroke', 'strokeWidth', 'rx', 'ry', 'medianProps', 'maxProps', 'minProps', 'boxProps', 'container', 'containerProps']);

  var centerX = left + boxWidth / 2;
  return _react2.default.createElement(
    _group.Group,
    { className: (0, _classnames2.default)('vx-boxplot', className) },
    _react2.default.createElement('line', _extends({
      className: 'vx-boxplot-max',
      x1: centerX - boxWidth / 4,
      y1: max,
      x2: centerX + boxWidth / 4,
      y2: max,
      stroke: stroke,
      strokeWidth: strokeWidth
    }, (0, _additionalProps2.default)(maxProps, {
      data: data,
      max: max,
      x1: centerX - boxWidth / 4,
      x2: centerX + boxWidth / 4
    }))),
    _react2.default.createElement('line', {
      x1: centerX,
      y1: max,
      x2: centerX,
      y2: thirdQuartile,
      stroke: stroke,
      strokeWidth: strokeWidth
    }),
    _react2.default.createElement('rect', _extends({
      x: left,
      y: thirdQuartile,
      width: boxWidth,
      height: firstQuartile - thirdQuartile,
      stroke: stroke,
      strokeWidth: strokeWidth,
      fill: fill,
      fillOpacity: fillOpacity,
      rx: rx,
      ry: ry
    }, (0, _additionalProps2.default)(boxProps, {
      data: data,
      height: firstQuartile - thirdQuartile,
      median: median,
      firstQuartile: firstQuartile,
      thirdQuartile: thirdQuartile,
      min: min,
      max: max,
      x1: left,
      x2: left + boxWidth
    }))),
    _react2.default.createElement('line', _extends({
      className: 'vx-boxplot-median',
      x1: left,
      y1: median,
      x2: left + boxWidth,
      y2: median,
      stroke: stroke,
      strokeWidth: strokeWidth
    }, (0, _additionalProps2.default)(medianProps, {
      data: data,
      median: median,
      x1: left,
      x2: left + boxWidth
    }))),
    _react2.default.createElement('line', {
      x1: centerX,
      y1: firstQuartile,
      x2: centerX,
      y2: min,
      stroke: stroke,
      strokeWidth: strokeWidth
    }),
    _react2.default.createElement('line', _extends({
      className: 'vx-boxplot-min',
      x1: centerX - boxWidth / 4,
      y1: min,
      x2: centerX + boxWidth / 4,
      y2: min,
      stroke: stroke,
      strokeWidth: strokeWidth
    }, (0, _additionalProps2.default)(minProps, {
      data: data,
      min: min,
      x1: centerX - boxWidth / 4,
      x2: centerX + boxWidth / 4
    }))),
    container && _react2.default.createElement('rect', _extends({
      x: left,
      y: max,
      width: boxWidth,
      height: min - max,
      fillOpacity: '0'
    }, (0, _additionalProps2.default)(containerProps, {
      data: data,
      x1: left,
      x2: left + boxWidth,
      median: median,
      max: max,
      min: min,
      thirdQuartile: thirdQuartile,
      firstQuartile: firstQuartile
    })))
  );
}